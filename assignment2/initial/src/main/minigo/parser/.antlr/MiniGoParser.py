# Generated from w:/CO3005/assignment2/initial/src/main/minigo/parser/MiniGo.g4 by ANTLR 4.13.1
# encoding: utf-8
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
	from typing import TextIO
else:
	from typing.io import TextIO

def serializedATN():
    return [
        4,1,78,877,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
        6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,
        2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,
        7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,
        2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,
        7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,
        2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,
        7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,52,7,52,
        2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,58,2,59,
        7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,2,64,7,64,2,65,7,65,
        2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,2,71,7,71,2,72,
        7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,2,78,7,78,
        2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,7,84,1,0,
        1,0,1,0,1,1,1,1,1,1,3,1,177,8,1,1,2,1,2,1,2,1,2,1,2,1,2,1,2,5,2,
        186,8,2,10,2,12,2,189,9,2,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,3,
        3,200,8,3,1,3,1,3,1,4,1,4,1,4,1,4,1,4,5,4,209,8,4,10,4,12,4,212,
        9,4,1,5,1,5,3,5,216,8,5,1,6,1,6,1,7,1,7,1,7,1,7,1,7,1,7,5,7,226,
        8,7,10,7,12,7,229,9,7,1,8,1,8,1,8,1,8,1,8,1,8,5,8,237,8,8,10,8,12,
        8,240,9,8,1,9,1,9,1,9,1,9,1,9,1,9,5,9,248,8,9,10,9,12,9,251,9,9,
        1,10,1,10,1,10,1,10,1,10,1,10,5,10,259,8,10,10,10,12,10,262,9,10,
        1,11,1,11,1,11,1,11,1,11,1,11,5,11,270,8,11,10,11,12,11,273,9,11,
        1,12,1,12,1,12,3,12,278,8,12,1,13,1,13,1,13,1,13,1,13,1,13,1,13,
        1,13,3,13,288,8,13,5,13,290,8,13,10,13,12,13,293,9,13,1,14,1,14,
        1,14,1,14,1,14,1,14,1,14,1,14,5,14,303,8,14,10,14,12,14,306,9,14,
        1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,3,15,319,
        8,15,1,16,1,16,1,16,1,16,1,16,3,16,326,8,16,1,17,1,17,1,17,1,17,
        1,17,1,17,1,17,1,17,3,17,336,8,17,1,18,1,18,1,18,1,18,1,19,1,19,
        1,19,1,19,3,19,346,8,19,1,19,1,19,1,19,3,19,351,8,19,1,20,1,20,3,
        20,355,8,20,1,21,1,21,1,22,1,22,3,22,361,8,22,1,23,1,23,1,23,1,24,
        1,24,1,24,1,24,3,24,370,8,24,1,25,1,25,1,26,1,26,1,26,1,26,1,26,
        1,26,5,26,380,8,26,10,26,12,26,383,9,26,1,27,1,27,1,27,1,27,1,27,
        1,27,5,27,391,8,27,10,27,12,27,394,9,27,1,28,1,28,1,28,1,28,1,28,
        1,28,5,28,402,8,28,10,28,12,28,405,9,28,1,29,1,29,1,29,1,29,1,29,
        1,29,5,29,413,8,29,10,29,12,29,416,9,29,1,30,1,30,1,30,1,30,1,30,
        1,30,5,30,424,8,30,10,30,12,30,427,9,30,1,31,1,31,1,31,1,32,1,32,
        1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,3,32,443,8,32,1,33,
        1,33,1,33,3,33,448,8,33,1,34,1,34,1,34,1,34,1,34,3,34,455,8,34,1,
        35,1,35,1,35,3,35,460,8,35,1,35,1,35,1,36,1,36,1,36,1,36,3,36,468,
        8,36,1,37,1,37,1,37,1,37,1,37,1,38,1,38,1,38,3,38,478,8,38,1,39,
        1,39,1,39,1,39,3,39,484,8,39,1,40,1,40,1,40,1,40,1,41,1,41,1,41,
        1,41,1,41,3,41,495,8,41,1,42,1,42,1,42,1,42,3,42,501,8,42,1,42,1,
        42,1,42,1,42,1,42,3,42,508,8,42,5,42,510,8,42,10,42,12,42,513,9,
        42,1,43,1,43,1,43,1,43,3,43,519,8,43,1,44,1,44,1,44,3,44,524,8,44,
        1,44,1,44,1,44,1,44,3,44,530,8,44,5,44,532,8,44,10,44,12,44,535,
        9,44,1,45,1,45,1,45,1,45,1,45,1,45,1,45,1,45,1,45,1,45,1,45,1,45,
        1,45,1,45,1,45,3,45,552,8,45,1,45,1,45,1,46,1,46,1,46,1,46,1,46,
        1,46,1,46,5,46,563,8,46,10,46,12,46,566,9,46,1,47,1,47,1,47,1,47,
        1,48,1,48,1,48,1,48,1,49,1,49,1,50,1,50,1,50,1,50,3,50,582,8,50,
        1,51,1,51,1,51,3,51,587,8,51,1,52,1,52,1,52,1,52,1,52,1,52,1,52,
        1,53,1,53,1,53,1,53,1,53,1,53,1,53,1,53,1,53,1,53,1,53,3,53,607,
        8,53,1,54,1,54,1,54,1,54,1,54,1,54,1,54,1,54,1,54,1,54,1,54,1,54,
        1,54,1,54,1,54,1,54,3,54,625,8,54,1,54,1,54,1,54,1,54,1,54,1,54,
        3,54,633,8,54,1,55,1,55,1,55,3,55,638,8,55,1,56,1,56,1,57,1,57,1,
        58,1,58,3,58,646,8,58,1,59,1,59,1,60,1,60,1,61,1,61,1,61,1,61,3,
        61,656,8,61,1,61,1,61,1,61,1,62,1,62,1,62,1,62,3,62,665,8,62,1,63,
        1,63,1,63,1,63,1,63,1,64,1,64,1,64,3,64,675,8,64,1,65,1,65,1,66,
        1,66,1,66,3,66,682,8,66,1,67,1,67,1,68,1,68,1,68,1,68,1,68,1,68,
        1,69,1,69,1,69,1,69,1,70,1,70,1,70,3,70,699,8,70,1,70,1,70,3,70,
        703,8,70,1,71,1,71,3,71,707,8,71,1,72,1,72,1,72,1,72,1,72,3,72,714,
        8,72,1,72,1,72,1,72,1,73,1,73,1,73,1,73,3,73,723,8,73,1,73,3,73,
        726,8,73,1,74,1,74,1,74,1,75,1,75,1,75,1,75,1,75,3,75,736,8,75,1,
        75,1,75,1,75,1,76,1,76,1,76,3,76,744,8,76,1,76,1,76,3,76,748,8,76,
        1,76,1,76,3,76,752,8,76,1,76,3,76,755,8,76,1,77,1,77,1,77,1,77,1,
        77,1,77,3,77,763,8,77,1,78,1,78,1,78,1,78,3,78,769,8,78,1,79,1,79,
        1,79,3,79,774,8,79,1,80,1,80,1,80,3,80,779,8,80,1,80,1,80,3,80,783,
        8,80,1,81,1,81,1,81,1,81,3,81,789,8,81,1,81,1,81,3,81,793,8,81,1,
        81,1,81,1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,3,82,805,8,82,1,
        82,1,82,3,82,809,8,82,1,82,1,82,1,83,1,83,3,83,815,8,83,1,83,1,83,
        1,83,1,84,1,84,1,84,1,84,1,84,1,84,1,84,1,84,1,84,1,84,1,84,1,84,
        1,84,1,84,1,84,1,84,1,84,1,84,1,84,1,84,1,84,1,84,1,84,1,84,1,84,
        1,84,1,84,1,84,1,84,1,84,1,84,1,84,1,84,1,84,1,84,1,84,1,84,1,84,
        1,84,1,84,1,84,1,84,1,84,1,84,1,84,1,84,1,84,1,84,1,84,1,84,1,84,
        1,84,1,84,1,84,1,84,3,84,875,8,84,1,84,0,17,4,8,14,16,18,20,22,26,
        28,52,54,56,58,60,84,88,92,85,0,2,4,6,8,10,12,14,16,18,20,22,24,
        26,28,30,32,34,36,38,40,42,44,46,48,50,52,54,56,58,60,62,64,66,68,
        70,72,74,76,78,80,82,84,86,88,90,92,94,96,98,100,102,104,106,108,
        110,112,114,116,118,120,122,124,126,128,130,132,134,136,138,140,
        142,144,146,148,150,152,154,156,158,160,162,164,166,168,0,7,1,0,
        41,46,1,0,36,37,1,0,38,40,1,0,67,70,1,0,51,56,1,0,50,51,1,0,9,12,
        935,0,170,1,0,0,0,2,176,1,0,0,0,4,178,1,0,0,0,6,199,1,0,0,0,8,203,
        1,0,0,0,10,215,1,0,0,0,12,217,1,0,0,0,14,219,1,0,0,0,16,230,1,0,
        0,0,18,241,1,0,0,0,20,252,1,0,0,0,22,263,1,0,0,0,24,274,1,0,0,0,
        26,279,1,0,0,0,28,294,1,0,0,0,30,318,1,0,0,0,32,325,1,0,0,0,34,335,
        1,0,0,0,36,337,1,0,0,0,38,350,1,0,0,0,40,354,1,0,0,0,42,356,1,0,
        0,0,44,360,1,0,0,0,46,362,1,0,0,0,48,365,1,0,0,0,50,371,1,0,0,0,
        52,373,1,0,0,0,54,384,1,0,0,0,56,395,1,0,0,0,58,406,1,0,0,0,60,417,
        1,0,0,0,62,428,1,0,0,0,64,442,1,0,0,0,66,447,1,0,0,0,68,454,1,0,
        0,0,70,456,1,0,0,0,72,463,1,0,0,0,74,469,1,0,0,0,76,477,1,0,0,0,
        78,483,1,0,0,0,80,485,1,0,0,0,82,489,1,0,0,0,84,500,1,0,0,0,86,514,
        1,0,0,0,88,523,1,0,0,0,90,551,1,0,0,0,92,555,1,0,0,0,94,567,1,0,
        0,0,96,571,1,0,0,0,98,575,1,0,0,0,100,577,1,0,0,0,102,586,1,0,0,
        0,104,588,1,0,0,0,106,606,1,0,0,0,108,632,1,0,0,0,110,637,1,0,0,
        0,112,639,1,0,0,0,114,641,1,0,0,0,116,643,1,0,0,0,118,647,1,0,0,
        0,120,649,1,0,0,0,122,651,1,0,0,0,124,660,1,0,0,0,126,666,1,0,0,
        0,128,674,1,0,0,0,130,676,1,0,0,0,132,678,1,0,0,0,134,683,1,0,0,
        0,136,685,1,0,0,0,138,691,1,0,0,0,140,695,1,0,0,0,142,706,1,0,0,
        0,144,708,1,0,0,0,146,722,1,0,0,0,148,727,1,0,0,0,150,730,1,0,0,
        0,152,751,1,0,0,0,154,756,1,0,0,0,156,768,1,0,0,0,158,770,1,0,0,
        0,160,782,1,0,0,0,162,784,1,0,0,0,164,796,1,0,0,0,166,812,1,0,0,
        0,168,874,1,0,0,0,170,171,3,2,1,0,171,172,5,0,0,1,172,1,1,0,0,0,
        173,174,5,34,0,0,174,177,3,2,1,0,175,177,3,4,2,0,176,173,1,0,0,0,
        176,175,1,0,0,0,177,3,1,0,0,0,178,179,6,2,-1,0,179,180,3,6,3,0,180,
        187,1,0,0,0,181,182,10,2,0,0,182,186,5,34,0,0,183,184,10,1,0,0,184,
        186,3,6,3,0,185,181,1,0,0,0,185,183,1,0,0,0,186,189,1,0,0,0,187,
        185,1,0,0,0,187,188,1,0,0,0,188,5,1,0,0,0,189,187,1,0,0,0,190,200,
        3,144,72,0,191,200,3,150,75,0,192,200,3,126,63,0,193,200,3,122,61,
        0,194,200,3,138,69,0,195,200,3,136,68,0,196,200,3,124,62,0,197,200,
        3,162,81,0,198,200,3,164,82,0,199,190,1,0,0,0,199,191,1,0,0,0,199,
        192,1,0,0,0,199,193,1,0,0,0,199,194,1,0,0,0,199,195,1,0,0,0,199,
        196,1,0,0,0,199,197,1,0,0,0,199,198,1,0,0,0,200,201,1,0,0,0,201,
        202,3,10,5,0,202,7,1,0,0,0,203,204,6,4,-1,0,204,205,5,34,0,0,205,
        210,1,0,0,0,206,207,10,1,0,0,207,209,5,34,0,0,208,206,1,0,0,0,209,
        212,1,0,0,0,210,208,1,0,0,0,210,211,1,0,0,0,211,9,1,0,0,0,212,210,
        1,0,0,0,213,216,5,59,0,0,214,216,3,8,4,0,215,213,1,0,0,0,215,214,
        1,0,0,0,216,11,1,0,0,0,217,218,3,14,7,0,218,13,1,0,0,0,219,220,6,
        7,-1,0,220,221,3,16,8,0,221,227,1,0,0,0,222,223,10,2,0,0,223,224,
        5,48,0,0,224,226,3,16,8,0,225,222,1,0,0,0,226,229,1,0,0,0,227,225,
        1,0,0,0,227,228,1,0,0,0,228,15,1,0,0,0,229,227,1,0,0,0,230,231,6,
        8,-1,0,231,232,3,18,9,0,232,238,1,0,0,0,233,234,10,2,0,0,234,235,
        5,47,0,0,235,237,3,18,9,0,236,233,1,0,0,0,237,240,1,0,0,0,238,236,
        1,0,0,0,238,239,1,0,0,0,239,17,1,0,0,0,240,238,1,0,0,0,241,242,6,
        9,-1,0,242,243,3,20,10,0,243,249,1,0,0,0,244,245,10,2,0,0,245,246,
        7,0,0,0,246,248,3,20,10,0,247,244,1,0,0,0,248,251,1,0,0,0,249,247,
        1,0,0,0,249,250,1,0,0,0,250,19,1,0,0,0,251,249,1,0,0,0,252,253,6,
        10,-1,0,253,254,3,22,11,0,254,260,1,0,0,0,255,256,10,2,0,0,256,257,
        7,1,0,0,257,259,3,22,11,0,258,255,1,0,0,0,259,262,1,0,0,0,260,258,
        1,0,0,0,260,261,1,0,0,0,261,21,1,0,0,0,262,260,1,0,0,0,263,264,6,
        11,-1,0,264,265,3,24,12,0,265,271,1,0,0,0,266,267,10,2,0,0,267,268,
        7,2,0,0,268,270,3,24,12,0,269,266,1,0,0,0,270,273,1,0,0,0,271,269,
        1,0,0,0,271,272,1,0,0,0,272,23,1,0,0,0,273,271,1,0,0,0,274,277,3,
        68,34,0,275,278,3,26,13,0,276,278,3,28,14,0,277,275,1,0,0,0,277,
        276,1,0,0,0,278,25,1,0,0,0,279,280,6,13,-1,0,280,281,3,28,14,0,281,
        291,1,0,0,0,282,283,10,2,0,0,283,287,5,57,0,0,284,288,5,35,0,0,285,
        288,3,160,80,0,286,288,3,46,23,0,287,284,1,0,0,0,287,285,1,0,0,0,
        287,286,1,0,0,0,288,290,1,0,0,0,289,282,1,0,0,0,290,293,1,0,0,0,
        291,289,1,0,0,0,291,292,1,0,0,0,292,27,1,0,0,0,293,291,1,0,0,0,294,
        295,6,14,-1,0,295,296,3,30,15,0,296,304,1,0,0,0,297,298,10,2,0,0,
        298,299,5,65,0,0,299,300,3,50,25,0,300,301,5,66,0,0,301,303,1,0,
        0,0,302,297,1,0,0,0,303,306,1,0,0,0,304,302,1,0,0,0,304,305,1,0,
        0,0,305,29,1,0,0,0,306,304,1,0,0,0,307,319,3,32,16,0,308,309,5,61,
        0,0,309,310,3,12,6,0,310,311,5,62,0,0,311,319,1,0,0,0,312,319,5,
        35,0,0,313,319,3,160,80,0,314,319,3,70,35,0,315,319,3,74,37,0,316,
        319,3,82,41,0,317,319,3,86,43,0,318,307,1,0,0,0,318,308,1,0,0,0,
        318,312,1,0,0,0,318,313,1,0,0,0,318,314,1,0,0,0,318,315,1,0,0,0,
        318,316,1,0,0,0,318,317,1,0,0,0,319,31,1,0,0,0,320,326,3,44,22,0,
        321,326,5,19,0,0,322,326,5,20,0,0,323,326,5,18,0,0,324,326,5,73,
        0,0,325,320,1,0,0,0,325,321,1,0,0,0,325,322,1,0,0,0,325,323,1,0,
        0,0,325,324,1,0,0,0,326,33,1,0,0,0,327,336,3,42,21,0,328,336,5,71,
        0,0,329,336,5,73,0,0,330,336,5,19,0,0,331,336,5,20,0,0,332,336,5,
        18,0,0,333,336,3,74,37,0,334,336,5,35,0,0,335,327,1,0,0,0,335,328,
        1,0,0,0,335,329,1,0,0,0,335,330,1,0,0,0,335,331,1,0,0,0,335,332,
        1,0,0,0,335,333,1,0,0,0,335,334,1,0,0,0,336,35,1,0,0,0,337,338,5,
        63,0,0,338,339,3,38,19,0,339,340,5,64,0,0,340,37,1,0,0,0,341,351,
        3,34,17,0,342,351,3,36,18,0,343,346,3,34,17,0,344,346,3,36,18,0,
        345,343,1,0,0,0,345,344,1,0,0,0,346,347,1,0,0,0,347,348,5,58,0,0,
        348,349,3,38,19,0,349,351,1,0,0,0,350,341,1,0,0,0,350,342,1,0,0,
        0,350,345,1,0,0,0,351,39,1,0,0,0,352,355,3,70,35,0,353,355,3,74,
        37,0,354,352,1,0,0,0,354,353,1,0,0,0,355,41,1,0,0,0,356,357,7,3,
        0,0,357,43,1,0,0,0,358,361,3,42,21,0,359,361,5,71,0,0,360,358,1,
        0,0,0,360,359,1,0,0,0,361,45,1,0,0,0,362,363,3,66,33,0,363,364,3,
        48,24,0,364,47,1,0,0,0,365,366,5,65,0,0,366,367,3,50,25,0,367,369,
        5,66,0,0,368,370,3,48,24,0,369,368,1,0,0,0,369,370,1,0,0,0,370,49,
        1,0,0,0,371,372,3,52,26,0,372,51,1,0,0,0,373,374,6,26,-1,0,374,375,
        3,54,27,0,375,381,1,0,0,0,376,377,10,2,0,0,377,378,5,48,0,0,378,
        380,3,54,27,0,379,376,1,0,0,0,380,383,1,0,0,0,381,379,1,0,0,0,381,
        382,1,0,0,0,382,53,1,0,0,0,383,381,1,0,0,0,384,385,6,27,-1,0,385,
        386,3,56,28,0,386,392,1,0,0,0,387,388,10,2,0,0,388,389,5,47,0,0,
        389,391,3,56,28,0,390,387,1,0,0,0,391,394,1,0,0,0,392,390,1,0,0,
        0,392,393,1,0,0,0,393,55,1,0,0,0,394,392,1,0,0,0,395,396,6,28,-1,
        0,396,397,3,58,29,0,397,403,1,0,0,0,398,399,10,2,0,0,399,400,7,0,
        0,0,400,402,3,58,29,0,401,398,1,0,0,0,402,405,1,0,0,0,403,401,1,
        0,0,0,403,404,1,0,0,0,404,57,1,0,0,0,405,403,1,0,0,0,406,407,6,29,
        -1,0,407,408,3,60,30,0,408,414,1,0,0,0,409,410,10,2,0,0,410,411,
        7,1,0,0,411,413,3,60,30,0,412,409,1,0,0,0,413,416,1,0,0,0,414,412,
        1,0,0,0,414,415,1,0,0,0,415,59,1,0,0,0,416,414,1,0,0,0,417,418,6,
        30,-1,0,418,419,3,62,31,0,419,425,1,0,0,0,420,421,10,2,0,0,421,422,
        7,2,0,0,422,424,3,62,31,0,423,420,1,0,0,0,424,427,1,0,0,0,425,423,
        1,0,0,0,425,426,1,0,0,0,426,61,1,0,0,0,427,425,1,0,0,0,428,429,3,
        68,34,0,429,430,3,64,32,0,430,63,1,0,0,0,431,443,3,66,33,0,432,443,
        3,46,23,0,433,443,3,42,21,0,434,435,5,61,0,0,435,436,3,50,25,0,436,
        437,5,62,0,0,437,443,1,0,0,0,438,443,3,70,35,0,439,443,3,74,37,0,
        440,443,3,82,41,0,441,443,3,86,43,0,442,431,1,0,0,0,442,432,1,0,
        0,0,442,433,1,0,0,0,442,434,1,0,0,0,442,438,1,0,0,0,442,439,1,0,
        0,0,442,440,1,0,0,0,442,441,1,0,0,0,443,65,1,0,0,0,444,448,5,35,
        0,0,445,448,5,73,0,0,446,448,3,160,80,0,447,444,1,0,0,0,447,445,
        1,0,0,0,447,446,1,0,0,0,448,67,1,0,0,0,449,455,1,0,0,0,450,451,5,
        37,0,0,451,455,3,68,34,0,452,453,5,49,0,0,453,455,3,68,34,0,454,
        449,1,0,0,0,454,450,1,0,0,0,454,452,1,0,0,0,455,69,1,0,0,0,456,459,
        3,72,36,0,457,460,3,130,65,0,458,460,3,134,67,0,459,457,1,0,0,0,
        459,458,1,0,0,0,460,461,1,0,0,0,461,462,3,36,18,0,462,71,1,0,0,0,
        463,464,5,65,0,0,464,465,3,50,25,0,465,467,5,66,0,0,466,468,3,72,
        36,0,467,466,1,0,0,0,467,468,1,0,0,0,468,73,1,0,0,0,469,470,5,35,
        0,0,470,471,5,63,0,0,471,472,3,76,38,0,472,473,5,64,0,0,473,75,1,
        0,0,0,474,475,3,80,40,0,475,476,3,78,39,0,476,478,1,0,0,0,477,474,
        1,0,0,0,477,478,1,0,0,0,478,77,1,0,0,0,479,480,5,58,0,0,480,481,
        3,80,40,0,481,482,3,78,39,0,482,484,1,0,0,0,483,479,1,0,0,0,483,
        484,1,0,0,0,484,79,1,0,0,0,485,486,5,35,0,0,486,487,5,60,0,0,487,
        488,3,12,6,0,488,81,1,0,0,0,489,490,3,84,42,0,490,494,5,57,0,0,491,
        495,5,35,0,0,492,495,3,160,80,0,493,495,3,46,23,0,494,491,1,0,0,
        0,494,492,1,0,0,0,494,493,1,0,0,0,495,83,1,0,0,0,496,497,6,42,-1,
        0,497,501,5,35,0,0,498,501,3,160,80,0,499,501,3,46,23,0,500,496,
        1,0,0,0,500,498,1,0,0,0,500,499,1,0,0,0,501,511,1,0,0,0,502,503,
        10,4,0,0,503,507,5,57,0,0,504,508,5,35,0,0,505,508,3,160,80,0,506,
        508,3,46,23,0,507,504,1,0,0,0,507,505,1,0,0,0,507,506,1,0,0,0,508,
        510,1,0,0,0,509,502,1,0,0,0,510,513,1,0,0,0,511,509,1,0,0,0,511,
        512,1,0,0,0,512,85,1,0,0,0,513,511,1,0,0,0,514,515,3,88,44,0,515,
        518,5,57,0,0,516,519,5,35,0,0,517,519,3,46,23,0,518,516,1,0,0,0,
        518,517,1,0,0,0,519,87,1,0,0,0,520,521,6,44,-1,0,521,524,5,35,0,
        0,522,524,3,46,23,0,523,520,1,0,0,0,523,522,1,0,0,0,524,533,1,0,
        0,0,525,526,10,3,0,0,526,529,5,57,0,0,527,530,5,35,0,0,528,530,3,
        46,23,0,529,527,1,0,0,0,529,528,1,0,0,0,530,532,1,0,0,0,531,525,
        1,0,0,0,532,535,1,0,0,0,533,531,1,0,0,0,533,534,1,0,0,0,534,89,1,
        0,0,0,535,533,1,0,0,0,536,552,3,46,23,0,537,552,3,82,41,0,538,552,
        3,86,43,0,539,552,3,126,63,0,540,552,3,122,61,0,541,552,3,138,69,
        0,542,552,3,136,68,0,543,552,3,124,62,0,544,552,3,120,60,0,545,552,
        3,118,59,0,546,552,3,104,52,0,547,552,3,108,54,0,548,552,3,94,47,
        0,549,552,3,160,80,0,550,552,3,116,58,0,551,536,1,0,0,0,551,537,
        1,0,0,0,551,538,1,0,0,0,551,539,1,0,0,0,551,540,1,0,0,0,551,541,
        1,0,0,0,551,542,1,0,0,0,551,543,1,0,0,0,551,544,1,0,0,0,551,545,
        1,0,0,0,551,546,1,0,0,0,551,547,1,0,0,0,551,548,1,0,0,0,551,549,
        1,0,0,0,551,550,1,0,0,0,552,553,1,0,0,0,553,554,3,10,5,0,554,91,
        1,0,0,0,555,556,6,46,-1,0,556,557,3,90,45,0,557,564,1,0,0,0,558,
        559,10,2,0,0,559,563,3,90,45,0,560,561,10,1,0,0,561,563,5,34,0,0,
        562,558,1,0,0,0,562,560,1,0,0,0,563,566,1,0,0,0,564,562,1,0,0,0,
        564,565,1,0,0,0,565,93,1,0,0,0,566,564,1,0,0,0,567,568,3,102,51,
        0,568,569,3,98,49,0,569,570,3,12,6,0,570,95,1,0,0,0,571,572,5,35,
        0,0,572,573,3,98,49,0,573,574,3,12,6,0,574,97,1,0,0,0,575,576,7,
        4,0,0,576,99,1,0,0,0,577,578,3,102,51,0,578,581,7,5,0,0,579,582,
        3,12,6,0,580,582,3,74,37,0,581,579,1,0,0,0,581,580,1,0,0,0,582,101,
        1,0,0,0,583,587,5,35,0,0,584,587,3,46,23,0,585,587,3,86,43,0,586,
        583,1,0,0,0,586,584,1,0,0,0,586,585,1,0,0,0,587,103,1,0,0,0,588,
        589,5,1,0,0,589,590,5,61,0,0,590,591,3,12,6,0,591,592,5,62,0,0,592,
        593,3,166,83,0,593,594,3,106,53,0,594,105,1,0,0,0,595,596,5,2,0,
        0,596,597,5,1,0,0,597,598,5,61,0,0,598,599,3,12,6,0,599,600,5,62,
        0,0,600,601,3,166,83,0,601,602,3,106,53,0,602,607,1,0,0,0,603,604,
        5,2,0,0,604,607,3,166,83,0,605,607,1,0,0,0,606,595,1,0,0,0,606,603,
        1,0,0,0,606,605,1,0,0,0,607,107,1,0,0,0,608,609,5,3,0,0,609,610,
        3,110,55,0,610,611,5,59,0,0,611,612,3,12,6,0,612,613,5,59,0,0,613,
        614,3,112,56,0,614,615,3,166,83,0,615,633,1,0,0,0,616,617,5,3,0,
        0,617,618,5,35,0,0,618,619,5,58,0,0,619,620,5,35,0,0,620,621,5,51,
        0,0,621,624,5,17,0,0,622,625,3,30,15,0,623,625,3,46,23,0,624,622,
        1,0,0,0,624,623,1,0,0,0,625,626,1,0,0,0,626,627,3,166,83,0,627,633,
        1,0,0,0,628,629,5,3,0,0,629,630,3,12,6,0,630,631,3,166,83,0,631,
        633,1,0,0,0,632,608,1,0,0,0,632,616,1,0,0,0,632,628,1,0,0,0,633,
        109,1,0,0,0,634,638,3,122,61,0,635,638,3,96,48,0,636,638,3,136,68,
        0,637,634,1,0,0,0,637,635,1,0,0,0,637,636,1,0,0,0,638,111,1,0,0,
        0,639,640,3,96,48,0,640,113,1,0,0,0,641,642,3,12,6,0,642,115,1,0,
        0,0,643,645,5,4,0,0,644,646,3,12,6,0,645,644,1,0,0,0,645,646,1,0,
        0,0,646,117,1,0,0,0,647,648,5,15,0,0,648,119,1,0,0,0,649,650,5,16,
        0,0,650,121,1,0,0,0,651,652,5,14,0,0,652,655,5,35,0,0,653,656,3,
        130,65,0,654,656,3,134,67,0,655,653,1,0,0,0,655,654,1,0,0,0,655,
        656,1,0,0,0,656,657,1,0,0,0,657,658,5,50,0,0,658,659,3,12,6,0,659,
        123,1,0,0,0,660,661,5,14,0,0,661,664,5,35,0,0,662,665,3,130,65,0,
        663,665,3,134,67,0,664,662,1,0,0,0,664,663,1,0,0,0,665,125,1,0,0,
        0,666,667,5,13,0,0,667,668,5,35,0,0,668,669,5,50,0,0,669,670,3,12,
        6,0,670,127,1,0,0,0,671,675,3,130,65,0,672,675,3,134,67,0,673,675,
        3,132,66,0,674,671,1,0,0,0,674,672,1,0,0,0,674,673,1,0,0,0,675,129,
        1,0,0,0,676,677,7,6,0,0,677,131,1,0,0,0,678,681,3,140,70,0,679,682,
        3,130,65,0,680,682,3,134,67,0,681,679,1,0,0,0,681,680,1,0,0,0,682,
        133,1,0,0,0,683,684,5,35,0,0,684,135,1,0,0,0,685,686,5,14,0,0,686,
        687,5,35,0,0,687,688,3,132,66,0,688,689,5,50,0,0,689,690,3,142,71,
        0,690,137,1,0,0,0,691,692,5,14,0,0,692,693,5,35,0,0,693,694,3,132,
        66,0,694,139,1,0,0,0,695,698,5,65,0,0,696,699,3,42,21,0,697,699,
        5,35,0,0,698,696,1,0,0,0,698,697,1,0,0,0,699,700,1,0,0,0,700,702,
        5,66,0,0,701,703,3,140,70,0,702,701,1,0,0,0,702,703,1,0,0,0,703,
        141,1,0,0,0,704,707,3,70,35,0,705,707,3,12,6,0,706,704,1,0,0,0,706,
        705,1,0,0,0,707,143,1,0,0,0,708,709,5,6,0,0,709,710,5,35,0,0,710,
        711,5,7,0,0,711,713,5,63,0,0,712,714,3,8,4,0,713,712,1,0,0,0,713,
        714,1,0,0,0,714,715,1,0,0,0,715,716,3,146,73,0,716,717,5,64,0,0,
        717,145,1,0,0,0,718,719,3,148,74,0,719,720,3,10,5,0,720,723,1,0,
        0,0,721,723,5,34,0,0,722,718,1,0,0,0,722,721,1,0,0,0,723,725,1,0,
        0,0,724,726,3,146,73,0,725,724,1,0,0,0,725,726,1,0,0,0,726,147,1,
        0,0,0,727,728,5,35,0,0,728,729,3,128,64,0,729,149,1,0,0,0,730,731,
        5,6,0,0,731,732,5,35,0,0,732,733,5,8,0,0,733,735,5,63,0,0,734,736,
        3,8,4,0,735,734,1,0,0,0,735,736,1,0,0,0,736,737,1,0,0,0,737,738,
        3,152,76,0,738,739,5,64,0,0,739,151,1,0,0,0,740,741,5,35,0,0,741,
        743,5,61,0,0,742,744,3,154,77,0,743,742,1,0,0,0,743,744,1,0,0,0,
        744,745,1,0,0,0,745,747,5,62,0,0,746,748,3,128,64,0,747,746,1,0,
        0,0,747,748,1,0,0,0,748,749,1,0,0,0,749,752,3,10,5,0,750,752,5,34,
        0,0,751,740,1,0,0,0,751,750,1,0,0,0,752,754,1,0,0,0,753,755,3,152,
        76,0,754,753,1,0,0,0,754,755,1,0,0,0,755,153,1,0,0,0,756,757,5,35,
        0,0,757,758,3,156,78,0,758,759,3,128,64,0,759,762,1,0,0,0,760,761,
        5,58,0,0,761,763,3,154,77,0,762,760,1,0,0,0,762,763,1,0,0,0,763,
        155,1,0,0,0,764,765,5,58,0,0,765,766,5,35,0,0,766,769,3,156,78,0,
        767,769,1,0,0,0,768,764,1,0,0,0,768,767,1,0,0,0,769,157,1,0,0,0,
        770,773,3,12,6,0,771,772,5,58,0,0,772,774,3,158,79,0,773,771,1,0,
        0,0,773,774,1,0,0,0,774,159,1,0,0,0,775,776,5,35,0,0,776,778,5,61,
        0,0,777,779,3,158,79,0,778,777,1,0,0,0,778,779,1,0,0,0,779,780,1,
        0,0,0,780,783,5,62,0,0,781,783,3,168,84,0,782,775,1,0,0,0,782,781,
        1,0,0,0,783,161,1,0,0,0,784,785,5,5,0,0,785,786,5,35,0,0,786,788,
        5,61,0,0,787,789,3,154,77,0,788,787,1,0,0,0,788,789,1,0,0,0,789,
        790,1,0,0,0,790,792,5,62,0,0,791,793,3,128,64,0,792,791,1,0,0,0,
        792,793,1,0,0,0,793,794,1,0,0,0,794,795,3,166,83,0,795,163,1,0,0,
        0,796,797,5,5,0,0,797,798,5,61,0,0,798,799,5,35,0,0,799,800,3,134,
        67,0,800,801,5,62,0,0,801,802,5,35,0,0,802,804,5,61,0,0,803,805,
        3,154,77,0,804,803,1,0,0,0,804,805,1,0,0,0,805,806,1,0,0,0,806,808,
        5,62,0,0,807,809,3,128,64,0,808,807,1,0,0,0,808,809,1,0,0,0,809,
        810,1,0,0,0,810,811,3,166,83,0,811,165,1,0,0,0,812,814,5,63,0,0,
        813,815,5,34,0,0,814,813,1,0,0,0,814,815,1,0,0,0,815,816,1,0,0,0,
        816,817,3,92,46,0,817,818,5,64,0,0,818,167,1,0,0,0,819,820,5,21,
        0,0,820,821,5,61,0,0,821,875,5,62,0,0,822,823,5,22,0,0,823,824,5,
        61,0,0,824,825,3,12,6,0,825,826,5,62,0,0,826,875,1,0,0,0,827,828,
        5,23,0,0,828,829,5,61,0,0,829,830,3,12,6,0,830,831,5,62,0,0,831,
        875,1,0,0,0,832,833,5,24,0,0,833,834,5,61,0,0,834,875,5,62,0,0,835,
        836,5,25,0,0,836,837,5,61,0,0,837,838,3,12,6,0,838,839,5,62,0,0,
        839,875,1,0,0,0,840,841,5,26,0,0,841,842,5,61,0,0,842,843,3,12,6,
        0,843,844,5,62,0,0,844,875,1,0,0,0,845,846,5,27,0,0,846,847,5,61,
        0,0,847,875,5,62,0,0,848,849,5,28,0,0,849,850,5,61,0,0,850,851,3,
        12,6,0,851,852,5,62,0,0,852,875,1,0,0,0,853,854,5,29,0,0,854,855,
        5,61,0,0,855,856,3,12,6,0,856,857,5,62,0,0,857,875,1,0,0,0,858,859,
        5,30,0,0,859,860,5,61,0,0,860,875,5,62,0,0,861,862,5,31,0,0,862,
        863,5,61,0,0,863,864,3,12,6,0,864,865,5,62,0,0,865,875,1,0,0,0,866,
        867,5,32,0,0,867,868,5,61,0,0,868,869,3,12,6,0,869,870,5,62,0,0,
        870,875,1,0,0,0,871,872,5,33,0,0,872,873,5,61,0,0,873,875,5,62,0,
        0,874,819,1,0,0,0,874,822,1,0,0,0,874,827,1,0,0,0,874,832,1,0,0,
        0,874,835,1,0,0,0,874,840,1,0,0,0,874,845,1,0,0,0,874,848,1,0,0,
        0,874,853,1,0,0,0,874,858,1,0,0,0,874,861,1,0,0,0,874,866,1,0,0,
        0,874,871,1,0,0,0,875,169,1,0,0,0,79,176,185,187,199,210,215,227,
        238,249,260,271,277,287,291,304,318,325,335,345,350,354,360,369,
        381,392,403,414,425,442,447,454,459,467,477,483,494,500,507,511,
        518,523,529,533,551,562,564,581,586,606,624,632,637,645,655,664,
        674,681,698,702,706,713,722,725,735,743,747,751,754,762,768,773,
        778,782,788,792,804,808,814,874
    ]

class MiniGoParser ( Parser ):

    grammarFileName = "MiniGo.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "'if'", "'else'", "'for'", "'return'", 
                     "'func'", "'type'", "'struct'", "'interface'", "'string'", 
                     "'int'", "'float'", "'boolean'", "'const'", "'var'", 
                     "'continue'", "'break'", "'range'", "'nil'", "'true'", 
                     "'false'", "'getInt'", "'putInt'", "'putIntLn'", "'getFloat'", 
                     "'putFloat'", "'putFloatLn'", "'getBool'", "'putBool'", 
                     "'putBoolLn'", "'getString'", "'putString'", "'putStringLn'", 
                     "'putLn'", "<INVALID>", "<INVALID>", "'+'", "'-'", 
                     "'*'", "'/'", "'%'", "'=='", "'!='", "'<'", "'<='", 
                     "'>'", "'>='", "'&&'", "'||'", "'!'", "'='", "':='", 
                     "'+='", "'-='", "'*='", "'/='", "'%='", "'.'", "','", 
                     "';'", "':'", "'('", "')'", "'{'", "'}'", "'['", "']'" ]

    symbolicNames = [ "<INVALID>", "IF", "ELSE", "FOR", "RETURN", "FUNC", 
                      "TYPE", "STRUCT", "INTERFACE", "STRING", "INT", "FLOAT", 
                      "BOOLEAN", "CONST", "VAR", "CONTINUE", "BREAK", "RANGE", 
                      "NIL", "TRUE", "FALSE", "GET_INT", "PUT_INT", "PUT_INT_LN", 
                      "GET_FLOAT", "PUT_FLOAT", "PUT_FLOAT_LN", "GET_BOOL", 
                      "PUT_BOOL", "PUT_BOOL_LN", "GET_STRING", "PUT_STRING", 
                      "PUT_STRING_LN", "PUT_LN", "NEWLINE", "ID", "ADD", 
                      "SUB", "MUL", "DIV", "MOD", "EQ", "NEQ", "LT", "LE", 
                      "GT", "GE", "AND", "OR", "NOT", "ASSIGN", "SHORT_ASSIGN", 
                      "ADD_ASSIGN", "SUB_ASSIGN", "MUL_ASSIGN", "DIV_ASSIGN", 
                      "MOD_ASSIGN", "DOT", "COMMA", "SEMICOLON", "COLON", 
                      "LPAREN", "RPAREN", "LBRACE", "RBRACE", "LBRACKET", 
                      "RBRACKET", "INT_LIT", "HEX_LIT", "OCT_LIT", "BIN_LIT", 
                      "FLOAT_LIT", "WS", "STRING_LIT", "LINE_COMMENT", "BLOCK_COMMENT", 
                      "ERROR_CHAR", "ILLEGAL_ESCAPE", "UNCLOSE_STRING" ]

    RULE_program = 0
    RULE_program_list = 1
    RULE_decl_or_stmt = 2
    RULE_decl = 3
    RULE_newlines = 4
    RULE_eos = 5
    RULE_expr = 6
    RULE_logical_or_expr = 7
    RULE_logical_and_expr = 8
    RULE_relational_expr = 9
    RULE_additive_expr = 10
    RULE_multiplicative_expr = 11
    RULE_primary_expr = 12
    RULE_field_access = 13
    RULE_atom_arr_access = 14
    RULE_atom = 15
    RULE_atom_value = 16
    RULE_arr_allow_lit = 17
    RULE_arr_init_list = 18
    RULE_arr_init_list_body = 19
    RULE_literal = 20
    RULE_int_number = 21
    RULE_number = 22
    RULE_array_access = 23
    RULE_array_access_tail = 24
    RULE_index_expr = 25
    RULE_logical_index_or_expr = 26
    RULE_logical_index_and_expr = 27
    RULE_relational_index_expr = 28
    RULE_additive_index_expr = 29
    RULE_multiplicative_index_expr = 30
    RULE_signed_index_expr = 31
    RULE_primary_index_expr = 32
    RULE_secondary_index_expr = 33
    RULE_signed_tail = 34
    RULE_array_literal = 35
    RULE_array_literal_tail3 = 36
    RULE_struct_literal = 37
    RULE_struct_literal_tail = 38
    RULE_struct_literal_tail2 = 39
    RULE_field_init = 40
    RULE_struct_field_access = 41
    RULE_struct_field_access_head = 42
    RULE_struct_field_access_no_func = 43
    RULE_struct_field_access_no_func_head = 44
    RULE_stmt_in_block = 45
    RULE_stmt_list = 46
    RULE_assignment_stmt = 47
    RULE_assignment_stmt_scalar = 48
    RULE_assignment_operator = 49
    RULE_assignment_expr = 50
    RULE_lhs = 51
    RULE_if_stmt = 52
    RULE_if_stmt_tail = 53
    RULE_for_stmt = 54
    RULE_for_init = 55
    RULE_for_update = 56
    RULE_for_condition = 57
    RULE_return_stmt = 58
    RULE_continue_stmt = 59
    RULE_break_stmt = 60
    RULE_var_decl = 61
    RULE_var_decl_no_init = 62
    RULE_const_decl = 63
    RULE_types = 64
    RULE_primitiveType = 65
    RULE_arrayType = 66
    RULE_compositeType = 67
    RULE_array_decl_with_init = 68
    RULE_array_decl = 69
    RULE_dimensions = 70
    RULE_array_init = 71
    RULE_struct_decl = 72
    RULE_field_decl_list = 73
    RULE_field_decl = 74
    RULE_interface_decl = 75
    RULE_method_in_decl = 76
    RULE_param_decl = 77
    RULE_param_decl_tail = 78
    RULE_param_call_list = 79
    RULE_function_call = 80
    RULE_func_decl = 81
    RULE_method_decl = 82
    RULE_block = 83
    RULE_built_in_function_call = 84

    ruleNames =  [ "program", "program_list", "decl_or_stmt", "decl", "newlines", 
                   "eos", "expr", "logical_or_expr", "logical_and_expr", 
                   "relational_expr", "additive_expr", "multiplicative_expr", 
                   "primary_expr", "field_access", "atom_arr_access", "atom", 
                   "atom_value", "arr_allow_lit", "arr_init_list", "arr_init_list_body", 
                   "literal", "int_number", "number", "array_access", "array_access_tail", 
                   "index_expr", "logical_index_or_expr", "logical_index_and_expr", 
                   "relational_index_expr", "additive_index_expr", "multiplicative_index_expr", 
                   "signed_index_expr", "primary_index_expr", "secondary_index_expr", 
                   "signed_tail", "array_literal", "array_literal_tail3", 
                   "struct_literal", "struct_literal_tail", "struct_literal_tail2", 
                   "field_init", "struct_field_access", "struct_field_access_head", 
                   "struct_field_access_no_func", "struct_field_access_no_func_head", 
                   "stmt_in_block", "stmt_list", "assignment_stmt", "assignment_stmt_scalar", 
                   "assignment_operator", "assignment_expr", "lhs", "if_stmt", 
                   "if_stmt_tail", "for_stmt", "for_init", "for_update", 
                   "for_condition", "return_stmt", "continue_stmt", "break_stmt", 
                   "var_decl", "var_decl_no_init", "const_decl", "types", 
                   "primitiveType", "arrayType", "compositeType", "array_decl_with_init", 
                   "array_decl", "dimensions", "array_init", "struct_decl", 
                   "field_decl_list", "field_decl", "interface_decl", "method_in_decl", 
                   "param_decl", "param_decl_tail", "param_call_list", "function_call", 
                   "func_decl", "method_decl", "block", "built_in_function_call" ]

    EOF = Token.EOF
    IF=1
    ELSE=2
    FOR=3
    RETURN=4
    FUNC=5
    TYPE=6
    STRUCT=7
    INTERFACE=8
    STRING=9
    INT=10
    FLOAT=11
    BOOLEAN=12
    CONST=13
    VAR=14
    CONTINUE=15
    BREAK=16
    RANGE=17
    NIL=18
    TRUE=19
    FALSE=20
    GET_INT=21
    PUT_INT=22
    PUT_INT_LN=23
    GET_FLOAT=24
    PUT_FLOAT=25
    PUT_FLOAT_LN=26
    GET_BOOL=27
    PUT_BOOL=28
    PUT_BOOL_LN=29
    GET_STRING=30
    PUT_STRING=31
    PUT_STRING_LN=32
    PUT_LN=33
    NEWLINE=34
    ID=35
    ADD=36
    SUB=37
    MUL=38
    DIV=39
    MOD=40
    EQ=41
    NEQ=42
    LT=43
    LE=44
    GT=45
    GE=46
    AND=47
    OR=48
    NOT=49
    ASSIGN=50
    SHORT_ASSIGN=51
    ADD_ASSIGN=52
    SUB_ASSIGN=53
    MUL_ASSIGN=54
    DIV_ASSIGN=55
    MOD_ASSIGN=56
    DOT=57
    COMMA=58
    SEMICOLON=59
    COLON=60
    LPAREN=61
    RPAREN=62
    LBRACE=63
    RBRACE=64
    LBRACKET=65
    RBRACKET=66
    INT_LIT=67
    HEX_LIT=68
    OCT_LIT=69
    BIN_LIT=70
    FLOAT_LIT=71
    WS=72
    STRING_LIT=73
    LINE_COMMENT=74
    BLOCK_COMMENT=75
    ERROR_CHAR=76
    ILLEGAL_ESCAPE=77
    UNCLOSE_STRING=78

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.1")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None




    class ProgramContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def program_list(self):
            return self.getTypedRuleContext(MiniGoParser.Program_listContext,0)


        def EOF(self):
            return self.getToken(MiniGoParser.EOF, 0)

        def getRuleIndex(self):
            return MiniGoParser.RULE_program

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProgram" ):
                listener.enterProgram(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProgram" ):
                listener.exitProgram(self)




    def program(self):

        localctx = MiniGoParser.ProgramContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_program)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 170
            self.program_list()
            self.state = 171
            self.match(MiniGoParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Program_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NEWLINE(self):
            return self.getToken(MiniGoParser.NEWLINE, 0)

        def program_list(self):
            return self.getTypedRuleContext(MiniGoParser.Program_listContext,0)


        def decl_or_stmt(self):
            return self.getTypedRuleContext(MiniGoParser.Decl_or_stmtContext,0)


        def getRuleIndex(self):
            return MiniGoParser.RULE_program_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProgram_list" ):
                listener.enterProgram_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProgram_list" ):
                listener.exitProgram_list(self)




    def program_list(self):

        localctx = MiniGoParser.Program_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_program_list)
        try:
            self.state = 176
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [34]:
                self.enterOuterAlt(localctx, 1)
                self.state = 173
                self.match(MiniGoParser.NEWLINE)
                self.state = 174
                self.program_list()
                pass
            elif token in [5, 6, 13, 14]:
                self.enterOuterAlt(localctx, 2)
                self.state = 175
                self.decl_or_stmt(0)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Decl_or_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def decl(self):
            return self.getTypedRuleContext(MiniGoParser.DeclContext,0)


        def decl_or_stmt(self):
            return self.getTypedRuleContext(MiniGoParser.Decl_or_stmtContext,0)


        def NEWLINE(self):
            return self.getToken(MiniGoParser.NEWLINE, 0)

        def getRuleIndex(self):
            return MiniGoParser.RULE_decl_or_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDecl_or_stmt" ):
                listener.enterDecl_or_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDecl_or_stmt" ):
                listener.exitDecl_or_stmt(self)



    def decl_or_stmt(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = MiniGoParser.Decl_or_stmtContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 4
        self.enterRecursionRule(localctx, 4, self.RULE_decl_or_stmt, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 179
            self.decl()
            self._ctx.stop = self._input.LT(-1)
            self.state = 187
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,2,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 185
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,1,self._ctx)
                    if la_ == 1:
                        localctx = MiniGoParser.Decl_or_stmtContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_decl_or_stmt)
                        self.state = 181
                        if not self.precpred(self._ctx, 2):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                        self.state = 182
                        self.match(MiniGoParser.NEWLINE)
                        pass

                    elif la_ == 2:
                        localctx = MiniGoParser.Decl_or_stmtContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_decl_or_stmt)
                        self.state = 183
                        if not self.precpred(self._ctx, 1):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                        self.state = 184
                        self.decl()
                        pass

             
                self.state = 189
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,2,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class DeclContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def eos(self):
            return self.getTypedRuleContext(MiniGoParser.EosContext,0)


        def struct_decl(self):
            return self.getTypedRuleContext(MiniGoParser.Struct_declContext,0)


        def interface_decl(self):
            return self.getTypedRuleContext(MiniGoParser.Interface_declContext,0)


        def const_decl(self):
            return self.getTypedRuleContext(MiniGoParser.Const_declContext,0)


        def var_decl(self):
            return self.getTypedRuleContext(MiniGoParser.Var_declContext,0)


        def array_decl(self):
            return self.getTypedRuleContext(MiniGoParser.Array_declContext,0)


        def array_decl_with_init(self):
            return self.getTypedRuleContext(MiniGoParser.Array_decl_with_initContext,0)


        def var_decl_no_init(self):
            return self.getTypedRuleContext(MiniGoParser.Var_decl_no_initContext,0)


        def func_decl(self):
            return self.getTypedRuleContext(MiniGoParser.Func_declContext,0)


        def method_decl(self):
            return self.getTypedRuleContext(MiniGoParser.Method_declContext,0)


        def getRuleIndex(self):
            return MiniGoParser.RULE_decl

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDecl" ):
                listener.enterDecl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDecl" ):
                listener.exitDecl(self)




    def decl(self):

        localctx = MiniGoParser.DeclContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_decl)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 199
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,3,self._ctx)
            if la_ == 1:
                self.state = 190
                self.struct_decl()
                pass

            elif la_ == 2:
                self.state = 191
                self.interface_decl()
                pass

            elif la_ == 3:
                self.state = 192
                self.const_decl()
                pass

            elif la_ == 4:
                self.state = 193
                self.var_decl()
                pass

            elif la_ == 5:
                self.state = 194
                self.array_decl()
                pass

            elif la_ == 6:
                self.state = 195
                self.array_decl_with_init()
                pass

            elif la_ == 7:
                self.state = 196
                self.var_decl_no_init()
                pass

            elif la_ == 8:
                self.state = 197
                self.func_decl()
                pass

            elif la_ == 9:
                self.state = 198
                self.method_decl()
                pass


            self.state = 201
            self.eos()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NewlinesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NEWLINE(self):
            return self.getToken(MiniGoParser.NEWLINE, 0)

        def newlines(self):
            return self.getTypedRuleContext(MiniGoParser.NewlinesContext,0)


        def getRuleIndex(self):
            return MiniGoParser.RULE_newlines

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNewlines" ):
                listener.enterNewlines(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNewlines" ):
                listener.exitNewlines(self)



    def newlines(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = MiniGoParser.NewlinesContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 8
        self.enterRecursionRule(localctx, 8, self.RULE_newlines, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 204
            self.match(MiniGoParser.NEWLINE)
            self._ctx.stop = self._input.LT(-1)
            self.state = 210
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,4,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = MiniGoParser.NewlinesContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_newlines)
                    self.state = 206
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 207
                    self.match(MiniGoParser.NEWLINE) 
                self.state = 212
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,4,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class EosContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SEMICOLON(self):
            return self.getToken(MiniGoParser.SEMICOLON, 0)

        def newlines(self):
            return self.getTypedRuleContext(MiniGoParser.NewlinesContext,0)


        def getRuleIndex(self):
            return MiniGoParser.RULE_eos

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEos" ):
                listener.enterEos(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEos" ):
                listener.exitEos(self)




    def eos(self):

        localctx = MiniGoParser.EosContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_eos)
        try:
            self.state = 215
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [59]:
                self.enterOuterAlt(localctx, 1)
                self.state = 213
                self.match(MiniGoParser.SEMICOLON)
                pass
            elif token in [34]:
                self.enterOuterAlt(localctx, 2)
                self.state = 214
                self.newlines(0)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def logical_or_expr(self):
            return self.getTypedRuleContext(MiniGoParser.Logical_or_exprContext,0)


        def getRuleIndex(self):
            return MiniGoParser.RULE_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpr" ):
                listener.enterExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpr" ):
                listener.exitExpr(self)




    def expr(self):

        localctx = MiniGoParser.ExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_expr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 217
            self.logical_or_expr(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Logical_or_exprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def logical_and_expr(self):
            return self.getTypedRuleContext(MiniGoParser.Logical_and_exprContext,0)


        def logical_or_expr(self):
            return self.getTypedRuleContext(MiniGoParser.Logical_or_exprContext,0)


        def OR(self):
            return self.getToken(MiniGoParser.OR, 0)

        def getRuleIndex(self):
            return MiniGoParser.RULE_logical_or_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLogical_or_expr" ):
                listener.enterLogical_or_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLogical_or_expr" ):
                listener.exitLogical_or_expr(self)



    def logical_or_expr(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = MiniGoParser.Logical_or_exprContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 14
        self.enterRecursionRule(localctx, 14, self.RULE_logical_or_expr, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 220
            self.logical_and_expr(0)
            self._ctx.stop = self._input.LT(-1)
            self.state = 227
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,6,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = MiniGoParser.Logical_or_exprContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_logical_or_expr)
                    self.state = 222
                    if not self.precpred(self._ctx, 2):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                    self.state = 223
                    self.match(MiniGoParser.OR)
                    self.state = 224
                    self.logical_and_expr(0) 
                self.state = 229
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,6,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class Logical_and_exprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def relational_expr(self):
            return self.getTypedRuleContext(MiniGoParser.Relational_exprContext,0)


        def logical_and_expr(self):
            return self.getTypedRuleContext(MiniGoParser.Logical_and_exprContext,0)


        def AND(self):
            return self.getToken(MiniGoParser.AND, 0)

        def getRuleIndex(self):
            return MiniGoParser.RULE_logical_and_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLogical_and_expr" ):
                listener.enterLogical_and_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLogical_and_expr" ):
                listener.exitLogical_and_expr(self)



    def logical_and_expr(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = MiniGoParser.Logical_and_exprContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 16
        self.enterRecursionRule(localctx, 16, self.RULE_logical_and_expr, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 231
            self.relational_expr(0)
            self._ctx.stop = self._input.LT(-1)
            self.state = 238
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,7,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = MiniGoParser.Logical_and_exprContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_logical_and_expr)
                    self.state = 233
                    if not self.precpred(self._ctx, 2):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                    self.state = 234
                    self.match(MiniGoParser.AND)
                    self.state = 235
                    self.relational_expr(0) 
                self.state = 240
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,7,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class Relational_exprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def additive_expr(self):
            return self.getTypedRuleContext(MiniGoParser.Additive_exprContext,0)


        def relational_expr(self):
            return self.getTypedRuleContext(MiniGoParser.Relational_exprContext,0)


        def EQ(self):
            return self.getToken(MiniGoParser.EQ, 0)

        def NEQ(self):
            return self.getToken(MiniGoParser.NEQ, 0)

        def LT(self):
            return self.getToken(MiniGoParser.LT, 0)

        def LE(self):
            return self.getToken(MiniGoParser.LE, 0)

        def GT(self):
            return self.getToken(MiniGoParser.GT, 0)

        def GE(self):
            return self.getToken(MiniGoParser.GE, 0)

        def getRuleIndex(self):
            return MiniGoParser.RULE_relational_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRelational_expr" ):
                listener.enterRelational_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRelational_expr" ):
                listener.exitRelational_expr(self)



    def relational_expr(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = MiniGoParser.Relational_exprContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 18
        self.enterRecursionRule(localctx, 18, self.RULE_relational_expr, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 242
            self.additive_expr(0)
            self._ctx.stop = self._input.LT(-1)
            self.state = 249
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,8,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = MiniGoParser.Relational_exprContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_relational_expr)
                    self.state = 244
                    if not self.precpred(self._ctx, 2):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                    self.state = 245
                    _la = self._input.LA(1)
                    if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 138538465099776) != 0)):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 246
                    self.additive_expr(0) 
                self.state = 251
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,8,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class Additive_exprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def multiplicative_expr(self):
            return self.getTypedRuleContext(MiniGoParser.Multiplicative_exprContext,0)


        def additive_expr(self):
            return self.getTypedRuleContext(MiniGoParser.Additive_exprContext,0)


        def ADD(self):
            return self.getToken(MiniGoParser.ADD, 0)

        def SUB(self):
            return self.getToken(MiniGoParser.SUB, 0)

        def getRuleIndex(self):
            return MiniGoParser.RULE_additive_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAdditive_expr" ):
                listener.enterAdditive_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAdditive_expr" ):
                listener.exitAdditive_expr(self)



    def additive_expr(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = MiniGoParser.Additive_exprContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 20
        self.enterRecursionRule(localctx, 20, self.RULE_additive_expr, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 253
            self.multiplicative_expr(0)
            self._ctx.stop = self._input.LT(-1)
            self.state = 260
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,9,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = MiniGoParser.Additive_exprContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_additive_expr)
                    self.state = 255
                    if not self.precpred(self._ctx, 2):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                    self.state = 256
                    _la = self._input.LA(1)
                    if not(_la==36 or _la==37):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 257
                    self.multiplicative_expr(0) 
                self.state = 262
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,9,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class Multiplicative_exprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def primary_expr(self):
            return self.getTypedRuleContext(MiniGoParser.Primary_exprContext,0)


        def multiplicative_expr(self):
            return self.getTypedRuleContext(MiniGoParser.Multiplicative_exprContext,0)


        def MUL(self):
            return self.getToken(MiniGoParser.MUL, 0)

        def DIV(self):
            return self.getToken(MiniGoParser.DIV, 0)

        def MOD(self):
            return self.getToken(MiniGoParser.MOD, 0)

        def getRuleIndex(self):
            return MiniGoParser.RULE_multiplicative_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMultiplicative_expr" ):
                listener.enterMultiplicative_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMultiplicative_expr" ):
                listener.exitMultiplicative_expr(self)



    def multiplicative_expr(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = MiniGoParser.Multiplicative_exprContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 22
        self.enterRecursionRule(localctx, 22, self.RULE_multiplicative_expr, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 264
            self.primary_expr()
            self._ctx.stop = self._input.LT(-1)
            self.state = 271
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,10,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = MiniGoParser.Multiplicative_exprContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_multiplicative_expr)
                    self.state = 266
                    if not self.precpred(self._ctx, 2):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                    self.state = 267
                    _la = self._input.LA(1)
                    if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 1924145348608) != 0)):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 268
                    self.primary_expr() 
                self.state = 273
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,10,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class Primary_exprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def signed_tail(self):
            return self.getTypedRuleContext(MiniGoParser.Signed_tailContext,0)


        def field_access(self):
            return self.getTypedRuleContext(MiniGoParser.Field_accessContext,0)


        def atom_arr_access(self):
            return self.getTypedRuleContext(MiniGoParser.Atom_arr_accessContext,0)


        def getRuleIndex(self):
            return MiniGoParser.RULE_primary_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrimary_expr" ):
                listener.enterPrimary_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrimary_expr" ):
                listener.exitPrimary_expr(self)




    def primary_expr(self):

        localctx = MiniGoParser.Primary_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_primary_expr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 274
            self.signed_tail()
            self.state = 277
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,11,self._ctx)
            if la_ == 1:
                self.state = 275
                self.field_access(0)
                pass

            elif la_ == 2:
                self.state = 276
                self.atom_arr_access(0)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Field_accessContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def atom_arr_access(self):
            return self.getTypedRuleContext(MiniGoParser.Atom_arr_accessContext,0)


        def field_access(self):
            return self.getTypedRuleContext(MiniGoParser.Field_accessContext,0)


        def DOT(self):
            return self.getToken(MiniGoParser.DOT, 0)

        def ID(self):
            return self.getToken(MiniGoParser.ID, 0)

        def function_call(self):
            return self.getTypedRuleContext(MiniGoParser.Function_callContext,0)


        def array_access(self):
            return self.getTypedRuleContext(MiniGoParser.Array_accessContext,0)


        def getRuleIndex(self):
            return MiniGoParser.RULE_field_access

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterField_access" ):
                listener.enterField_access(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitField_access" ):
                listener.exitField_access(self)



    def field_access(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = MiniGoParser.Field_accessContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 26
        self.enterRecursionRule(localctx, 26, self.RULE_field_access, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 280
            self.atom_arr_access(0)
            self._ctx.stop = self._input.LT(-1)
            self.state = 291
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,13,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = MiniGoParser.Field_accessContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_field_access)
                    self.state = 282
                    if not self.precpred(self._ctx, 2):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                    self.state = 283
                    self.match(MiniGoParser.DOT)
                    self.state = 287
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,12,self._ctx)
                    if la_ == 1:
                        self.state = 284
                        self.match(MiniGoParser.ID)
                        pass

                    elif la_ == 2:
                        self.state = 285
                        self.function_call()
                        pass

                    elif la_ == 3:
                        self.state = 286
                        self.array_access()
                        pass

             
                self.state = 293
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,13,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class Atom_arr_accessContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def atom(self):
            return self.getTypedRuleContext(MiniGoParser.AtomContext,0)


        def atom_arr_access(self):
            return self.getTypedRuleContext(MiniGoParser.Atom_arr_accessContext,0)


        def LBRACKET(self):
            return self.getToken(MiniGoParser.LBRACKET, 0)

        def index_expr(self):
            return self.getTypedRuleContext(MiniGoParser.Index_exprContext,0)


        def RBRACKET(self):
            return self.getToken(MiniGoParser.RBRACKET, 0)

        def getRuleIndex(self):
            return MiniGoParser.RULE_atom_arr_access

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAtom_arr_access" ):
                listener.enterAtom_arr_access(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAtom_arr_access" ):
                listener.exitAtom_arr_access(self)



    def atom_arr_access(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = MiniGoParser.Atom_arr_accessContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 28
        self.enterRecursionRule(localctx, 28, self.RULE_atom_arr_access, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 295
            self.atom()
            self._ctx.stop = self._input.LT(-1)
            self.state = 304
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,14,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = MiniGoParser.Atom_arr_accessContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_atom_arr_access)
                    self.state = 297
                    if not self.precpred(self._ctx, 2):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                    self.state = 298
                    self.match(MiniGoParser.LBRACKET)
                    self.state = 299
                    self.index_expr()
                    self.state = 300
                    self.match(MiniGoParser.RBRACKET) 
                self.state = 306
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,14,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class AtomContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def atom_value(self):
            return self.getTypedRuleContext(MiniGoParser.Atom_valueContext,0)


        def LPAREN(self):
            return self.getToken(MiniGoParser.LPAREN, 0)

        def expr(self):
            return self.getTypedRuleContext(MiniGoParser.ExprContext,0)


        def RPAREN(self):
            return self.getToken(MiniGoParser.RPAREN, 0)

        def ID(self):
            return self.getToken(MiniGoParser.ID, 0)

        def function_call(self):
            return self.getTypedRuleContext(MiniGoParser.Function_callContext,0)


        def array_literal(self):
            return self.getTypedRuleContext(MiniGoParser.Array_literalContext,0)


        def struct_literal(self):
            return self.getTypedRuleContext(MiniGoParser.Struct_literalContext,0)


        def struct_field_access(self):
            return self.getTypedRuleContext(MiniGoParser.Struct_field_accessContext,0)


        def struct_field_access_no_func(self):
            return self.getTypedRuleContext(MiniGoParser.Struct_field_access_no_funcContext,0)


        def getRuleIndex(self):
            return MiniGoParser.RULE_atom

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAtom" ):
                listener.enterAtom(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAtom" ):
                listener.exitAtom(self)




    def atom(self):

        localctx = MiniGoParser.AtomContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_atom)
        try:
            self.state = 318
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,15,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 307
                self.atom_value()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 308
                self.match(MiniGoParser.LPAREN)
                self.state = 309
                self.expr()
                self.state = 310
                self.match(MiniGoParser.RPAREN)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 312
                self.match(MiniGoParser.ID)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 313
                self.function_call()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 314
                self.array_literal()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 315
                self.struct_literal()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 316
                self.struct_field_access()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 317
                self.struct_field_access_no_func()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Atom_valueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def number(self):
            return self.getTypedRuleContext(MiniGoParser.NumberContext,0)


        def TRUE(self):
            return self.getToken(MiniGoParser.TRUE, 0)

        def FALSE(self):
            return self.getToken(MiniGoParser.FALSE, 0)

        def NIL(self):
            return self.getToken(MiniGoParser.NIL, 0)

        def STRING_LIT(self):
            return self.getToken(MiniGoParser.STRING_LIT, 0)

        def getRuleIndex(self):
            return MiniGoParser.RULE_atom_value

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAtom_value" ):
                listener.enterAtom_value(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAtom_value" ):
                listener.exitAtom_value(self)




    def atom_value(self):

        localctx = MiniGoParser.Atom_valueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_atom_value)
        try:
            self.state = 325
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [67, 68, 69, 70, 71]:
                self.enterOuterAlt(localctx, 1)
                self.state = 320
                self.number()
                pass
            elif token in [19]:
                self.enterOuterAlt(localctx, 2)
                self.state = 321
                self.match(MiniGoParser.TRUE)
                pass
            elif token in [20]:
                self.enterOuterAlt(localctx, 3)
                self.state = 322
                self.match(MiniGoParser.FALSE)
                pass
            elif token in [18]:
                self.enterOuterAlt(localctx, 4)
                self.state = 323
                self.match(MiniGoParser.NIL)
                pass
            elif token in [73]:
                self.enterOuterAlt(localctx, 5)
                self.state = 324
                self.match(MiniGoParser.STRING_LIT)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Arr_allow_litContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def int_number(self):
            return self.getTypedRuleContext(MiniGoParser.Int_numberContext,0)


        def FLOAT_LIT(self):
            return self.getToken(MiniGoParser.FLOAT_LIT, 0)

        def STRING_LIT(self):
            return self.getToken(MiniGoParser.STRING_LIT, 0)

        def TRUE(self):
            return self.getToken(MiniGoParser.TRUE, 0)

        def FALSE(self):
            return self.getToken(MiniGoParser.FALSE, 0)

        def NIL(self):
            return self.getToken(MiniGoParser.NIL, 0)

        def struct_literal(self):
            return self.getTypedRuleContext(MiniGoParser.Struct_literalContext,0)


        def ID(self):
            return self.getToken(MiniGoParser.ID, 0)

        def getRuleIndex(self):
            return MiniGoParser.RULE_arr_allow_lit

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArr_allow_lit" ):
                listener.enterArr_allow_lit(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArr_allow_lit" ):
                listener.exitArr_allow_lit(self)




    def arr_allow_lit(self):

        localctx = MiniGoParser.Arr_allow_litContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_arr_allow_lit)
        try:
            self.state = 335
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,17,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 327
                self.int_number()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 328
                self.match(MiniGoParser.FLOAT_LIT)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 329
                self.match(MiniGoParser.STRING_LIT)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 330
                self.match(MiniGoParser.TRUE)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 331
                self.match(MiniGoParser.FALSE)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 332
                self.match(MiniGoParser.NIL)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 333
                self.struct_literal()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 334
                self.match(MiniGoParser.ID)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Arr_init_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LBRACE(self):
            return self.getToken(MiniGoParser.LBRACE, 0)

        def arr_init_list_body(self):
            return self.getTypedRuleContext(MiniGoParser.Arr_init_list_bodyContext,0)


        def RBRACE(self):
            return self.getToken(MiniGoParser.RBRACE, 0)

        def getRuleIndex(self):
            return MiniGoParser.RULE_arr_init_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArr_init_list" ):
                listener.enterArr_init_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArr_init_list" ):
                listener.exitArr_init_list(self)




    def arr_init_list(self):

        localctx = MiniGoParser.Arr_init_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_arr_init_list)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 337
            self.match(MiniGoParser.LBRACE)
            self.state = 338
            self.arr_init_list_body()
            self.state = 339
            self.match(MiniGoParser.RBRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Arr_init_list_bodyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def arr_allow_lit(self):
            return self.getTypedRuleContext(MiniGoParser.Arr_allow_litContext,0)


        def arr_init_list(self):
            return self.getTypedRuleContext(MiniGoParser.Arr_init_listContext,0)


        def COMMA(self):
            return self.getToken(MiniGoParser.COMMA, 0)

        def arr_init_list_body(self):
            return self.getTypedRuleContext(MiniGoParser.Arr_init_list_bodyContext,0)


        def getRuleIndex(self):
            return MiniGoParser.RULE_arr_init_list_body

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArr_init_list_body" ):
                listener.enterArr_init_list_body(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArr_init_list_body" ):
                listener.exitArr_init_list_body(self)




    def arr_init_list_body(self):

        localctx = MiniGoParser.Arr_init_list_bodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_arr_init_list_body)
        try:
            self.state = 350
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,19,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 341
                self.arr_allow_lit()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 342
                self.arr_init_list()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 345
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [18, 19, 20, 35, 67, 68, 69, 70, 71, 73]:
                    self.state = 343
                    self.arr_allow_lit()
                    pass
                elif token in [63]:
                    self.state = 344
                    self.arr_init_list()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 347
                self.match(MiniGoParser.COMMA)
                self.state = 348
                self.arr_init_list_body()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def array_literal(self):
            return self.getTypedRuleContext(MiniGoParser.Array_literalContext,0)


        def struct_literal(self):
            return self.getTypedRuleContext(MiniGoParser.Struct_literalContext,0)


        def getRuleIndex(self):
            return MiniGoParser.RULE_literal

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLiteral" ):
                listener.enterLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLiteral" ):
                listener.exitLiteral(self)




    def literal(self):

        localctx = MiniGoParser.LiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_literal)
        try:
            self.state = 354
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [65]:
                self.enterOuterAlt(localctx, 1)
                self.state = 352
                self.array_literal()
                pass
            elif token in [35]:
                self.enterOuterAlt(localctx, 2)
                self.state = 353
                self.struct_literal()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Int_numberContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INT_LIT(self):
            return self.getToken(MiniGoParser.INT_LIT, 0)

        def HEX_LIT(self):
            return self.getToken(MiniGoParser.HEX_LIT, 0)

        def OCT_LIT(self):
            return self.getToken(MiniGoParser.OCT_LIT, 0)

        def BIN_LIT(self):
            return self.getToken(MiniGoParser.BIN_LIT, 0)

        def getRuleIndex(self):
            return MiniGoParser.RULE_int_number

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInt_number" ):
                listener.enterInt_number(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInt_number" ):
                listener.exitInt_number(self)




    def int_number(self):

        localctx = MiniGoParser.Int_numberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_int_number)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 356
            _la = self._input.LA(1)
            if not(((((_la - 67)) & ~0x3f) == 0 and ((1 << (_la - 67)) & 15) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NumberContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def int_number(self):
            return self.getTypedRuleContext(MiniGoParser.Int_numberContext,0)


        def FLOAT_LIT(self):
            return self.getToken(MiniGoParser.FLOAT_LIT, 0)

        def getRuleIndex(self):
            return MiniGoParser.RULE_number

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNumber" ):
                listener.enterNumber(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNumber" ):
                listener.exitNumber(self)




    def number(self):

        localctx = MiniGoParser.NumberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_number)
        try:
            self.state = 360
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [67, 68, 69, 70]:
                self.enterOuterAlt(localctx, 1)
                self.state = 358
                self.int_number()
                pass
            elif token in [71]:
                self.enterOuterAlt(localctx, 2)
                self.state = 359
                self.match(MiniGoParser.FLOAT_LIT)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Array_accessContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def secondary_index_expr(self):
            return self.getTypedRuleContext(MiniGoParser.Secondary_index_exprContext,0)


        def array_access_tail(self):
            return self.getTypedRuleContext(MiniGoParser.Array_access_tailContext,0)


        def getRuleIndex(self):
            return MiniGoParser.RULE_array_access

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArray_access" ):
                listener.enterArray_access(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArray_access" ):
                listener.exitArray_access(self)




    def array_access(self):

        localctx = MiniGoParser.Array_accessContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_array_access)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 362
            self.secondary_index_expr()
            self.state = 363
            self.array_access_tail()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Array_access_tailContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LBRACKET(self):
            return self.getToken(MiniGoParser.LBRACKET, 0)

        def index_expr(self):
            return self.getTypedRuleContext(MiniGoParser.Index_exprContext,0)


        def RBRACKET(self):
            return self.getToken(MiniGoParser.RBRACKET, 0)

        def array_access_tail(self):
            return self.getTypedRuleContext(MiniGoParser.Array_access_tailContext,0)


        def getRuleIndex(self):
            return MiniGoParser.RULE_array_access_tail

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArray_access_tail" ):
                listener.enterArray_access_tail(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArray_access_tail" ):
                listener.exitArray_access_tail(self)




    def array_access_tail(self):

        localctx = MiniGoParser.Array_access_tailContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_array_access_tail)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 365
            self.match(MiniGoParser.LBRACKET)
            self.state = 366
            self.index_expr()
            self.state = 367
            self.match(MiniGoParser.RBRACKET)
            self.state = 369
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,22,self._ctx)
            if la_ == 1:
                self.state = 368
                self.array_access_tail()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Index_exprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def logical_index_or_expr(self):
            return self.getTypedRuleContext(MiniGoParser.Logical_index_or_exprContext,0)


        def getRuleIndex(self):
            return MiniGoParser.RULE_index_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIndex_expr" ):
                listener.enterIndex_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIndex_expr" ):
                listener.exitIndex_expr(self)




    def index_expr(self):

        localctx = MiniGoParser.Index_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_index_expr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 371
            self.logical_index_or_expr(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Logical_index_or_exprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def logical_index_and_expr(self):
            return self.getTypedRuleContext(MiniGoParser.Logical_index_and_exprContext,0)


        def logical_index_or_expr(self):
            return self.getTypedRuleContext(MiniGoParser.Logical_index_or_exprContext,0)


        def OR(self):
            return self.getToken(MiniGoParser.OR, 0)

        def getRuleIndex(self):
            return MiniGoParser.RULE_logical_index_or_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLogical_index_or_expr" ):
                listener.enterLogical_index_or_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLogical_index_or_expr" ):
                listener.exitLogical_index_or_expr(self)



    def logical_index_or_expr(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = MiniGoParser.Logical_index_or_exprContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 52
        self.enterRecursionRule(localctx, 52, self.RULE_logical_index_or_expr, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 374
            self.logical_index_and_expr(0)
            self._ctx.stop = self._input.LT(-1)
            self.state = 381
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,23,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = MiniGoParser.Logical_index_or_exprContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_logical_index_or_expr)
                    self.state = 376
                    if not self.precpred(self._ctx, 2):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                    self.state = 377
                    self.match(MiniGoParser.OR)
                    self.state = 378
                    self.logical_index_and_expr(0) 
                self.state = 383
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,23,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class Logical_index_and_exprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def relational_index_expr(self):
            return self.getTypedRuleContext(MiniGoParser.Relational_index_exprContext,0)


        def logical_index_and_expr(self):
            return self.getTypedRuleContext(MiniGoParser.Logical_index_and_exprContext,0)


        def AND(self):
            return self.getToken(MiniGoParser.AND, 0)

        def getRuleIndex(self):
            return MiniGoParser.RULE_logical_index_and_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLogical_index_and_expr" ):
                listener.enterLogical_index_and_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLogical_index_and_expr" ):
                listener.exitLogical_index_and_expr(self)



    def logical_index_and_expr(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = MiniGoParser.Logical_index_and_exprContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 54
        self.enterRecursionRule(localctx, 54, self.RULE_logical_index_and_expr, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 385
            self.relational_index_expr(0)
            self._ctx.stop = self._input.LT(-1)
            self.state = 392
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,24,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = MiniGoParser.Logical_index_and_exprContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_logical_index_and_expr)
                    self.state = 387
                    if not self.precpred(self._ctx, 2):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                    self.state = 388
                    self.match(MiniGoParser.AND)
                    self.state = 389
                    self.relational_index_expr(0) 
                self.state = 394
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,24,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class Relational_index_exprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def additive_index_expr(self):
            return self.getTypedRuleContext(MiniGoParser.Additive_index_exprContext,0)


        def relational_index_expr(self):
            return self.getTypedRuleContext(MiniGoParser.Relational_index_exprContext,0)


        def EQ(self):
            return self.getToken(MiniGoParser.EQ, 0)

        def NEQ(self):
            return self.getToken(MiniGoParser.NEQ, 0)

        def LT(self):
            return self.getToken(MiniGoParser.LT, 0)

        def LE(self):
            return self.getToken(MiniGoParser.LE, 0)

        def GT(self):
            return self.getToken(MiniGoParser.GT, 0)

        def GE(self):
            return self.getToken(MiniGoParser.GE, 0)

        def getRuleIndex(self):
            return MiniGoParser.RULE_relational_index_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRelational_index_expr" ):
                listener.enterRelational_index_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRelational_index_expr" ):
                listener.exitRelational_index_expr(self)



    def relational_index_expr(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = MiniGoParser.Relational_index_exprContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 56
        self.enterRecursionRule(localctx, 56, self.RULE_relational_index_expr, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 396
            self.additive_index_expr(0)
            self._ctx.stop = self._input.LT(-1)
            self.state = 403
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,25,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = MiniGoParser.Relational_index_exprContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_relational_index_expr)
                    self.state = 398
                    if not self.precpred(self._ctx, 2):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                    self.state = 399
                    _la = self._input.LA(1)
                    if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 138538465099776) != 0)):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 400
                    self.additive_index_expr(0) 
                self.state = 405
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,25,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class Additive_index_exprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def multiplicative_index_expr(self):
            return self.getTypedRuleContext(MiniGoParser.Multiplicative_index_exprContext,0)


        def additive_index_expr(self):
            return self.getTypedRuleContext(MiniGoParser.Additive_index_exprContext,0)


        def ADD(self):
            return self.getToken(MiniGoParser.ADD, 0)

        def SUB(self):
            return self.getToken(MiniGoParser.SUB, 0)

        def getRuleIndex(self):
            return MiniGoParser.RULE_additive_index_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAdditive_index_expr" ):
                listener.enterAdditive_index_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAdditive_index_expr" ):
                listener.exitAdditive_index_expr(self)



    def additive_index_expr(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = MiniGoParser.Additive_index_exprContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 58
        self.enterRecursionRule(localctx, 58, self.RULE_additive_index_expr, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 407
            self.multiplicative_index_expr(0)
            self._ctx.stop = self._input.LT(-1)
            self.state = 414
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,26,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = MiniGoParser.Additive_index_exprContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_additive_index_expr)
                    self.state = 409
                    if not self.precpred(self._ctx, 2):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                    self.state = 410
                    _la = self._input.LA(1)
                    if not(_la==36 or _la==37):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 411
                    self.multiplicative_index_expr(0) 
                self.state = 416
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,26,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class Multiplicative_index_exprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def signed_index_expr(self):
            return self.getTypedRuleContext(MiniGoParser.Signed_index_exprContext,0)


        def multiplicative_index_expr(self):
            return self.getTypedRuleContext(MiniGoParser.Multiplicative_index_exprContext,0)


        def MUL(self):
            return self.getToken(MiniGoParser.MUL, 0)

        def DIV(self):
            return self.getToken(MiniGoParser.DIV, 0)

        def MOD(self):
            return self.getToken(MiniGoParser.MOD, 0)

        def getRuleIndex(self):
            return MiniGoParser.RULE_multiplicative_index_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMultiplicative_index_expr" ):
                listener.enterMultiplicative_index_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMultiplicative_index_expr" ):
                listener.exitMultiplicative_index_expr(self)



    def multiplicative_index_expr(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = MiniGoParser.Multiplicative_index_exprContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 60
        self.enterRecursionRule(localctx, 60, self.RULE_multiplicative_index_expr, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 418
            self.signed_index_expr()
            self._ctx.stop = self._input.LT(-1)
            self.state = 425
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,27,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = MiniGoParser.Multiplicative_index_exprContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_multiplicative_index_expr)
                    self.state = 420
                    if not self.precpred(self._ctx, 2):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                    self.state = 421
                    _la = self._input.LA(1)
                    if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 1924145348608) != 0)):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 422
                    self.signed_index_expr() 
                self.state = 427
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,27,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class Signed_index_exprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def signed_tail(self):
            return self.getTypedRuleContext(MiniGoParser.Signed_tailContext,0)


        def primary_index_expr(self):
            return self.getTypedRuleContext(MiniGoParser.Primary_index_exprContext,0)


        def getRuleIndex(self):
            return MiniGoParser.RULE_signed_index_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSigned_index_expr" ):
                listener.enterSigned_index_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSigned_index_expr" ):
                listener.exitSigned_index_expr(self)




    def signed_index_expr(self):

        localctx = MiniGoParser.Signed_index_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_signed_index_expr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 428
            self.signed_tail()
            self.state = 429
            self.primary_index_expr()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Primary_index_exprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def secondary_index_expr(self):
            return self.getTypedRuleContext(MiniGoParser.Secondary_index_exprContext,0)


        def array_access(self):
            return self.getTypedRuleContext(MiniGoParser.Array_accessContext,0)


        def int_number(self):
            return self.getTypedRuleContext(MiniGoParser.Int_numberContext,0)


        def LPAREN(self):
            return self.getToken(MiniGoParser.LPAREN, 0)

        def index_expr(self):
            return self.getTypedRuleContext(MiniGoParser.Index_exprContext,0)


        def RPAREN(self):
            return self.getToken(MiniGoParser.RPAREN, 0)

        def array_literal(self):
            return self.getTypedRuleContext(MiniGoParser.Array_literalContext,0)


        def struct_literal(self):
            return self.getTypedRuleContext(MiniGoParser.Struct_literalContext,0)


        def struct_field_access(self):
            return self.getTypedRuleContext(MiniGoParser.Struct_field_accessContext,0)


        def struct_field_access_no_func(self):
            return self.getTypedRuleContext(MiniGoParser.Struct_field_access_no_funcContext,0)


        def getRuleIndex(self):
            return MiniGoParser.RULE_primary_index_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrimary_index_expr" ):
                listener.enterPrimary_index_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrimary_index_expr" ):
                listener.exitPrimary_index_expr(self)




    def primary_index_expr(self):

        localctx = MiniGoParser.Primary_index_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_primary_index_expr)
        try:
            self.state = 442
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,28,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 431
                self.secondary_index_expr()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 432
                self.array_access()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 433
                self.int_number()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 434
                self.match(MiniGoParser.LPAREN)
                self.state = 435
                self.index_expr()
                self.state = 436
                self.match(MiniGoParser.RPAREN)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 438
                self.array_literal()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 439
                self.struct_literal()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 440
                self.struct_field_access()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 441
                self.struct_field_access_no_func()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Secondary_index_exprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ID(self):
            return self.getToken(MiniGoParser.ID, 0)

        def STRING_LIT(self):
            return self.getToken(MiniGoParser.STRING_LIT, 0)

        def function_call(self):
            return self.getTypedRuleContext(MiniGoParser.Function_callContext,0)


        def getRuleIndex(self):
            return MiniGoParser.RULE_secondary_index_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSecondary_index_expr" ):
                listener.enterSecondary_index_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSecondary_index_expr" ):
                listener.exitSecondary_index_expr(self)




    def secondary_index_expr(self):

        localctx = MiniGoParser.Secondary_index_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_secondary_index_expr)
        try:
            self.state = 447
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,29,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 444
                self.match(MiniGoParser.ID)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 445
                self.match(MiniGoParser.STRING_LIT)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 446
                self.function_call()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Signed_tailContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SUB(self):
            return self.getToken(MiniGoParser.SUB, 0)

        def signed_tail(self):
            return self.getTypedRuleContext(MiniGoParser.Signed_tailContext,0)


        def NOT(self):
            return self.getToken(MiniGoParser.NOT, 0)

        def getRuleIndex(self):
            return MiniGoParser.RULE_signed_tail

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSigned_tail" ):
                listener.enterSigned_tail(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSigned_tail" ):
                listener.exitSigned_tail(self)




    def signed_tail(self):

        localctx = MiniGoParser.Signed_tailContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_signed_tail)
        try:
            self.state = 454
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 61, 65, 67, 68, 69, 70, 71, 73]:
                self.enterOuterAlt(localctx, 1)

                pass
            elif token in [37]:
                self.enterOuterAlt(localctx, 2)
                self.state = 450
                self.match(MiniGoParser.SUB)
                self.state = 451
                self.signed_tail()
                pass
            elif token in [49]:
                self.enterOuterAlt(localctx, 3)
                self.state = 452
                self.match(MiniGoParser.NOT)
                self.state = 453
                self.signed_tail()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Array_literalContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def array_literal_tail3(self):
            return self.getTypedRuleContext(MiniGoParser.Array_literal_tail3Context,0)


        def arr_init_list(self):
            return self.getTypedRuleContext(MiniGoParser.Arr_init_listContext,0)


        def primitiveType(self):
            return self.getTypedRuleContext(MiniGoParser.PrimitiveTypeContext,0)


        def compositeType(self):
            return self.getTypedRuleContext(MiniGoParser.CompositeTypeContext,0)


        def getRuleIndex(self):
            return MiniGoParser.RULE_array_literal

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArray_literal" ):
                listener.enterArray_literal(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArray_literal" ):
                listener.exitArray_literal(self)




    def array_literal(self):

        localctx = MiniGoParser.Array_literalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_array_literal)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 456
            self.array_literal_tail3()
            self.state = 459
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [9, 10, 11, 12]:
                self.state = 457
                self.primitiveType()
                pass
            elif token in [35]:
                self.state = 458
                self.compositeType()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 461
            self.arr_init_list()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Array_literal_tail3Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LBRACKET(self):
            return self.getToken(MiniGoParser.LBRACKET, 0)

        def index_expr(self):
            return self.getTypedRuleContext(MiniGoParser.Index_exprContext,0)


        def RBRACKET(self):
            return self.getToken(MiniGoParser.RBRACKET, 0)

        def array_literal_tail3(self):
            return self.getTypedRuleContext(MiniGoParser.Array_literal_tail3Context,0)


        def getRuleIndex(self):
            return MiniGoParser.RULE_array_literal_tail3

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArray_literal_tail3" ):
                listener.enterArray_literal_tail3(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArray_literal_tail3" ):
                listener.exitArray_literal_tail3(self)




    def array_literal_tail3(self):

        localctx = MiniGoParser.Array_literal_tail3Context(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_array_literal_tail3)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 463
            self.match(MiniGoParser.LBRACKET)
            self.state = 464
            self.index_expr()
            self.state = 465
            self.match(MiniGoParser.RBRACKET)
            self.state = 467
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==65:
                self.state = 466
                self.array_literal_tail3()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Struct_literalContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ID(self):
            return self.getToken(MiniGoParser.ID, 0)

        def LBRACE(self):
            return self.getToken(MiniGoParser.LBRACE, 0)

        def struct_literal_tail(self):
            return self.getTypedRuleContext(MiniGoParser.Struct_literal_tailContext,0)


        def RBRACE(self):
            return self.getToken(MiniGoParser.RBRACE, 0)

        def getRuleIndex(self):
            return MiniGoParser.RULE_struct_literal

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStruct_literal" ):
                listener.enterStruct_literal(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStruct_literal" ):
                listener.exitStruct_literal(self)




    def struct_literal(self):

        localctx = MiniGoParser.Struct_literalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_struct_literal)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 469
            self.match(MiniGoParser.ID)
            self.state = 470
            self.match(MiniGoParser.LBRACE)
            self.state = 471
            self.struct_literal_tail()
            self.state = 472
            self.match(MiniGoParser.RBRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Struct_literal_tailContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def field_init(self):
            return self.getTypedRuleContext(MiniGoParser.Field_initContext,0)


        def struct_literal_tail2(self):
            return self.getTypedRuleContext(MiniGoParser.Struct_literal_tail2Context,0)


        def getRuleIndex(self):
            return MiniGoParser.RULE_struct_literal_tail

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStruct_literal_tail" ):
                listener.enterStruct_literal_tail(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStruct_literal_tail" ):
                listener.exitStruct_literal_tail(self)




    def struct_literal_tail(self):

        localctx = MiniGoParser.Struct_literal_tailContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_struct_literal_tail)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 477
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==35:
                self.state = 474
                self.field_init()
                self.state = 475
                self.struct_literal_tail2()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Struct_literal_tail2Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COMMA(self):
            return self.getToken(MiniGoParser.COMMA, 0)

        def field_init(self):
            return self.getTypedRuleContext(MiniGoParser.Field_initContext,0)


        def struct_literal_tail2(self):
            return self.getTypedRuleContext(MiniGoParser.Struct_literal_tail2Context,0)


        def getRuleIndex(self):
            return MiniGoParser.RULE_struct_literal_tail2

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStruct_literal_tail2" ):
                listener.enterStruct_literal_tail2(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStruct_literal_tail2" ):
                listener.exitStruct_literal_tail2(self)




    def struct_literal_tail2(self):

        localctx = MiniGoParser.Struct_literal_tail2Context(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_struct_literal_tail2)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 483
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==58:
                self.state = 479
                self.match(MiniGoParser.COMMA)
                self.state = 480
                self.field_init()
                self.state = 481
                self.struct_literal_tail2()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Field_initContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ID(self):
            return self.getToken(MiniGoParser.ID, 0)

        def COLON(self):
            return self.getToken(MiniGoParser.COLON, 0)

        def expr(self):
            return self.getTypedRuleContext(MiniGoParser.ExprContext,0)


        def getRuleIndex(self):
            return MiniGoParser.RULE_field_init

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterField_init" ):
                listener.enterField_init(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitField_init" ):
                listener.exitField_init(self)




    def field_init(self):

        localctx = MiniGoParser.Field_initContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_field_init)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 485
            self.match(MiniGoParser.ID)
            self.state = 486
            self.match(MiniGoParser.COLON)
            self.state = 487
            self.expr()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Struct_field_accessContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def struct_field_access_head(self):
            return self.getTypedRuleContext(MiniGoParser.Struct_field_access_headContext,0)


        def DOT(self):
            return self.getToken(MiniGoParser.DOT, 0)

        def ID(self):
            return self.getToken(MiniGoParser.ID, 0)

        def function_call(self):
            return self.getTypedRuleContext(MiniGoParser.Function_callContext,0)


        def array_access(self):
            return self.getTypedRuleContext(MiniGoParser.Array_accessContext,0)


        def getRuleIndex(self):
            return MiniGoParser.RULE_struct_field_access

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStruct_field_access" ):
                listener.enterStruct_field_access(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStruct_field_access" ):
                listener.exitStruct_field_access(self)




    def struct_field_access(self):

        localctx = MiniGoParser.Struct_field_accessContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_struct_field_access)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 489
            self.struct_field_access_head(0)
            self.state = 490
            self.match(MiniGoParser.DOT)
            self.state = 494
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,35,self._ctx)
            if la_ == 1:
                self.state = 491
                self.match(MiniGoParser.ID)
                pass

            elif la_ == 2:
                self.state = 492
                self.function_call()
                pass

            elif la_ == 3:
                self.state = 493
                self.array_access()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Struct_field_access_headContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ID(self):
            return self.getToken(MiniGoParser.ID, 0)

        def function_call(self):
            return self.getTypedRuleContext(MiniGoParser.Function_callContext,0)


        def array_access(self):
            return self.getTypedRuleContext(MiniGoParser.Array_accessContext,0)


        def struct_field_access_head(self):
            return self.getTypedRuleContext(MiniGoParser.Struct_field_access_headContext,0)


        def DOT(self):
            return self.getToken(MiniGoParser.DOT, 0)

        def getRuleIndex(self):
            return MiniGoParser.RULE_struct_field_access_head

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStruct_field_access_head" ):
                listener.enterStruct_field_access_head(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStruct_field_access_head" ):
                listener.exitStruct_field_access_head(self)



    def struct_field_access_head(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = MiniGoParser.Struct_field_access_headContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 84
        self.enterRecursionRule(localctx, 84, self.RULE_struct_field_access_head, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 500
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,36,self._ctx)
            if la_ == 1:
                self.state = 497
                self.match(MiniGoParser.ID)
                pass

            elif la_ == 2:
                self.state = 498
                self.function_call()
                pass

            elif la_ == 3:
                self.state = 499
                self.array_access()
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 511
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,38,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = MiniGoParser.Struct_field_access_headContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_struct_field_access_head)
                    self.state = 502
                    if not self.precpred(self._ctx, 4):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 4)")
                    self.state = 503
                    self.match(MiniGoParser.DOT)
                    self.state = 507
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,37,self._ctx)
                    if la_ == 1:
                        self.state = 504
                        self.match(MiniGoParser.ID)
                        pass

                    elif la_ == 2:
                        self.state = 505
                        self.function_call()
                        pass

                    elif la_ == 3:
                        self.state = 506
                        self.array_access()
                        pass

             
                self.state = 513
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,38,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class Struct_field_access_no_funcContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def struct_field_access_no_func_head(self):
            return self.getTypedRuleContext(MiniGoParser.Struct_field_access_no_func_headContext,0)


        def DOT(self):
            return self.getToken(MiniGoParser.DOT, 0)

        def ID(self):
            return self.getToken(MiniGoParser.ID, 0)

        def array_access(self):
            return self.getTypedRuleContext(MiniGoParser.Array_accessContext,0)


        def getRuleIndex(self):
            return MiniGoParser.RULE_struct_field_access_no_func

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStruct_field_access_no_func" ):
                listener.enterStruct_field_access_no_func(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStruct_field_access_no_func" ):
                listener.exitStruct_field_access_no_func(self)




    def struct_field_access_no_func(self):

        localctx = MiniGoParser.Struct_field_access_no_funcContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_struct_field_access_no_func)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 514
            self.struct_field_access_no_func_head(0)
            self.state = 515
            self.match(MiniGoParser.DOT)
            self.state = 518
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,39,self._ctx)
            if la_ == 1:
                self.state = 516
                self.match(MiniGoParser.ID)
                pass

            elif la_ == 2:
                self.state = 517
                self.array_access()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Struct_field_access_no_func_headContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ID(self):
            return self.getToken(MiniGoParser.ID, 0)

        def array_access(self):
            return self.getTypedRuleContext(MiniGoParser.Array_accessContext,0)


        def struct_field_access_no_func_head(self):
            return self.getTypedRuleContext(MiniGoParser.Struct_field_access_no_func_headContext,0)


        def DOT(self):
            return self.getToken(MiniGoParser.DOT, 0)

        def getRuleIndex(self):
            return MiniGoParser.RULE_struct_field_access_no_func_head

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStruct_field_access_no_func_head" ):
                listener.enterStruct_field_access_no_func_head(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStruct_field_access_no_func_head" ):
                listener.exitStruct_field_access_no_func_head(self)



    def struct_field_access_no_func_head(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = MiniGoParser.Struct_field_access_no_func_headContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 88
        self.enterRecursionRule(localctx, 88, self.RULE_struct_field_access_no_func_head, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 523
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,40,self._ctx)
            if la_ == 1:
                self.state = 521
                self.match(MiniGoParser.ID)
                pass

            elif la_ == 2:
                self.state = 522
                self.array_access()
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 533
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,42,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = MiniGoParser.Struct_field_access_no_func_headContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_struct_field_access_no_func_head)
                    self.state = 525
                    if not self.precpred(self._ctx, 3):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 3)")
                    self.state = 526
                    self.match(MiniGoParser.DOT)
                    self.state = 529
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,41,self._ctx)
                    if la_ == 1:
                        self.state = 527
                        self.match(MiniGoParser.ID)
                        pass

                    elif la_ == 2:
                        self.state = 528
                        self.array_access()
                        pass

             
                self.state = 535
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,42,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class Stmt_in_blockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def eos(self):
            return self.getTypedRuleContext(MiniGoParser.EosContext,0)


        def array_access(self):
            return self.getTypedRuleContext(MiniGoParser.Array_accessContext,0)


        def struct_field_access(self):
            return self.getTypedRuleContext(MiniGoParser.Struct_field_accessContext,0)


        def struct_field_access_no_func(self):
            return self.getTypedRuleContext(MiniGoParser.Struct_field_access_no_funcContext,0)


        def const_decl(self):
            return self.getTypedRuleContext(MiniGoParser.Const_declContext,0)


        def var_decl(self):
            return self.getTypedRuleContext(MiniGoParser.Var_declContext,0)


        def array_decl(self):
            return self.getTypedRuleContext(MiniGoParser.Array_declContext,0)


        def array_decl_with_init(self):
            return self.getTypedRuleContext(MiniGoParser.Array_decl_with_initContext,0)


        def var_decl_no_init(self):
            return self.getTypedRuleContext(MiniGoParser.Var_decl_no_initContext,0)


        def break_stmt(self):
            return self.getTypedRuleContext(MiniGoParser.Break_stmtContext,0)


        def continue_stmt(self):
            return self.getTypedRuleContext(MiniGoParser.Continue_stmtContext,0)


        def if_stmt(self):
            return self.getTypedRuleContext(MiniGoParser.If_stmtContext,0)


        def for_stmt(self):
            return self.getTypedRuleContext(MiniGoParser.For_stmtContext,0)


        def assignment_stmt(self):
            return self.getTypedRuleContext(MiniGoParser.Assignment_stmtContext,0)


        def function_call(self):
            return self.getTypedRuleContext(MiniGoParser.Function_callContext,0)


        def return_stmt(self):
            return self.getTypedRuleContext(MiniGoParser.Return_stmtContext,0)


        def getRuleIndex(self):
            return MiniGoParser.RULE_stmt_in_block

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStmt_in_block" ):
                listener.enterStmt_in_block(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStmt_in_block" ):
                listener.exitStmt_in_block(self)




    def stmt_in_block(self):

        localctx = MiniGoParser.Stmt_in_blockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_stmt_in_block)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 551
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,43,self._ctx)
            if la_ == 1:
                self.state = 536
                self.array_access()
                pass

            elif la_ == 2:
                self.state = 537
                self.struct_field_access()
                pass

            elif la_ == 3:
                self.state = 538
                self.struct_field_access_no_func()
                pass

            elif la_ == 4:
                self.state = 539
                self.const_decl()
                pass

            elif la_ == 5:
                self.state = 540
                self.var_decl()
                pass

            elif la_ == 6:
                self.state = 541
                self.array_decl()
                pass

            elif la_ == 7:
                self.state = 542
                self.array_decl_with_init()
                pass

            elif la_ == 8:
                self.state = 543
                self.var_decl_no_init()
                pass

            elif la_ == 9:
                self.state = 544
                self.break_stmt()
                pass

            elif la_ == 10:
                self.state = 545
                self.continue_stmt()
                pass

            elif la_ == 11:
                self.state = 546
                self.if_stmt()
                pass

            elif la_ == 12:
                self.state = 547
                self.for_stmt()
                pass

            elif la_ == 13:
                self.state = 548
                self.assignment_stmt()
                pass

            elif la_ == 14:
                self.state = 549
                self.function_call()
                pass

            elif la_ == 15:
                self.state = 550
                self.return_stmt()
                pass


            self.state = 553
            self.eos()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Stmt_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def stmt_in_block(self):
            return self.getTypedRuleContext(MiniGoParser.Stmt_in_blockContext,0)


        def stmt_list(self):
            return self.getTypedRuleContext(MiniGoParser.Stmt_listContext,0)


        def NEWLINE(self):
            return self.getToken(MiniGoParser.NEWLINE, 0)

        def getRuleIndex(self):
            return MiniGoParser.RULE_stmt_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStmt_list" ):
                listener.enterStmt_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStmt_list" ):
                listener.exitStmt_list(self)



    def stmt_list(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = MiniGoParser.Stmt_listContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 92
        self.enterRecursionRule(localctx, 92, self.RULE_stmt_list, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 556
            self.stmt_in_block()
            self._ctx.stop = self._input.LT(-1)
            self.state = 564
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,45,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 562
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,44,self._ctx)
                    if la_ == 1:
                        localctx = MiniGoParser.Stmt_listContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_stmt_list)
                        self.state = 558
                        if not self.precpred(self._ctx, 2):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                        self.state = 559
                        self.stmt_in_block()
                        pass

                    elif la_ == 2:
                        localctx = MiniGoParser.Stmt_listContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_stmt_list)
                        self.state = 560
                        if not self.precpred(self._ctx, 1):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                        self.state = 561
                        self.match(MiniGoParser.NEWLINE)
                        pass

             
                self.state = 566
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,45,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class Assignment_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def lhs(self):
            return self.getTypedRuleContext(MiniGoParser.LhsContext,0)


        def assignment_operator(self):
            return self.getTypedRuleContext(MiniGoParser.Assignment_operatorContext,0)


        def expr(self):
            return self.getTypedRuleContext(MiniGoParser.ExprContext,0)


        def getRuleIndex(self):
            return MiniGoParser.RULE_assignment_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssignment_stmt" ):
                listener.enterAssignment_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssignment_stmt" ):
                listener.exitAssignment_stmt(self)




    def assignment_stmt(self):

        localctx = MiniGoParser.Assignment_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_assignment_stmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 567
            self.lhs()
            self.state = 568
            self.assignment_operator()
            self.state = 569
            self.expr()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Assignment_stmt_scalarContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ID(self):
            return self.getToken(MiniGoParser.ID, 0)

        def assignment_operator(self):
            return self.getTypedRuleContext(MiniGoParser.Assignment_operatorContext,0)


        def expr(self):
            return self.getTypedRuleContext(MiniGoParser.ExprContext,0)


        def getRuleIndex(self):
            return MiniGoParser.RULE_assignment_stmt_scalar

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssignment_stmt_scalar" ):
                listener.enterAssignment_stmt_scalar(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssignment_stmt_scalar" ):
                listener.exitAssignment_stmt_scalar(self)




    def assignment_stmt_scalar(self):

        localctx = MiniGoParser.Assignment_stmt_scalarContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_assignment_stmt_scalar)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 571
            self.match(MiniGoParser.ID)
            self.state = 572
            self.assignment_operator()
            self.state = 573
            self.expr()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Assignment_operatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SHORT_ASSIGN(self):
            return self.getToken(MiniGoParser.SHORT_ASSIGN, 0)

        def ADD_ASSIGN(self):
            return self.getToken(MiniGoParser.ADD_ASSIGN, 0)

        def SUB_ASSIGN(self):
            return self.getToken(MiniGoParser.SUB_ASSIGN, 0)

        def MUL_ASSIGN(self):
            return self.getToken(MiniGoParser.MUL_ASSIGN, 0)

        def DIV_ASSIGN(self):
            return self.getToken(MiniGoParser.DIV_ASSIGN, 0)

        def MOD_ASSIGN(self):
            return self.getToken(MiniGoParser.MOD_ASSIGN, 0)

        def getRuleIndex(self):
            return MiniGoParser.RULE_assignment_operator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssignment_operator" ):
                listener.enterAssignment_operator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssignment_operator" ):
                listener.exitAssignment_operator(self)




    def assignment_operator(self):

        localctx = MiniGoParser.Assignment_operatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_assignment_operator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 575
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 141863388262170624) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Assignment_exprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def lhs(self):
            return self.getTypedRuleContext(MiniGoParser.LhsContext,0)


        def ASSIGN(self):
            return self.getToken(MiniGoParser.ASSIGN, 0)

        def SHORT_ASSIGN(self):
            return self.getToken(MiniGoParser.SHORT_ASSIGN, 0)

        def expr(self):
            return self.getTypedRuleContext(MiniGoParser.ExprContext,0)


        def struct_literal(self):
            return self.getTypedRuleContext(MiniGoParser.Struct_literalContext,0)


        def getRuleIndex(self):
            return MiniGoParser.RULE_assignment_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssignment_expr" ):
                listener.enterAssignment_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssignment_expr" ):
                listener.exitAssignment_expr(self)




    def assignment_expr(self):

        localctx = MiniGoParser.Assignment_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_assignment_expr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 577
            self.lhs()
            self.state = 578
            _la = self._input.LA(1)
            if not(_la==50 or _la==51):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 581
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,46,self._ctx)
            if la_ == 1:
                self.state = 579
                self.expr()
                pass

            elif la_ == 2:
                self.state = 580
                self.struct_literal()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LhsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ID(self):
            return self.getToken(MiniGoParser.ID, 0)

        def array_access(self):
            return self.getTypedRuleContext(MiniGoParser.Array_accessContext,0)


        def struct_field_access_no_func(self):
            return self.getTypedRuleContext(MiniGoParser.Struct_field_access_no_funcContext,0)


        def getRuleIndex(self):
            return MiniGoParser.RULE_lhs

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLhs" ):
                listener.enterLhs(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLhs" ):
                listener.exitLhs(self)




    def lhs(self):

        localctx = MiniGoParser.LhsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_lhs)
        try:
            self.state = 586
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,47,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 583
                self.match(MiniGoParser.ID)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 584
                self.array_access()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 585
                self.struct_field_access_no_func()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class If_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IF(self):
            return self.getToken(MiniGoParser.IF, 0)

        def LPAREN(self):
            return self.getToken(MiniGoParser.LPAREN, 0)

        def expr(self):
            return self.getTypedRuleContext(MiniGoParser.ExprContext,0)


        def RPAREN(self):
            return self.getToken(MiniGoParser.RPAREN, 0)

        def block(self):
            return self.getTypedRuleContext(MiniGoParser.BlockContext,0)


        def if_stmt_tail(self):
            return self.getTypedRuleContext(MiniGoParser.If_stmt_tailContext,0)


        def getRuleIndex(self):
            return MiniGoParser.RULE_if_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIf_stmt" ):
                listener.enterIf_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIf_stmt" ):
                listener.exitIf_stmt(self)




    def if_stmt(self):

        localctx = MiniGoParser.If_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_if_stmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 588
            self.match(MiniGoParser.IF)
            self.state = 589
            self.match(MiniGoParser.LPAREN)
            self.state = 590
            self.expr()
            self.state = 591
            self.match(MiniGoParser.RPAREN)
            self.state = 592
            self.block()
            self.state = 593
            self.if_stmt_tail()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class If_stmt_tailContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ELSE(self):
            return self.getToken(MiniGoParser.ELSE, 0)

        def IF(self):
            return self.getToken(MiniGoParser.IF, 0)

        def LPAREN(self):
            return self.getToken(MiniGoParser.LPAREN, 0)

        def expr(self):
            return self.getTypedRuleContext(MiniGoParser.ExprContext,0)


        def RPAREN(self):
            return self.getToken(MiniGoParser.RPAREN, 0)

        def block(self):
            return self.getTypedRuleContext(MiniGoParser.BlockContext,0)


        def if_stmt_tail(self):
            return self.getTypedRuleContext(MiniGoParser.If_stmt_tailContext,0)


        def getRuleIndex(self):
            return MiniGoParser.RULE_if_stmt_tail

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIf_stmt_tail" ):
                listener.enterIf_stmt_tail(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIf_stmt_tail" ):
                listener.exitIf_stmt_tail(self)




    def if_stmt_tail(self):

        localctx = MiniGoParser.If_stmt_tailContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_if_stmt_tail)
        try:
            self.state = 606
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,48,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 595
                self.match(MiniGoParser.ELSE)
                self.state = 596
                self.match(MiniGoParser.IF)
                self.state = 597
                self.match(MiniGoParser.LPAREN)
                self.state = 598
                self.expr()
                self.state = 599
                self.match(MiniGoParser.RPAREN)
                self.state = 600
                self.block()
                self.state = 601
                self.if_stmt_tail()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 603
                self.match(MiniGoParser.ELSE)
                self.state = 604
                self.block()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class For_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FOR(self):
            return self.getToken(MiniGoParser.FOR, 0)

        def for_init(self):
            return self.getTypedRuleContext(MiniGoParser.For_initContext,0)


        def SEMICOLON(self, i:int=None):
            if i is None:
                return self.getTokens(MiniGoParser.SEMICOLON)
            else:
                return self.getToken(MiniGoParser.SEMICOLON, i)

        def expr(self):
            return self.getTypedRuleContext(MiniGoParser.ExprContext,0)


        def for_update(self):
            return self.getTypedRuleContext(MiniGoParser.For_updateContext,0)


        def block(self):
            return self.getTypedRuleContext(MiniGoParser.BlockContext,0)


        def ID(self, i:int=None):
            if i is None:
                return self.getTokens(MiniGoParser.ID)
            else:
                return self.getToken(MiniGoParser.ID, i)

        def COMMA(self):
            return self.getToken(MiniGoParser.COMMA, 0)

        def SHORT_ASSIGN(self):
            return self.getToken(MiniGoParser.SHORT_ASSIGN, 0)

        def RANGE(self):
            return self.getToken(MiniGoParser.RANGE, 0)

        def atom(self):
            return self.getTypedRuleContext(MiniGoParser.AtomContext,0)


        def array_access(self):
            return self.getTypedRuleContext(MiniGoParser.Array_accessContext,0)


        def getRuleIndex(self):
            return MiniGoParser.RULE_for_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFor_stmt" ):
                listener.enterFor_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFor_stmt" ):
                listener.exitFor_stmt(self)




    def for_stmt(self):

        localctx = MiniGoParser.For_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_for_stmt)
        try:
            self.state = 632
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,50,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 608
                self.match(MiniGoParser.FOR)
                self.state = 609
                self.for_init()
                self.state = 610
                self.match(MiniGoParser.SEMICOLON)
                self.state = 611
                self.expr()
                self.state = 612
                self.match(MiniGoParser.SEMICOLON)
                self.state = 613
                self.for_update()
                self.state = 614
                self.block()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 616
                self.match(MiniGoParser.FOR)
                self.state = 617
                self.match(MiniGoParser.ID)
                self.state = 618
                self.match(MiniGoParser.COMMA)
                self.state = 619
                self.match(MiniGoParser.ID)
                self.state = 620
                self.match(MiniGoParser.SHORT_ASSIGN)
                self.state = 621
                self.match(MiniGoParser.RANGE)
                self.state = 624
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,49,self._ctx)
                if la_ == 1:
                    self.state = 622
                    self.atom()
                    pass

                elif la_ == 2:
                    self.state = 623
                    self.array_access()
                    pass


                self.state = 626
                self.block()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 628
                self.match(MiniGoParser.FOR)
                self.state = 629
                self.expr()
                self.state = 630
                self.block()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class For_initContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def var_decl(self):
            return self.getTypedRuleContext(MiniGoParser.Var_declContext,0)


        def assignment_stmt_scalar(self):
            return self.getTypedRuleContext(MiniGoParser.Assignment_stmt_scalarContext,0)


        def array_decl_with_init(self):
            return self.getTypedRuleContext(MiniGoParser.Array_decl_with_initContext,0)


        def getRuleIndex(self):
            return MiniGoParser.RULE_for_init

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFor_init" ):
                listener.enterFor_init(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFor_init" ):
                listener.exitFor_init(self)




    def for_init(self):

        localctx = MiniGoParser.For_initContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_for_init)
        try:
            self.state = 637
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,51,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 634
                self.var_decl()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 635
                self.assignment_stmt_scalar()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 636
                self.array_decl_with_init()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class For_updateContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def assignment_stmt_scalar(self):
            return self.getTypedRuleContext(MiniGoParser.Assignment_stmt_scalarContext,0)


        def getRuleIndex(self):
            return MiniGoParser.RULE_for_update

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFor_update" ):
                listener.enterFor_update(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFor_update" ):
                listener.exitFor_update(self)




    def for_update(self):

        localctx = MiniGoParser.For_updateContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_for_update)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 639
            self.assignment_stmt_scalar()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class For_conditionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expr(self):
            return self.getTypedRuleContext(MiniGoParser.ExprContext,0)


        def getRuleIndex(self):
            return MiniGoParser.RULE_for_condition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFor_condition" ):
                listener.enterFor_condition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFor_condition" ):
                listener.exitFor_condition(self)




    def for_condition(self):

        localctx = MiniGoParser.For_conditionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_for_condition)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 641
            self.expr()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Return_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RETURN(self):
            return self.getToken(MiniGoParser.RETURN, 0)

        def expr(self):
            return self.getTypedRuleContext(MiniGoParser.ExprContext,0)


        def getRuleIndex(self):
            return MiniGoParser.RULE_return_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReturn_stmt" ):
                listener.enterReturn_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReturn_stmt" ):
                listener.exitReturn_stmt(self)




    def return_stmt(self):

        localctx = MiniGoParser.Return_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_return_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 643
            self.match(MiniGoParser.RETURN)
            self.state = 645
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 18)) & ~0x3f) == 0 and ((1 << (_la - 18)) & 53629781304606719) != 0):
                self.state = 644
                self.expr()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Continue_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CONTINUE(self):
            return self.getToken(MiniGoParser.CONTINUE, 0)

        def getRuleIndex(self):
            return MiniGoParser.RULE_continue_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterContinue_stmt" ):
                listener.enterContinue_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitContinue_stmt" ):
                listener.exitContinue_stmt(self)




    def continue_stmt(self):

        localctx = MiniGoParser.Continue_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_continue_stmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 647
            self.match(MiniGoParser.CONTINUE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Break_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BREAK(self):
            return self.getToken(MiniGoParser.BREAK, 0)

        def getRuleIndex(self):
            return MiniGoParser.RULE_break_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBreak_stmt" ):
                listener.enterBreak_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBreak_stmt" ):
                listener.exitBreak_stmt(self)




    def break_stmt(self):

        localctx = MiniGoParser.Break_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_break_stmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 649
            self.match(MiniGoParser.BREAK)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Var_declContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def VAR(self):
            return self.getToken(MiniGoParser.VAR, 0)

        def ID(self):
            return self.getToken(MiniGoParser.ID, 0)

        def ASSIGN(self):
            return self.getToken(MiniGoParser.ASSIGN, 0)

        def expr(self):
            return self.getTypedRuleContext(MiniGoParser.ExprContext,0)


        def primitiveType(self):
            return self.getTypedRuleContext(MiniGoParser.PrimitiveTypeContext,0)


        def compositeType(self):
            return self.getTypedRuleContext(MiniGoParser.CompositeTypeContext,0)


        def getRuleIndex(self):
            return MiniGoParser.RULE_var_decl

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVar_decl" ):
                listener.enterVar_decl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVar_decl" ):
                listener.exitVar_decl(self)




    def var_decl(self):

        localctx = MiniGoParser.Var_declContext(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_var_decl)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 651
            self.match(MiniGoParser.VAR)
            self.state = 652
            self.match(MiniGoParser.ID)
            self.state = 655
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [9, 10, 11, 12]:
                self.state = 653
                self.primitiveType()
                pass
            elif token in [35]:
                self.state = 654
                self.compositeType()
                pass
            elif token in [50]:
                pass
            else:
                pass
            self.state = 657
            self.match(MiniGoParser.ASSIGN)
            self.state = 658
            self.expr()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Var_decl_no_initContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def VAR(self):
            return self.getToken(MiniGoParser.VAR, 0)

        def ID(self):
            return self.getToken(MiniGoParser.ID, 0)

        def primitiveType(self):
            return self.getTypedRuleContext(MiniGoParser.PrimitiveTypeContext,0)


        def compositeType(self):
            return self.getTypedRuleContext(MiniGoParser.CompositeTypeContext,0)


        def getRuleIndex(self):
            return MiniGoParser.RULE_var_decl_no_init

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVar_decl_no_init" ):
                listener.enterVar_decl_no_init(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVar_decl_no_init" ):
                listener.exitVar_decl_no_init(self)




    def var_decl_no_init(self):

        localctx = MiniGoParser.Var_decl_no_initContext(self, self._ctx, self.state)
        self.enterRule(localctx, 124, self.RULE_var_decl_no_init)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 660
            self.match(MiniGoParser.VAR)
            self.state = 661
            self.match(MiniGoParser.ID)
            self.state = 664
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [9, 10, 11, 12]:
                self.state = 662
                self.primitiveType()
                pass
            elif token in [35]:
                self.state = 663
                self.compositeType()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Const_declContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CONST(self):
            return self.getToken(MiniGoParser.CONST, 0)

        def ID(self):
            return self.getToken(MiniGoParser.ID, 0)

        def ASSIGN(self):
            return self.getToken(MiniGoParser.ASSIGN, 0)

        def expr(self):
            return self.getTypedRuleContext(MiniGoParser.ExprContext,0)


        def getRuleIndex(self):
            return MiniGoParser.RULE_const_decl

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConst_decl" ):
                listener.enterConst_decl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConst_decl" ):
                listener.exitConst_decl(self)




    def const_decl(self):

        localctx = MiniGoParser.Const_declContext(self, self._ctx, self.state)
        self.enterRule(localctx, 126, self.RULE_const_decl)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 666
            self.match(MiniGoParser.CONST)
            self.state = 667
            self.match(MiniGoParser.ID)
            self.state = 668
            self.match(MiniGoParser.ASSIGN)
            self.state = 669
            self.expr()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def primitiveType(self):
            return self.getTypedRuleContext(MiniGoParser.PrimitiveTypeContext,0)


        def compositeType(self):
            return self.getTypedRuleContext(MiniGoParser.CompositeTypeContext,0)


        def arrayType(self):
            return self.getTypedRuleContext(MiniGoParser.ArrayTypeContext,0)


        def getRuleIndex(self):
            return MiniGoParser.RULE_types

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypes" ):
                listener.enterTypes(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypes" ):
                listener.exitTypes(self)




    def types(self):

        localctx = MiniGoParser.TypesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 128, self.RULE_types)
        try:
            self.state = 674
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [9, 10, 11, 12]:
                self.enterOuterAlt(localctx, 1)
                self.state = 671
                self.primitiveType()
                pass
            elif token in [35]:
                self.enterOuterAlt(localctx, 2)
                self.state = 672
                self.compositeType()
                pass
            elif token in [65]:
                self.enterOuterAlt(localctx, 3)
                self.state = 673
                self.arrayType()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PrimitiveTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INT(self):
            return self.getToken(MiniGoParser.INT, 0)

        def FLOAT(self):
            return self.getToken(MiniGoParser.FLOAT, 0)

        def STRING(self):
            return self.getToken(MiniGoParser.STRING, 0)

        def BOOLEAN(self):
            return self.getToken(MiniGoParser.BOOLEAN, 0)

        def getRuleIndex(self):
            return MiniGoParser.RULE_primitiveType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrimitiveType" ):
                listener.enterPrimitiveType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrimitiveType" ):
                listener.exitPrimitiveType(self)




    def primitiveType(self):

        localctx = MiniGoParser.PrimitiveTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 130, self.RULE_primitiveType)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 676
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 7680) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArrayTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def dimensions(self):
            return self.getTypedRuleContext(MiniGoParser.DimensionsContext,0)


        def primitiveType(self):
            return self.getTypedRuleContext(MiniGoParser.PrimitiveTypeContext,0)


        def compositeType(self):
            return self.getTypedRuleContext(MiniGoParser.CompositeTypeContext,0)


        def getRuleIndex(self):
            return MiniGoParser.RULE_arrayType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArrayType" ):
                listener.enterArrayType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArrayType" ):
                listener.exitArrayType(self)




    def arrayType(self):

        localctx = MiniGoParser.ArrayTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 132, self.RULE_arrayType)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 678
            self.dimensions()
            self.state = 681
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [9, 10, 11, 12]:
                self.state = 679
                self.primitiveType()
                pass
            elif token in [35]:
                self.state = 680
                self.compositeType()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CompositeTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ID(self):
            return self.getToken(MiniGoParser.ID, 0)

        def getRuleIndex(self):
            return MiniGoParser.RULE_compositeType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCompositeType" ):
                listener.enterCompositeType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCompositeType" ):
                listener.exitCompositeType(self)




    def compositeType(self):

        localctx = MiniGoParser.CompositeTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 134, self.RULE_compositeType)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 683
            self.match(MiniGoParser.ID)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Array_decl_with_initContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def VAR(self):
            return self.getToken(MiniGoParser.VAR, 0)

        def ID(self):
            return self.getToken(MiniGoParser.ID, 0)

        def arrayType(self):
            return self.getTypedRuleContext(MiniGoParser.ArrayTypeContext,0)


        def ASSIGN(self):
            return self.getToken(MiniGoParser.ASSIGN, 0)

        def array_init(self):
            return self.getTypedRuleContext(MiniGoParser.Array_initContext,0)


        def getRuleIndex(self):
            return MiniGoParser.RULE_array_decl_with_init

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArray_decl_with_init" ):
                listener.enterArray_decl_with_init(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArray_decl_with_init" ):
                listener.exitArray_decl_with_init(self)




    def array_decl_with_init(self):

        localctx = MiniGoParser.Array_decl_with_initContext(self, self._ctx, self.state)
        self.enterRule(localctx, 136, self.RULE_array_decl_with_init)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 685
            self.match(MiniGoParser.VAR)
            self.state = 686
            self.match(MiniGoParser.ID)
            self.state = 687
            self.arrayType()
            self.state = 688
            self.match(MiniGoParser.ASSIGN)
            self.state = 689
            self.array_init()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Array_declContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def VAR(self):
            return self.getToken(MiniGoParser.VAR, 0)

        def ID(self):
            return self.getToken(MiniGoParser.ID, 0)

        def arrayType(self):
            return self.getTypedRuleContext(MiniGoParser.ArrayTypeContext,0)


        def getRuleIndex(self):
            return MiniGoParser.RULE_array_decl

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArray_decl" ):
                listener.enterArray_decl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArray_decl" ):
                listener.exitArray_decl(self)




    def array_decl(self):

        localctx = MiniGoParser.Array_declContext(self, self._ctx, self.state)
        self.enterRule(localctx, 138, self.RULE_array_decl)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 691
            self.match(MiniGoParser.VAR)
            self.state = 692
            self.match(MiniGoParser.ID)
            self.state = 693
            self.arrayType()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DimensionsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LBRACKET(self):
            return self.getToken(MiniGoParser.LBRACKET, 0)

        def RBRACKET(self):
            return self.getToken(MiniGoParser.RBRACKET, 0)

        def int_number(self):
            return self.getTypedRuleContext(MiniGoParser.Int_numberContext,0)


        def ID(self):
            return self.getToken(MiniGoParser.ID, 0)

        def dimensions(self):
            return self.getTypedRuleContext(MiniGoParser.DimensionsContext,0)


        def getRuleIndex(self):
            return MiniGoParser.RULE_dimensions

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDimensions" ):
                listener.enterDimensions(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDimensions" ):
                listener.exitDimensions(self)




    def dimensions(self):

        localctx = MiniGoParser.DimensionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 140, self.RULE_dimensions)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 695
            self.match(MiniGoParser.LBRACKET)
            self.state = 698
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [67, 68, 69, 70]:
                self.state = 696
                self.int_number()
                pass
            elif token in [35]:
                self.state = 697
                self.match(MiniGoParser.ID)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 700
            self.match(MiniGoParser.RBRACKET)
            self.state = 702
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==65:
                self.state = 701
                self.dimensions()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Array_initContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def array_literal(self):
            return self.getTypedRuleContext(MiniGoParser.Array_literalContext,0)


        def expr(self):
            return self.getTypedRuleContext(MiniGoParser.ExprContext,0)


        def getRuleIndex(self):
            return MiniGoParser.RULE_array_init

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArray_init" ):
                listener.enterArray_init(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArray_init" ):
                listener.exitArray_init(self)




    def array_init(self):

        localctx = MiniGoParser.Array_initContext(self, self._ctx, self.state)
        self.enterRule(localctx, 142, self.RULE_array_init)
        try:
            self.state = 706
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,59,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 704
                self.array_literal()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 705
                self.expr()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Struct_declContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TYPE(self):
            return self.getToken(MiniGoParser.TYPE, 0)

        def ID(self):
            return self.getToken(MiniGoParser.ID, 0)

        def STRUCT(self):
            return self.getToken(MiniGoParser.STRUCT, 0)

        def LBRACE(self):
            return self.getToken(MiniGoParser.LBRACE, 0)

        def field_decl_list(self):
            return self.getTypedRuleContext(MiniGoParser.Field_decl_listContext,0)


        def RBRACE(self):
            return self.getToken(MiniGoParser.RBRACE, 0)

        def newlines(self):
            return self.getTypedRuleContext(MiniGoParser.NewlinesContext,0)


        def getRuleIndex(self):
            return MiniGoParser.RULE_struct_decl

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStruct_decl" ):
                listener.enterStruct_decl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStruct_decl" ):
                listener.exitStruct_decl(self)




    def struct_decl(self):

        localctx = MiniGoParser.Struct_declContext(self, self._ctx, self.state)
        self.enterRule(localctx, 144, self.RULE_struct_decl)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 708
            self.match(MiniGoParser.TYPE)
            self.state = 709
            self.match(MiniGoParser.ID)
            self.state = 710
            self.match(MiniGoParser.STRUCT)
            self.state = 711
            self.match(MiniGoParser.LBRACE)
            self.state = 713
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,60,self._ctx)
            if la_ == 1:
                self.state = 712
                self.newlines(0)


            self.state = 715
            self.field_decl_list()
            self.state = 716
            self.match(MiniGoParser.RBRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Field_decl_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def field_decl(self):
            return self.getTypedRuleContext(MiniGoParser.Field_declContext,0)


        def eos(self):
            return self.getTypedRuleContext(MiniGoParser.EosContext,0)


        def NEWLINE(self):
            return self.getToken(MiniGoParser.NEWLINE, 0)

        def field_decl_list(self):
            return self.getTypedRuleContext(MiniGoParser.Field_decl_listContext,0)


        def getRuleIndex(self):
            return MiniGoParser.RULE_field_decl_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterField_decl_list" ):
                listener.enterField_decl_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitField_decl_list" ):
                listener.exitField_decl_list(self)




    def field_decl_list(self):

        localctx = MiniGoParser.Field_decl_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 146, self.RULE_field_decl_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 722
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [35]:
                self.state = 718
                self.field_decl()
                self.state = 719
                self.eos()
                pass
            elif token in [34]:
                self.state = 721
                self.match(MiniGoParser.NEWLINE)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 725
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==34 or _la==35:
                self.state = 724
                self.field_decl_list()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Field_declContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ID(self):
            return self.getToken(MiniGoParser.ID, 0)

        def types(self):
            return self.getTypedRuleContext(MiniGoParser.TypesContext,0)


        def getRuleIndex(self):
            return MiniGoParser.RULE_field_decl

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterField_decl" ):
                listener.enterField_decl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitField_decl" ):
                listener.exitField_decl(self)




    def field_decl(self):

        localctx = MiniGoParser.Field_declContext(self, self._ctx, self.state)
        self.enterRule(localctx, 148, self.RULE_field_decl)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 727
            self.match(MiniGoParser.ID)
            self.state = 728
            self.types()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Interface_declContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TYPE(self):
            return self.getToken(MiniGoParser.TYPE, 0)

        def ID(self):
            return self.getToken(MiniGoParser.ID, 0)

        def INTERFACE(self):
            return self.getToken(MiniGoParser.INTERFACE, 0)

        def LBRACE(self):
            return self.getToken(MiniGoParser.LBRACE, 0)

        def method_in_decl(self):
            return self.getTypedRuleContext(MiniGoParser.Method_in_declContext,0)


        def RBRACE(self):
            return self.getToken(MiniGoParser.RBRACE, 0)

        def newlines(self):
            return self.getTypedRuleContext(MiniGoParser.NewlinesContext,0)


        def getRuleIndex(self):
            return MiniGoParser.RULE_interface_decl

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInterface_decl" ):
                listener.enterInterface_decl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInterface_decl" ):
                listener.exitInterface_decl(self)




    def interface_decl(self):

        localctx = MiniGoParser.Interface_declContext(self, self._ctx, self.state)
        self.enterRule(localctx, 150, self.RULE_interface_decl)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 730
            self.match(MiniGoParser.TYPE)
            self.state = 731
            self.match(MiniGoParser.ID)
            self.state = 732
            self.match(MiniGoParser.INTERFACE)
            self.state = 733
            self.match(MiniGoParser.LBRACE)
            self.state = 735
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,63,self._ctx)
            if la_ == 1:
                self.state = 734
                self.newlines(0)


            self.state = 737
            self.method_in_decl()
            self.state = 738
            self.match(MiniGoParser.RBRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Method_in_declContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NEWLINE(self):
            return self.getToken(MiniGoParser.NEWLINE, 0)

        def method_in_decl(self):
            return self.getTypedRuleContext(MiniGoParser.Method_in_declContext,0)


        def ID(self):
            return self.getToken(MiniGoParser.ID, 0)

        def LPAREN(self):
            return self.getToken(MiniGoParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(MiniGoParser.RPAREN, 0)

        def eos(self):
            return self.getTypedRuleContext(MiniGoParser.EosContext,0)


        def param_decl(self):
            return self.getTypedRuleContext(MiniGoParser.Param_declContext,0)


        def types(self):
            return self.getTypedRuleContext(MiniGoParser.TypesContext,0)


        def getRuleIndex(self):
            return MiniGoParser.RULE_method_in_decl

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMethod_in_decl" ):
                listener.enterMethod_in_decl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMethod_in_decl" ):
                listener.exitMethod_in_decl(self)




    def method_in_decl(self):

        localctx = MiniGoParser.Method_in_declContext(self, self._ctx, self.state)
        self.enterRule(localctx, 152, self.RULE_method_in_decl)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 751
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [35]:
                self.state = 740
                self.match(MiniGoParser.ID)
                self.state = 741
                self.match(MiniGoParser.LPAREN)
                self.state = 743
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==35:
                    self.state = 742
                    self.param_decl()


                self.state = 745
                self.match(MiniGoParser.RPAREN)
                self.state = 747
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 9)) & ~0x3f) == 0 and ((1 << (_la - 9)) & 72057594105036815) != 0):
                    self.state = 746
                    self.types()


                self.state = 749
                self.eos()
                pass
            elif token in [34]:
                self.state = 750
                self.match(MiniGoParser.NEWLINE)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 754
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==34 or _la==35:
                self.state = 753
                self.method_in_decl()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Param_declContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ID(self):
            return self.getToken(MiniGoParser.ID, 0)

        def param_decl_tail(self):
            return self.getTypedRuleContext(MiniGoParser.Param_decl_tailContext,0)


        def types(self):
            return self.getTypedRuleContext(MiniGoParser.TypesContext,0)


        def COMMA(self):
            return self.getToken(MiniGoParser.COMMA, 0)

        def param_decl(self):
            return self.getTypedRuleContext(MiniGoParser.Param_declContext,0)


        def getRuleIndex(self):
            return MiniGoParser.RULE_param_decl

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParam_decl" ):
                listener.enterParam_decl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParam_decl" ):
                listener.exitParam_decl(self)




    def param_decl(self):

        localctx = MiniGoParser.Param_declContext(self, self._ctx, self.state)
        self.enterRule(localctx, 154, self.RULE_param_decl)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 756
            self.match(MiniGoParser.ID)
            self.state = 757
            self.param_decl_tail()
            self.state = 758
            self.types()
            self.state = 762
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==58:
                self.state = 760
                self.match(MiniGoParser.COMMA)
                self.state = 761
                self.param_decl()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Param_decl_tailContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COMMA(self):
            return self.getToken(MiniGoParser.COMMA, 0)

        def ID(self):
            return self.getToken(MiniGoParser.ID, 0)

        def param_decl_tail(self):
            return self.getTypedRuleContext(MiniGoParser.Param_decl_tailContext,0)


        def getRuleIndex(self):
            return MiniGoParser.RULE_param_decl_tail

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParam_decl_tail" ):
                listener.enterParam_decl_tail(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParam_decl_tail" ):
                listener.exitParam_decl_tail(self)




    def param_decl_tail(self):

        localctx = MiniGoParser.Param_decl_tailContext(self, self._ctx, self.state)
        self.enterRule(localctx, 156, self.RULE_param_decl_tail)
        try:
            self.state = 768
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [58]:
                self.enterOuterAlt(localctx, 1)
                self.state = 764
                self.match(MiniGoParser.COMMA)
                self.state = 765
                self.match(MiniGoParser.ID)
                self.state = 766
                self.param_decl_tail()
                pass
            elif token in [9, 10, 11, 12, 35, 65]:
                self.enterOuterAlt(localctx, 2)

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Param_call_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expr(self):
            return self.getTypedRuleContext(MiniGoParser.ExprContext,0)


        def COMMA(self):
            return self.getToken(MiniGoParser.COMMA, 0)

        def param_call_list(self):
            return self.getTypedRuleContext(MiniGoParser.Param_call_listContext,0)


        def getRuleIndex(self):
            return MiniGoParser.RULE_param_call_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParam_call_list" ):
                listener.enterParam_call_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParam_call_list" ):
                listener.exitParam_call_list(self)




    def param_call_list(self):

        localctx = MiniGoParser.Param_call_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 158, self.RULE_param_call_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 770
            self.expr()
            self.state = 773
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==58:
                self.state = 771
                self.match(MiniGoParser.COMMA)
                self.state = 772
                self.param_call_list()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Function_callContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ID(self):
            return self.getToken(MiniGoParser.ID, 0)

        def LPAREN(self):
            return self.getToken(MiniGoParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(MiniGoParser.RPAREN, 0)

        def param_call_list(self):
            return self.getTypedRuleContext(MiniGoParser.Param_call_listContext,0)


        def built_in_function_call(self):
            return self.getTypedRuleContext(MiniGoParser.Built_in_function_callContext,0)


        def getRuleIndex(self):
            return MiniGoParser.RULE_function_call

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunction_call" ):
                listener.enterFunction_call(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunction_call" ):
                listener.exitFunction_call(self)




    def function_call(self):

        localctx = MiniGoParser.Function_callContext(self, self._ctx, self.state)
        self.enterRule(localctx, 160, self.RULE_function_call)
        self._la = 0 # Token type
        try:
            self.state = 782
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [35]:
                self.enterOuterAlt(localctx, 1)
                self.state = 775
                self.match(MiniGoParser.ID)
                self.state = 776
                self.match(MiniGoParser.LPAREN)
                self.state = 778
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 18)) & ~0x3f) == 0 and ((1 << (_la - 18)) & 53629781304606719) != 0):
                    self.state = 777
                    self.param_call_list()


                self.state = 780
                self.match(MiniGoParser.RPAREN)
                pass
            elif token in [21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33]:
                self.enterOuterAlt(localctx, 2)
                self.state = 781
                self.built_in_function_call()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Func_declContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FUNC(self):
            return self.getToken(MiniGoParser.FUNC, 0)

        def ID(self):
            return self.getToken(MiniGoParser.ID, 0)

        def LPAREN(self):
            return self.getToken(MiniGoParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(MiniGoParser.RPAREN, 0)

        def block(self):
            return self.getTypedRuleContext(MiniGoParser.BlockContext,0)


        def param_decl(self):
            return self.getTypedRuleContext(MiniGoParser.Param_declContext,0)


        def types(self):
            return self.getTypedRuleContext(MiniGoParser.TypesContext,0)


        def getRuleIndex(self):
            return MiniGoParser.RULE_func_decl

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunc_decl" ):
                listener.enterFunc_decl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunc_decl" ):
                listener.exitFunc_decl(self)




    def func_decl(self):

        localctx = MiniGoParser.Func_declContext(self, self._ctx, self.state)
        self.enterRule(localctx, 162, self.RULE_func_decl)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 784
            self.match(MiniGoParser.FUNC)
            self.state = 785
            self.match(MiniGoParser.ID)
            self.state = 786
            self.match(MiniGoParser.LPAREN)
            self.state = 788
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==35:
                self.state = 787
                self.param_decl()


            self.state = 790
            self.match(MiniGoParser.RPAREN)
            self.state = 792
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 9)) & ~0x3f) == 0 and ((1 << (_la - 9)) & 72057594105036815) != 0):
                self.state = 791
                self.types()


            self.state = 794
            self.block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Method_declContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FUNC(self):
            return self.getToken(MiniGoParser.FUNC, 0)

        def LPAREN(self, i:int=None):
            if i is None:
                return self.getTokens(MiniGoParser.LPAREN)
            else:
                return self.getToken(MiniGoParser.LPAREN, i)

        def ID(self, i:int=None):
            if i is None:
                return self.getTokens(MiniGoParser.ID)
            else:
                return self.getToken(MiniGoParser.ID, i)

        def compositeType(self):
            return self.getTypedRuleContext(MiniGoParser.CompositeTypeContext,0)


        def RPAREN(self, i:int=None):
            if i is None:
                return self.getTokens(MiniGoParser.RPAREN)
            else:
                return self.getToken(MiniGoParser.RPAREN, i)

        def block(self):
            return self.getTypedRuleContext(MiniGoParser.BlockContext,0)


        def param_decl(self):
            return self.getTypedRuleContext(MiniGoParser.Param_declContext,0)


        def types(self):
            return self.getTypedRuleContext(MiniGoParser.TypesContext,0)


        def getRuleIndex(self):
            return MiniGoParser.RULE_method_decl

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMethod_decl" ):
                listener.enterMethod_decl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMethod_decl" ):
                listener.exitMethod_decl(self)




    def method_decl(self):

        localctx = MiniGoParser.Method_declContext(self, self._ctx, self.state)
        self.enterRule(localctx, 164, self.RULE_method_decl)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 796
            self.match(MiniGoParser.FUNC)
            self.state = 797
            self.match(MiniGoParser.LPAREN)
            self.state = 798
            self.match(MiniGoParser.ID)
            self.state = 799
            self.compositeType()
            self.state = 800
            self.match(MiniGoParser.RPAREN)
            self.state = 801
            self.match(MiniGoParser.ID)
            self.state = 802
            self.match(MiniGoParser.LPAREN)
            self.state = 804
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==35:
                self.state = 803
                self.param_decl()


            self.state = 806
            self.match(MiniGoParser.RPAREN)
            self.state = 808
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 9)) & ~0x3f) == 0 and ((1 << (_la - 9)) & 72057594105036815) != 0):
                self.state = 807
                self.types()


            self.state = 810
            self.block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BlockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LBRACE(self):
            return self.getToken(MiniGoParser.LBRACE, 0)

        def stmt_list(self):
            return self.getTypedRuleContext(MiniGoParser.Stmt_listContext,0)


        def RBRACE(self):
            return self.getToken(MiniGoParser.RBRACE, 0)

        def NEWLINE(self):
            return self.getToken(MiniGoParser.NEWLINE, 0)

        def getRuleIndex(self):
            return MiniGoParser.RULE_block

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBlock" ):
                listener.enterBlock(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBlock" ):
                listener.exitBlock(self)




    def block(self):

        localctx = MiniGoParser.BlockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 166, self.RULE_block)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 812
            self.match(MiniGoParser.LBRACE)
            self.state = 814
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==34:
                self.state = 813
                self.match(MiniGoParser.NEWLINE)


            self.state = 816
            self.stmt_list(0)
            self.state = 817
            self.match(MiniGoParser.RBRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Built_in_function_callContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return MiniGoParser.RULE_built_in_function_call

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class PutIntLnCallContext(Built_in_function_callContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MiniGoParser.Built_in_function_callContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def PUT_INT_LN(self):
            return self.getToken(MiniGoParser.PUT_INT_LN, 0)
        def LPAREN(self):
            return self.getToken(MiniGoParser.LPAREN, 0)
        def expr(self):
            return self.getTypedRuleContext(MiniGoParser.ExprContext,0)

        def RPAREN(self):
            return self.getToken(MiniGoParser.RPAREN, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPutIntLnCall" ):
                listener.enterPutIntLnCall(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPutIntLnCall" ):
                listener.exitPutIntLnCall(self)


    class PutFloatCallContext(Built_in_function_callContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MiniGoParser.Built_in_function_callContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def PUT_FLOAT(self):
            return self.getToken(MiniGoParser.PUT_FLOAT, 0)
        def LPAREN(self):
            return self.getToken(MiniGoParser.LPAREN, 0)
        def expr(self):
            return self.getTypedRuleContext(MiniGoParser.ExprContext,0)

        def RPAREN(self):
            return self.getToken(MiniGoParser.RPAREN, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPutFloatCall" ):
                listener.enterPutFloatCall(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPutFloatCall" ):
                listener.exitPutFloatCall(self)


    class PutFloatLnCallContext(Built_in_function_callContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MiniGoParser.Built_in_function_callContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def PUT_FLOAT_LN(self):
            return self.getToken(MiniGoParser.PUT_FLOAT_LN, 0)
        def LPAREN(self):
            return self.getToken(MiniGoParser.LPAREN, 0)
        def expr(self):
            return self.getTypedRuleContext(MiniGoParser.ExprContext,0)

        def RPAREN(self):
            return self.getToken(MiniGoParser.RPAREN, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPutFloatLnCall" ):
                listener.enterPutFloatLnCall(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPutFloatLnCall" ):
                listener.exitPutFloatLnCall(self)


    class PutStringLnCallContext(Built_in_function_callContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MiniGoParser.Built_in_function_callContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def PUT_STRING_LN(self):
            return self.getToken(MiniGoParser.PUT_STRING_LN, 0)
        def LPAREN(self):
            return self.getToken(MiniGoParser.LPAREN, 0)
        def expr(self):
            return self.getTypedRuleContext(MiniGoParser.ExprContext,0)

        def RPAREN(self):
            return self.getToken(MiniGoParser.RPAREN, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPutStringLnCall" ):
                listener.enterPutStringLnCall(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPutStringLnCall" ):
                listener.exitPutStringLnCall(self)


    class PutBoolCallContext(Built_in_function_callContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MiniGoParser.Built_in_function_callContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def PUT_BOOL(self):
            return self.getToken(MiniGoParser.PUT_BOOL, 0)
        def LPAREN(self):
            return self.getToken(MiniGoParser.LPAREN, 0)
        def expr(self):
            return self.getTypedRuleContext(MiniGoParser.ExprContext,0)

        def RPAREN(self):
            return self.getToken(MiniGoParser.RPAREN, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPutBoolCall" ):
                listener.enterPutBoolCall(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPutBoolCall" ):
                listener.exitPutBoolCall(self)


    class GetStringCallContext(Built_in_function_callContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MiniGoParser.Built_in_function_callContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def GET_STRING(self):
            return self.getToken(MiniGoParser.GET_STRING, 0)
        def LPAREN(self):
            return self.getToken(MiniGoParser.LPAREN, 0)
        def RPAREN(self):
            return self.getToken(MiniGoParser.RPAREN, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGetStringCall" ):
                listener.enterGetStringCall(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGetStringCall" ):
                listener.exitGetStringCall(self)


    class GetIntCallContext(Built_in_function_callContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MiniGoParser.Built_in_function_callContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def GET_INT(self):
            return self.getToken(MiniGoParser.GET_INT, 0)
        def LPAREN(self):
            return self.getToken(MiniGoParser.LPAREN, 0)
        def RPAREN(self):
            return self.getToken(MiniGoParser.RPAREN, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGetIntCall" ):
                listener.enterGetIntCall(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGetIntCall" ):
                listener.exitGetIntCall(self)


    class PutLnCallContext(Built_in_function_callContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MiniGoParser.Built_in_function_callContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def PUT_LN(self):
            return self.getToken(MiniGoParser.PUT_LN, 0)
        def LPAREN(self):
            return self.getToken(MiniGoParser.LPAREN, 0)
        def RPAREN(self):
            return self.getToken(MiniGoParser.RPAREN, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPutLnCall" ):
                listener.enterPutLnCall(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPutLnCall" ):
                listener.exitPutLnCall(self)


    class PutStringCallContext(Built_in_function_callContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MiniGoParser.Built_in_function_callContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def PUT_STRING(self):
            return self.getToken(MiniGoParser.PUT_STRING, 0)
        def LPAREN(self):
            return self.getToken(MiniGoParser.LPAREN, 0)
        def expr(self):
            return self.getTypedRuleContext(MiniGoParser.ExprContext,0)

        def RPAREN(self):
            return self.getToken(MiniGoParser.RPAREN, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPutStringCall" ):
                listener.enterPutStringCall(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPutStringCall" ):
                listener.exitPutStringCall(self)


    class GetBoolCallContext(Built_in_function_callContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MiniGoParser.Built_in_function_callContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def GET_BOOL(self):
            return self.getToken(MiniGoParser.GET_BOOL, 0)
        def LPAREN(self):
            return self.getToken(MiniGoParser.LPAREN, 0)
        def RPAREN(self):
            return self.getToken(MiniGoParser.RPAREN, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGetBoolCall" ):
                listener.enterGetBoolCall(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGetBoolCall" ):
                listener.exitGetBoolCall(self)


    class PutBoolLnCallContext(Built_in_function_callContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MiniGoParser.Built_in_function_callContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def PUT_BOOL_LN(self):
            return self.getToken(MiniGoParser.PUT_BOOL_LN, 0)
        def LPAREN(self):
            return self.getToken(MiniGoParser.LPAREN, 0)
        def expr(self):
            return self.getTypedRuleContext(MiniGoParser.ExprContext,0)

        def RPAREN(self):
            return self.getToken(MiniGoParser.RPAREN, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPutBoolLnCall" ):
                listener.enterPutBoolLnCall(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPutBoolLnCall" ):
                listener.exitPutBoolLnCall(self)


    class GetFloatCallContext(Built_in_function_callContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MiniGoParser.Built_in_function_callContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def GET_FLOAT(self):
            return self.getToken(MiniGoParser.GET_FLOAT, 0)
        def LPAREN(self):
            return self.getToken(MiniGoParser.LPAREN, 0)
        def RPAREN(self):
            return self.getToken(MiniGoParser.RPAREN, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGetFloatCall" ):
                listener.enterGetFloatCall(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGetFloatCall" ):
                listener.exitGetFloatCall(self)


    class PutIntCallContext(Built_in_function_callContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MiniGoParser.Built_in_function_callContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def PUT_INT(self):
            return self.getToken(MiniGoParser.PUT_INT, 0)
        def LPAREN(self):
            return self.getToken(MiniGoParser.LPAREN, 0)
        def expr(self):
            return self.getTypedRuleContext(MiniGoParser.ExprContext,0)

        def RPAREN(self):
            return self.getToken(MiniGoParser.RPAREN, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPutIntCall" ):
                listener.enterPutIntCall(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPutIntCall" ):
                listener.exitPutIntCall(self)



    def built_in_function_call(self):

        localctx = MiniGoParser.Built_in_function_callContext(self, self._ctx, self.state)
        self.enterRule(localctx, 168, self.RULE_built_in_function_call)
        try:
            self.state = 874
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [21]:
                localctx = MiniGoParser.GetIntCallContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 819
                self.match(MiniGoParser.GET_INT)
                self.state = 820
                self.match(MiniGoParser.LPAREN)
                self.state = 821
                self.match(MiniGoParser.RPAREN)
                pass
            elif token in [22]:
                localctx = MiniGoParser.PutIntCallContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 822
                self.match(MiniGoParser.PUT_INT)
                self.state = 823
                self.match(MiniGoParser.LPAREN)
                self.state = 824
                self.expr()
                self.state = 825
                self.match(MiniGoParser.RPAREN)
                pass
            elif token in [23]:
                localctx = MiniGoParser.PutIntLnCallContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 827
                self.match(MiniGoParser.PUT_INT_LN)
                self.state = 828
                self.match(MiniGoParser.LPAREN)
                self.state = 829
                self.expr()
                self.state = 830
                self.match(MiniGoParser.RPAREN)
                pass
            elif token in [24]:
                localctx = MiniGoParser.GetFloatCallContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 832
                self.match(MiniGoParser.GET_FLOAT)
                self.state = 833
                self.match(MiniGoParser.LPAREN)
                self.state = 834
                self.match(MiniGoParser.RPAREN)
                pass
            elif token in [25]:
                localctx = MiniGoParser.PutFloatCallContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 835
                self.match(MiniGoParser.PUT_FLOAT)
                self.state = 836
                self.match(MiniGoParser.LPAREN)
                self.state = 837
                self.expr()
                self.state = 838
                self.match(MiniGoParser.RPAREN)
                pass
            elif token in [26]:
                localctx = MiniGoParser.PutFloatLnCallContext(self, localctx)
                self.enterOuterAlt(localctx, 6)
                self.state = 840
                self.match(MiniGoParser.PUT_FLOAT_LN)
                self.state = 841
                self.match(MiniGoParser.LPAREN)
                self.state = 842
                self.expr()
                self.state = 843
                self.match(MiniGoParser.RPAREN)
                pass
            elif token in [27]:
                localctx = MiniGoParser.GetBoolCallContext(self, localctx)
                self.enterOuterAlt(localctx, 7)
                self.state = 845
                self.match(MiniGoParser.GET_BOOL)
                self.state = 846
                self.match(MiniGoParser.LPAREN)
                self.state = 847
                self.match(MiniGoParser.RPAREN)
                pass
            elif token in [28]:
                localctx = MiniGoParser.PutBoolCallContext(self, localctx)
                self.enterOuterAlt(localctx, 8)
                self.state = 848
                self.match(MiniGoParser.PUT_BOOL)
                self.state = 849
                self.match(MiniGoParser.LPAREN)
                self.state = 850
                self.expr()
                self.state = 851
                self.match(MiniGoParser.RPAREN)
                pass
            elif token in [29]:
                localctx = MiniGoParser.PutBoolLnCallContext(self, localctx)
                self.enterOuterAlt(localctx, 9)
                self.state = 853
                self.match(MiniGoParser.PUT_BOOL_LN)
                self.state = 854
                self.match(MiniGoParser.LPAREN)
                self.state = 855
                self.expr()
                self.state = 856
                self.match(MiniGoParser.RPAREN)
                pass
            elif token in [30]:
                localctx = MiniGoParser.GetStringCallContext(self, localctx)
                self.enterOuterAlt(localctx, 10)
                self.state = 858
                self.match(MiniGoParser.GET_STRING)
                self.state = 859
                self.match(MiniGoParser.LPAREN)
                self.state = 860
                self.match(MiniGoParser.RPAREN)
                pass
            elif token in [31]:
                localctx = MiniGoParser.PutStringCallContext(self, localctx)
                self.enterOuterAlt(localctx, 11)
                self.state = 861
                self.match(MiniGoParser.PUT_STRING)
                self.state = 862
                self.match(MiniGoParser.LPAREN)
                self.state = 863
                self.expr()
                self.state = 864
                self.match(MiniGoParser.RPAREN)
                pass
            elif token in [32]:
                localctx = MiniGoParser.PutStringLnCallContext(self, localctx)
                self.enterOuterAlt(localctx, 12)
                self.state = 866
                self.match(MiniGoParser.PUT_STRING_LN)
                self.state = 867
                self.match(MiniGoParser.LPAREN)
                self.state = 868
                self.expr()
                self.state = 869
                self.match(MiniGoParser.RPAREN)
                pass
            elif token in [33]:
                localctx = MiniGoParser.PutLnCallContext(self, localctx)
                self.enterOuterAlt(localctx, 13)
                self.state = 871
                self.match(MiniGoParser.PUT_LN)
                self.state = 872
                self.match(MiniGoParser.LPAREN)
                self.state = 873
                self.match(MiniGoParser.RPAREN)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx



    def sempred(self, localctx:RuleContext, ruleIndex:int, predIndex:int):
        if self._predicates == None:
            self._predicates = dict()
        self._predicates[2] = self.decl_or_stmt_sempred
        self._predicates[4] = self.newlines_sempred
        self._predicates[7] = self.logical_or_expr_sempred
        self._predicates[8] = self.logical_and_expr_sempred
        self._predicates[9] = self.relational_expr_sempred
        self._predicates[10] = self.additive_expr_sempred
        self._predicates[11] = self.multiplicative_expr_sempred
        self._predicates[13] = self.field_access_sempred
        self._predicates[14] = self.atom_arr_access_sempred
        self._predicates[26] = self.logical_index_or_expr_sempred
        self._predicates[27] = self.logical_index_and_expr_sempred
        self._predicates[28] = self.relational_index_expr_sempred
        self._predicates[29] = self.additive_index_expr_sempred
        self._predicates[30] = self.multiplicative_index_expr_sempred
        self._predicates[42] = self.struct_field_access_head_sempred
        self._predicates[44] = self.struct_field_access_no_func_head_sempred
        self._predicates[46] = self.stmt_list_sempred
        pred = self._predicates.get(ruleIndex, None)
        if pred is None:
            raise Exception("No predicate with index:" + str(ruleIndex))
        else:
            return pred(localctx, predIndex)

    def decl_or_stmt_sempred(self, localctx:Decl_or_stmtContext, predIndex:int):
            if predIndex == 0:
                return self.precpred(self._ctx, 2)
         

            if predIndex == 1:
                return self.precpred(self._ctx, 1)
         

    def newlines_sempred(self, localctx:NewlinesContext, predIndex:int):
            if predIndex == 2:
                return self.precpred(self._ctx, 1)
         

    def logical_or_expr_sempred(self, localctx:Logical_or_exprContext, predIndex:int):
            if predIndex == 3:
                return self.precpred(self._ctx, 2)
         

    def logical_and_expr_sempred(self, localctx:Logical_and_exprContext, predIndex:int):
            if predIndex == 4:
                return self.precpred(self._ctx, 2)
         

    def relational_expr_sempred(self, localctx:Relational_exprContext, predIndex:int):
            if predIndex == 5:
                return self.precpred(self._ctx, 2)
         

    def additive_expr_sempred(self, localctx:Additive_exprContext, predIndex:int):
            if predIndex == 6:
                return self.precpred(self._ctx, 2)
         

    def multiplicative_expr_sempred(self, localctx:Multiplicative_exprContext, predIndex:int):
            if predIndex == 7:
                return self.precpred(self._ctx, 2)
         

    def field_access_sempred(self, localctx:Field_accessContext, predIndex:int):
            if predIndex == 8:
                return self.precpred(self._ctx, 2)
         

    def atom_arr_access_sempred(self, localctx:Atom_arr_accessContext, predIndex:int):
            if predIndex == 9:
                return self.precpred(self._ctx, 2)
         

    def logical_index_or_expr_sempred(self, localctx:Logical_index_or_exprContext, predIndex:int):
            if predIndex == 10:
                return self.precpred(self._ctx, 2)
         

    def logical_index_and_expr_sempred(self, localctx:Logical_index_and_exprContext, predIndex:int):
            if predIndex == 11:
                return self.precpred(self._ctx, 2)
         

    def relational_index_expr_sempred(self, localctx:Relational_index_exprContext, predIndex:int):
            if predIndex == 12:
                return self.precpred(self._ctx, 2)
         

    def additive_index_expr_sempred(self, localctx:Additive_index_exprContext, predIndex:int):
            if predIndex == 13:
                return self.precpred(self._ctx, 2)
         

    def multiplicative_index_expr_sempred(self, localctx:Multiplicative_index_exprContext, predIndex:int):
            if predIndex == 14:
                return self.precpred(self._ctx, 2)
         

    def struct_field_access_head_sempred(self, localctx:Struct_field_access_headContext, predIndex:int):
            if predIndex == 15:
                return self.precpred(self._ctx, 4)
         

    def struct_field_access_no_func_head_sempred(self, localctx:Struct_field_access_no_func_headContext, predIndex:int):
            if predIndex == 16:
                return self.precpred(self._ctx, 3)
         

    def stmt_list_sempred(self, localctx:Stmt_listContext, predIndex:int):
            if predIndex == 17:
                return self.precpred(self._ctx, 2)
         

            if predIndex == 18:
                return self.precpred(self._ctx, 1)
         




