
        func foo() int { 
            var c = Car { name: "abc"}
            return foo()
        }



        func (c Car) getName() string {
            return c.name
        }
        type Car struct {
            name string
            owner [5][2] Student
        }
        type Vehicle interface {
            getName() string
        }
        func (c Car) getOwner() [5][2] Student {
            return c.owner
        }
        type Person interface {
            getName() string
            getAge() [3]int
        }
        func (p Student) getName() string {
            return p.name
        }
        type Student struct {
            name string
            age [3] float
        }

        func (p Student) getAge() [3]float {
            return p.age
        }

        func foo1(a int,b int) Car {
            var c Vehicle;
            c := Car { name: "abc"}

            for i := 0; i > 10; i += 1 {
                var a int;
                a := 1;
            }

            if (a >= 1) {
                var a int;
                a := 1;
            }
            var a = foo();
            return c;
        }
        
        var arr [5]int;

        func foo2(a int) int{
            var n int;
            
            arr := [5]int {1,2,3,4,5}
            return 2;
        }

        
        var n int = 1;
        var o = foo1(1, 2);
        var p boolean = true && !(1 > 2);
        var m boolean = !(1 > 2);
        var a Vehicle = Car { name: "abc"} 
        var b Person = a.getOwner()[1][n]
        var c string = a.getOwner()[1][2].getName()
        

        



        