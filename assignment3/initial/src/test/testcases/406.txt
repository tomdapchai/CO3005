

        var n int = fibonacci(10);

        var m Person = Person{age: 1, name: "string", job: "string", isStudent: true, isTeacher: false, base: 1.2};

        const x = -1;


        type Person struct {
            name string;
            age int;
            job string;
            isStudent boolean;
            isTeacher boolean;
            base float;
        }

        type Boat struct {
            driver Person;
            speed float;
            brand string;
        }

        func (p Person) getAge() int {
            var x int;
            p := Person{age: 1, name: "string", job: "string", isStudent: true, isTeacher: false, base: 1.2};
            return x
        }

        func (p Person) getPerson(a int) Person {
            var x int;
            var c = Person{age: 1, name: "string", job: "string", isStudent: true, isTeacher: false, base: 1.2};
            forLoop(10)
            return c;
        }

        
        var y int = x;
        var a Person = Person{age: 1, name: "string", job: "string", isStudent: true, isTeacher: false, base: 1.2};

        var b [10][3][3]int = [10][3][3]int{{{1, 2, 3}, {x, 2, 3}, {1,2, 3}}, {{1,2,3}, {1,2,3}, {2, 3, 4}}, {{1}}};

        var boat Boat = Boat{driver: a, speed: 1.2, brand: "string"};
        


        func forLoop(d int) {
            var i int = 0;
            for i < 10 {
                i := i + i;
            }

            for k := 0; i < 10; k := k + 1 {
                var x int;
            }

            for index, value := range b {
                var x int;
            }

            var x string = boat.driver.name;

            var y int = boat.driver.getAge();

            var z int = boat.driver.getPerson(i).getAge();

            
        }
        
        
        func fibonacci(n int) int {
        var a Person = Person{age: 1, name: "string", job: "string", isStudent: true, isTeacher: false, base: 1.2};
                if (n <= 1) {
                    return n;
                    
                } else if (n == 2) {
                    if (n == 2) {
                        return 1;
                        if (n == 2) {
                            return 1;
                            if (n == 2) {
                                return x + 1;
                            } else {
                                if (n == 2) {
                                    return 1;
                                }
                                return 1;
                            }
                        } else if (n == 2) {
                            return 1;
                        } else {
                            if (n == 2) {
                                return 1;
                            }
                            return 1;
                        }
                    }


                } else {
                    if (n == 2) {
                        return 1;
                        if (n == 2) {
                            return 1;
                        } else if (n == 2) {
                            return 1;
                        } else {
                            if (n == 2) {
                                return y * x;
                            }
                            return fibonacci(n - 1) + fibonacci(n - 2);
                        }
                    }
                }

            

                return fibonacci(n - 1) + fibonacci(n - 2);
        }

        



        