# Generated from w:/CO3005/assignment3/initial/src/main/minigo/parser/MiniGo.g4 by ANTLR 4.13.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


from lexererr import *


def serializedATN():
    return [
        4,0,78,637,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,
        39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,
        45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,
        52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,
        58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,2,64,7,64,2,
        65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,2,71,7,
        71,2,72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,2,
        78,7,78,2,79,7,79,2,80,7,80,1,0,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,2,
        1,2,1,2,1,2,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,4,1,4,1,4,1,4,1,4,1,5,
        1,5,1,5,1,5,1,5,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,7,1,7,1,7,1,7,1,7,
        1,7,1,7,1,7,1,7,1,7,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,9,1,9,1,9,1,9,
        1,10,1,10,1,10,1,10,1,10,1,10,1,11,1,11,1,11,1,11,1,11,1,11,1,11,
        1,11,1,12,1,12,1,12,1,12,1,12,1,12,1,13,1,13,1,13,1,13,1,14,1,14,
        1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,15,1,15,1,15,1,15,1,15,1,15,
        1,16,1,16,1,16,1,16,1,16,1,16,1,17,1,17,1,17,1,17,1,18,1,18,1,18,
        1,18,1,18,1,19,1,19,1,19,1,19,1,19,1,19,1,20,1,20,1,20,1,20,1,20,
        1,20,1,20,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,22,1,22,1,22,1,22,
        1,22,1,22,1,22,1,22,1,22,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,
        1,23,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,25,1,25,1,25,
        1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,26,1,26,1,26,1,26,1,26,
        1,26,1,26,1,26,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,28,1,28,
        1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,29,1,29,1,29,1,29,1,29,
        1,29,1,29,1,29,1,29,1,29,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,
        1,30,1,30,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,
        1,31,1,32,1,32,1,32,1,32,1,32,1,32,1,33,3,33,398,8,33,1,33,1,33,
        1,33,1,34,1,34,5,34,405,8,34,10,34,12,34,408,9,34,1,35,1,35,1,36,
        1,36,1,37,1,37,1,38,1,38,1,39,1,39,1,40,1,40,1,40,1,41,1,41,1,41,
        1,42,1,42,1,43,1,43,1,43,1,44,1,44,1,45,1,45,1,45,1,46,1,46,1,46,
        1,47,1,47,1,47,1,48,1,48,1,49,1,49,1,50,1,50,1,50,1,51,1,51,1,51,
        1,52,1,52,1,52,1,53,1,53,1,53,1,54,1,54,1,54,1,55,1,55,1,55,1,56,
        1,56,1,57,1,57,1,58,1,58,1,59,1,59,1,60,1,60,1,61,1,61,1,62,1,62,
        1,63,1,63,1,64,1,64,1,65,1,65,1,66,1,66,1,66,5,66,487,8,66,10,66,
        12,66,490,9,66,3,66,492,8,66,1,67,1,67,1,67,4,67,497,8,67,11,67,
        12,67,498,1,68,1,68,1,68,4,68,504,8,68,11,68,12,68,505,1,69,1,69,
        1,69,4,69,511,8,69,11,69,12,69,512,1,70,1,70,1,71,1,71,3,71,519,
        8,71,1,71,4,71,522,8,71,11,71,12,71,523,1,72,4,72,527,8,72,11,72,
        12,72,528,1,72,1,72,5,72,533,8,72,10,72,12,72,536,9,72,1,72,3,72,
        539,8,72,1,72,4,72,542,8,72,11,72,12,72,543,1,72,1,72,1,72,1,72,
        4,72,550,8,72,11,72,12,72,551,1,72,1,72,3,72,556,8,72,1,73,4,73,
        559,8,73,11,73,12,73,560,1,73,1,73,1,74,1,74,1,75,1,75,1,75,1,75,
        1,75,1,75,5,75,573,8,75,10,75,12,75,576,9,75,1,75,1,75,1,76,1,76,
        1,76,1,76,5,76,584,8,76,10,76,12,76,587,9,76,1,76,1,76,1,77,1,77,
        1,77,1,77,1,77,5,77,596,8,77,10,77,12,77,599,9,77,1,77,1,77,1,77,
        1,77,1,77,1,78,1,78,1,78,1,79,1,79,1,79,1,79,5,79,613,8,79,10,79,
        12,79,616,9,79,1,79,1,79,1,79,1,79,1,80,1,80,1,80,1,80,1,80,1,80,
        5,80,628,8,80,10,80,12,80,631,9,80,1,80,3,80,634,8,80,1,80,1,80,
        1,597,0,81,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,
        12,25,13,27,14,29,15,31,16,33,17,35,18,37,19,39,20,41,21,43,22,45,
        23,47,24,49,25,51,26,53,27,55,28,57,29,59,30,61,31,63,32,65,33,67,
        34,69,35,71,36,73,37,75,38,77,39,79,40,81,41,83,42,85,43,87,44,89,
        45,91,46,93,47,95,48,97,49,99,50,101,51,103,52,105,53,107,54,109,
        55,111,56,113,57,115,58,117,59,119,60,121,61,123,62,125,63,127,64,
        129,65,131,66,133,67,135,68,137,69,139,70,141,0,143,0,145,71,147,
        72,149,0,151,73,153,74,155,75,157,76,159,77,161,78,1,0,18,3,0,65,
        90,95,95,97,122,4,0,48,57,65,90,95,95,97,122,1,0,49,57,1,0,48,57,
        2,0,88,88,120,120,3,0,48,57,65,70,97,102,2,0,79,79,111,111,1,0,48,
        55,2,0,66,66,98,98,1,0,48,49,2,0,69,69,101,101,2,0,43,43,45,45,3,
        0,9,9,12,13,32,32,3,0,10,10,34,34,92,92,5,0,34,34,92,92,110,110,
        114,114,116,116,2,0,10,10,13,13,4,0,10,10,13,13,34,34,92,92,1,1,
        10,10,661,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,
        0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,
        0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,
        0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,
        0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,
        0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,
        0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,0,0,69,1,
        0,0,0,0,71,1,0,0,0,0,73,1,0,0,0,0,75,1,0,0,0,0,77,1,0,0,0,0,79,1,
        0,0,0,0,81,1,0,0,0,0,83,1,0,0,0,0,85,1,0,0,0,0,87,1,0,0,0,0,89,1,
        0,0,0,0,91,1,0,0,0,0,93,1,0,0,0,0,95,1,0,0,0,0,97,1,0,0,0,0,99,1,
        0,0,0,0,101,1,0,0,0,0,103,1,0,0,0,0,105,1,0,0,0,0,107,1,0,0,0,0,
        109,1,0,0,0,0,111,1,0,0,0,0,113,1,0,0,0,0,115,1,0,0,0,0,117,1,0,
        0,0,0,119,1,0,0,0,0,121,1,0,0,0,0,123,1,0,0,0,0,125,1,0,0,0,0,127,
        1,0,0,0,0,129,1,0,0,0,0,131,1,0,0,0,0,133,1,0,0,0,0,135,1,0,0,0,
        0,137,1,0,0,0,0,139,1,0,0,0,0,145,1,0,0,0,0,147,1,0,0,0,0,151,1,
        0,0,0,0,153,1,0,0,0,0,155,1,0,0,0,0,157,1,0,0,0,0,159,1,0,0,0,0,
        161,1,0,0,0,1,163,1,0,0,0,3,166,1,0,0,0,5,171,1,0,0,0,7,175,1,0,
        0,0,9,182,1,0,0,0,11,187,1,0,0,0,13,192,1,0,0,0,15,199,1,0,0,0,17,
        209,1,0,0,0,19,216,1,0,0,0,21,220,1,0,0,0,23,226,1,0,0,0,25,234,
        1,0,0,0,27,240,1,0,0,0,29,244,1,0,0,0,31,253,1,0,0,0,33,259,1,0,
        0,0,35,265,1,0,0,0,37,269,1,0,0,0,39,274,1,0,0,0,41,280,1,0,0,0,
        43,287,1,0,0,0,45,294,1,0,0,0,47,303,1,0,0,0,49,312,1,0,0,0,51,321,
        1,0,0,0,53,332,1,0,0,0,55,340,1,0,0,0,57,348,1,0,0,0,59,358,1,0,
        0,0,61,368,1,0,0,0,63,378,1,0,0,0,65,390,1,0,0,0,67,397,1,0,0,0,
        69,402,1,0,0,0,71,409,1,0,0,0,73,411,1,0,0,0,75,413,1,0,0,0,77,415,
        1,0,0,0,79,417,1,0,0,0,81,419,1,0,0,0,83,422,1,0,0,0,85,425,1,0,
        0,0,87,427,1,0,0,0,89,430,1,0,0,0,91,432,1,0,0,0,93,435,1,0,0,0,
        95,438,1,0,0,0,97,441,1,0,0,0,99,443,1,0,0,0,101,445,1,0,0,0,103,
        448,1,0,0,0,105,451,1,0,0,0,107,454,1,0,0,0,109,457,1,0,0,0,111,
        460,1,0,0,0,113,463,1,0,0,0,115,465,1,0,0,0,117,467,1,0,0,0,119,
        469,1,0,0,0,121,471,1,0,0,0,123,473,1,0,0,0,125,475,1,0,0,0,127,
        477,1,0,0,0,129,479,1,0,0,0,131,481,1,0,0,0,133,491,1,0,0,0,135,
        493,1,0,0,0,137,500,1,0,0,0,139,507,1,0,0,0,141,514,1,0,0,0,143,
        516,1,0,0,0,145,555,1,0,0,0,147,558,1,0,0,0,149,564,1,0,0,0,151,
        566,1,0,0,0,153,579,1,0,0,0,155,590,1,0,0,0,157,605,1,0,0,0,159,
        608,1,0,0,0,161,621,1,0,0,0,163,164,5,105,0,0,164,165,5,102,0,0,
        165,2,1,0,0,0,166,167,5,101,0,0,167,168,5,108,0,0,168,169,5,115,
        0,0,169,170,5,101,0,0,170,4,1,0,0,0,171,172,5,102,0,0,172,173,5,
        111,0,0,173,174,5,114,0,0,174,6,1,0,0,0,175,176,5,114,0,0,176,177,
        5,101,0,0,177,178,5,116,0,0,178,179,5,117,0,0,179,180,5,114,0,0,
        180,181,5,110,0,0,181,8,1,0,0,0,182,183,5,102,0,0,183,184,5,117,
        0,0,184,185,5,110,0,0,185,186,5,99,0,0,186,10,1,0,0,0,187,188,5,
        116,0,0,188,189,5,121,0,0,189,190,5,112,0,0,190,191,5,101,0,0,191,
        12,1,0,0,0,192,193,5,115,0,0,193,194,5,116,0,0,194,195,5,114,0,0,
        195,196,5,117,0,0,196,197,5,99,0,0,197,198,5,116,0,0,198,14,1,0,
        0,0,199,200,5,105,0,0,200,201,5,110,0,0,201,202,5,116,0,0,202,203,
        5,101,0,0,203,204,5,114,0,0,204,205,5,102,0,0,205,206,5,97,0,0,206,
        207,5,99,0,0,207,208,5,101,0,0,208,16,1,0,0,0,209,210,5,115,0,0,
        210,211,5,116,0,0,211,212,5,114,0,0,212,213,5,105,0,0,213,214,5,
        110,0,0,214,215,5,103,0,0,215,18,1,0,0,0,216,217,5,105,0,0,217,218,
        5,110,0,0,218,219,5,116,0,0,219,20,1,0,0,0,220,221,5,102,0,0,221,
        222,5,108,0,0,222,223,5,111,0,0,223,224,5,97,0,0,224,225,5,116,0,
        0,225,22,1,0,0,0,226,227,5,98,0,0,227,228,5,111,0,0,228,229,5,111,
        0,0,229,230,5,108,0,0,230,231,5,101,0,0,231,232,5,97,0,0,232,233,
        5,110,0,0,233,24,1,0,0,0,234,235,5,99,0,0,235,236,5,111,0,0,236,
        237,5,110,0,0,237,238,5,115,0,0,238,239,5,116,0,0,239,26,1,0,0,0,
        240,241,5,118,0,0,241,242,5,97,0,0,242,243,5,114,0,0,243,28,1,0,
        0,0,244,245,5,99,0,0,245,246,5,111,0,0,246,247,5,110,0,0,247,248,
        5,116,0,0,248,249,5,105,0,0,249,250,5,110,0,0,250,251,5,117,0,0,
        251,252,5,101,0,0,252,30,1,0,0,0,253,254,5,98,0,0,254,255,5,114,
        0,0,255,256,5,101,0,0,256,257,5,97,0,0,257,258,5,107,0,0,258,32,
        1,0,0,0,259,260,5,114,0,0,260,261,5,97,0,0,261,262,5,110,0,0,262,
        263,5,103,0,0,263,264,5,101,0,0,264,34,1,0,0,0,265,266,5,110,0,0,
        266,267,5,105,0,0,267,268,5,108,0,0,268,36,1,0,0,0,269,270,5,116,
        0,0,270,271,5,114,0,0,271,272,5,117,0,0,272,273,5,101,0,0,273,38,
        1,0,0,0,274,275,5,102,0,0,275,276,5,97,0,0,276,277,5,108,0,0,277,
        278,5,115,0,0,278,279,5,101,0,0,279,40,1,0,0,0,280,281,5,103,0,0,
        281,282,5,101,0,0,282,283,5,116,0,0,283,284,5,73,0,0,284,285,5,110,
        0,0,285,286,5,116,0,0,286,42,1,0,0,0,287,288,5,112,0,0,288,289,5,
        117,0,0,289,290,5,116,0,0,290,291,5,73,0,0,291,292,5,110,0,0,292,
        293,5,116,0,0,293,44,1,0,0,0,294,295,5,112,0,0,295,296,5,117,0,0,
        296,297,5,116,0,0,297,298,5,73,0,0,298,299,5,110,0,0,299,300,5,116,
        0,0,300,301,5,76,0,0,301,302,5,110,0,0,302,46,1,0,0,0,303,304,5,
        103,0,0,304,305,5,101,0,0,305,306,5,116,0,0,306,307,5,70,0,0,307,
        308,5,108,0,0,308,309,5,111,0,0,309,310,5,97,0,0,310,311,5,116,0,
        0,311,48,1,0,0,0,312,313,5,112,0,0,313,314,5,117,0,0,314,315,5,116,
        0,0,315,316,5,70,0,0,316,317,5,108,0,0,317,318,5,111,0,0,318,319,
        5,97,0,0,319,320,5,116,0,0,320,50,1,0,0,0,321,322,5,112,0,0,322,
        323,5,117,0,0,323,324,5,116,0,0,324,325,5,70,0,0,325,326,5,108,0,
        0,326,327,5,111,0,0,327,328,5,97,0,0,328,329,5,116,0,0,329,330,5,
        76,0,0,330,331,5,110,0,0,331,52,1,0,0,0,332,333,5,103,0,0,333,334,
        5,101,0,0,334,335,5,116,0,0,335,336,5,66,0,0,336,337,5,111,0,0,337,
        338,5,111,0,0,338,339,5,108,0,0,339,54,1,0,0,0,340,341,5,112,0,0,
        341,342,5,117,0,0,342,343,5,116,0,0,343,344,5,66,0,0,344,345,5,111,
        0,0,345,346,5,111,0,0,346,347,5,108,0,0,347,56,1,0,0,0,348,349,5,
        112,0,0,349,350,5,117,0,0,350,351,5,116,0,0,351,352,5,66,0,0,352,
        353,5,111,0,0,353,354,5,111,0,0,354,355,5,108,0,0,355,356,5,76,0,
        0,356,357,5,110,0,0,357,58,1,0,0,0,358,359,5,103,0,0,359,360,5,101,
        0,0,360,361,5,116,0,0,361,362,5,83,0,0,362,363,5,116,0,0,363,364,
        5,114,0,0,364,365,5,105,0,0,365,366,5,110,0,0,366,367,5,103,0,0,
        367,60,1,0,0,0,368,369,5,112,0,0,369,370,5,117,0,0,370,371,5,116,
        0,0,371,372,5,83,0,0,372,373,5,116,0,0,373,374,5,114,0,0,374,375,
        5,105,0,0,375,376,5,110,0,0,376,377,5,103,0,0,377,62,1,0,0,0,378,
        379,5,112,0,0,379,380,5,117,0,0,380,381,5,116,0,0,381,382,5,83,0,
        0,382,383,5,116,0,0,383,384,5,114,0,0,384,385,5,105,0,0,385,386,
        5,110,0,0,386,387,5,103,0,0,387,388,5,76,0,0,388,389,5,110,0,0,389,
        64,1,0,0,0,390,391,5,112,0,0,391,392,5,117,0,0,392,393,5,116,0,0,
        393,394,5,76,0,0,394,395,5,110,0,0,395,66,1,0,0,0,396,398,5,13,0,
        0,397,396,1,0,0,0,397,398,1,0,0,0,398,399,1,0,0,0,399,400,5,10,0,
        0,400,401,6,33,0,0,401,68,1,0,0,0,402,406,7,0,0,0,403,405,7,1,0,
        0,404,403,1,0,0,0,405,408,1,0,0,0,406,404,1,0,0,0,406,407,1,0,0,
        0,407,70,1,0,0,0,408,406,1,0,0,0,409,410,5,43,0,0,410,72,1,0,0,0,
        411,412,5,45,0,0,412,74,1,0,0,0,413,414,5,42,0,0,414,76,1,0,0,0,
        415,416,5,47,0,0,416,78,1,0,0,0,417,418,5,37,0,0,418,80,1,0,0,0,
        419,420,5,61,0,0,420,421,5,61,0,0,421,82,1,0,0,0,422,423,5,33,0,
        0,423,424,5,61,0,0,424,84,1,0,0,0,425,426,5,60,0,0,426,86,1,0,0,
        0,427,428,5,60,0,0,428,429,5,61,0,0,429,88,1,0,0,0,430,431,5,62,
        0,0,431,90,1,0,0,0,432,433,5,62,0,0,433,434,5,61,0,0,434,92,1,0,
        0,0,435,436,5,38,0,0,436,437,5,38,0,0,437,94,1,0,0,0,438,439,5,124,
        0,0,439,440,5,124,0,0,440,96,1,0,0,0,441,442,5,33,0,0,442,98,1,0,
        0,0,443,444,5,61,0,0,444,100,1,0,0,0,445,446,5,58,0,0,446,447,5,
        61,0,0,447,102,1,0,0,0,448,449,5,43,0,0,449,450,5,61,0,0,450,104,
        1,0,0,0,451,452,5,45,0,0,452,453,5,61,0,0,453,106,1,0,0,0,454,455,
        5,42,0,0,455,456,5,61,0,0,456,108,1,0,0,0,457,458,5,47,0,0,458,459,
        5,61,0,0,459,110,1,0,0,0,460,461,5,37,0,0,461,462,5,61,0,0,462,112,
        1,0,0,0,463,464,5,46,0,0,464,114,1,0,0,0,465,466,5,44,0,0,466,116,
        1,0,0,0,467,468,5,59,0,0,468,118,1,0,0,0,469,470,5,58,0,0,470,120,
        1,0,0,0,471,472,5,40,0,0,472,122,1,0,0,0,473,474,5,41,0,0,474,124,
        1,0,0,0,475,476,5,123,0,0,476,126,1,0,0,0,477,478,5,125,0,0,478,
        128,1,0,0,0,479,480,5,91,0,0,480,130,1,0,0,0,481,482,5,93,0,0,482,
        132,1,0,0,0,483,492,5,48,0,0,484,488,7,2,0,0,485,487,7,3,0,0,486,
        485,1,0,0,0,487,490,1,0,0,0,488,486,1,0,0,0,488,489,1,0,0,0,489,
        492,1,0,0,0,490,488,1,0,0,0,491,483,1,0,0,0,491,484,1,0,0,0,492,
        134,1,0,0,0,493,494,5,48,0,0,494,496,7,4,0,0,495,497,7,5,0,0,496,
        495,1,0,0,0,497,498,1,0,0,0,498,496,1,0,0,0,498,499,1,0,0,0,499,
        136,1,0,0,0,500,501,5,48,0,0,501,503,7,6,0,0,502,504,7,7,0,0,503,
        502,1,0,0,0,504,505,1,0,0,0,505,503,1,0,0,0,505,506,1,0,0,0,506,
        138,1,0,0,0,507,508,5,48,0,0,508,510,7,8,0,0,509,511,7,9,0,0,510,
        509,1,0,0,0,511,512,1,0,0,0,512,510,1,0,0,0,512,513,1,0,0,0,513,
        140,1,0,0,0,514,515,7,3,0,0,515,142,1,0,0,0,516,518,7,10,0,0,517,
        519,7,11,0,0,518,517,1,0,0,0,518,519,1,0,0,0,519,521,1,0,0,0,520,
        522,3,141,70,0,521,520,1,0,0,0,522,523,1,0,0,0,523,521,1,0,0,0,523,
        524,1,0,0,0,524,144,1,0,0,0,525,527,3,141,70,0,526,525,1,0,0,0,527,
        528,1,0,0,0,528,526,1,0,0,0,528,529,1,0,0,0,529,530,1,0,0,0,530,
        534,5,46,0,0,531,533,3,141,70,0,532,531,1,0,0,0,533,536,1,0,0,0,
        534,532,1,0,0,0,534,535,1,0,0,0,535,538,1,0,0,0,536,534,1,0,0,0,
        537,539,3,143,71,0,538,537,1,0,0,0,538,539,1,0,0,0,539,556,1,0,0,
        0,540,542,3,141,70,0,541,540,1,0,0,0,542,543,1,0,0,0,543,541,1,0,
        0,0,543,544,1,0,0,0,544,545,1,0,0,0,545,546,5,46,0,0,546,547,3,143,
        71,0,547,556,1,0,0,0,548,550,3,141,70,0,549,548,1,0,0,0,550,551,
        1,0,0,0,551,549,1,0,0,0,551,552,1,0,0,0,552,553,1,0,0,0,553,554,
        5,46,0,0,554,556,1,0,0,0,555,526,1,0,0,0,555,541,1,0,0,0,555,549,
        1,0,0,0,556,146,1,0,0,0,557,559,7,12,0,0,558,557,1,0,0,0,559,560,
        1,0,0,0,560,558,1,0,0,0,560,561,1,0,0,0,561,562,1,0,0,0,562,563,
        6,73,1,0,563,148,1,0,0,0,564,565,5,34,0,0,565,150,1,0,0,0,566,574,
        5,34,0,0,567,573,8,13,0,0,568,569,5,92,0,0,569,573,7,14,0,0,570,
        571,5,39,0,0,571,573,5,34,0,0,572,567,1,0,0,0,572,568,1,0,0,0,572,
        570,1,0,0,0,573,576,1,0,0,0,574,572,1,0,0,0,574,575,1,0,0,0,575,
        577,1,0,0,0,576,574,1,0,0,0,577,578,5,34,0,0,578,152,1,0,0,0,579,
        580,5,47,0,0,580,581,5,47,0,0,581,585,1,0,0,0,582,584,8,15,0,0,583,
        582,1,0,0,0,584,587,1,0,0,0,585,583,1,0,0,0,585,586,1,0,0,0,586,
        588,1,0,0,0,587,585,1,0,0,0,588,589,6,76,1,0,589,154,1,0,0,0,590,
        591,5,47,0,0,591,592,5,42,0,0,592,597,1,0,0,0,593,596,3,155,77,0,
        594,596,9,0,0,0,595,593,1,0,0,0,595,594,1,0,0,0,596,599,1,0,0,0,
        597,598,1,0,0,0,597,595,1,0,0,0,598,600,1,0,0,0,599,597,1,0,0,0,
        600,601,5,42,0,0,601,602,5,47,0,0,602,603,1,0,0,0,603,604,6,77,1,
        0,604,156,1,0,0,0,605,606,9,0,0,0,606,607,6,78,2,0,607,158,1,0,0,
        0,608,614,5,34,0,0,609,610,5,92,0,0,610,613,7,14,0,0,611,613,8,16,
        0,0,612,609,1,0,0,0,612,611,1,0,0,0,613,616,1,0,0,0,614,612,1,0,
        0,0,614,615,1,0,0,0,615,617,1,0,0,0,616,614,1,0,0,0,617,618,5,92,
        0,0,618,619,8,14,0,0,619,620,6,79,3,0,620,160,1,0,0,0,621,629,5,
        34,0,0,622,628,8,13,0,0,623,624,5,92,0,0,624,628,7,14,0,0,625,626,
        5,39,0,0,626,628,5,34,0,0,627,622,1,0,0,0,627,623,1,0,0,0,627,625,
        1,0,0,0,628,631,1,0,0,0,629,627,1,0,0,0,629,630,1,0,0,0,630,633,
        1,0,0,0,631,629,1,0,0,0,632,634,7,17,0,0,633,632,1,0,0,0,634,635,
        1,0,0,0,635,636,6,80,4,0,636,162,1,0,0,0,27,0,397,406,488,491,498,
        505,512,518,523,528,534,538,543,551,555,560,572,574,585,595,597,
        612,614,627,629,633,5,1,33,0,6,0,0,1,78,1,1,79,2,1,80,3
    ]

class MiniGoLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    IF = 1
    ELSE = 2
    FOR = 3
    RETURN = 4
    FUNC = 5
    TYPE = 6
    STRUCT = 7
    INTERFACE = 8
    STRING = 9
    INT = 10
    FLOAT = 11
    BOOLEAN = 12
    CONST = 13
    VAR = 14
    CONTINUE = 15
    BREAK = 16
    RANGE = 17
    NIL = 18
    TRUE = 19
    FALSE = 20
    GET_INT = 21
    PUT_INT = 22
    PUT_INT_LN = 23
    GET_FLOAT = 24
    PUT_FLOAT = 25
    PUT_FLOAT_LN = 26
    GET_BOOL = 27
    PUT_BOOL = 28
    PUT_BOOL_LN = 29
    GET_STRING = 30
    PUT_STRING = 31
    PUT_STRING_LN = 32
    PUT_LN = 33
    NEWLINE = 34
    ID = 35
    ADD = 36
    SUB = 37
    MUL = 38
    DIV = 39
    MOD = 40
    EQ = 41
    NEQ = 42
    LT = 43
    LE = 44
    GT = 45
    GE = 46
    AND = 47
    OR = 48
    NOT = 49
    ASSIGN = 50
    SHORT_ASSIGN = 51
    ADD_ASSIGN = 52
    SUB_ASSIGN = 53
    MUL_ASSIGN = 54
    DIV_ASSIGN = 55
    MOD_ASSIGN = 56
    DOT = 57
    COMMA = 58
    SEMICOLON = 59
    COLON = 60
    LPAREN = 61
    RPAREN = 62
    LBRACE = 63
    RBRACE = 64
    LBRACKET = 65
    RBRACKET = 66
    INT_LIT = 67
    HEX_LIT = 68
    OCT_LIT = 69
    BIN_LIT = 70
    FLOAT_LIT = 71
    WS = 72
    STRING_LIT = 73
    LINE_COMMENT = 74
    BLOCK_COMMENT = 75
    ERROR_CHAR = 76
    ILLEGAL_ESCAPE = 77
    UNCLOSE_STRING = 78

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'if'", "'else'", "'for'", "'return'", "'func'", "'type'", "'struct'", 
            "'interface'", "'string'", "'int'", "'float'", "'boolean'", 
            "'const'", "'var'", "'continue'", "'break'", "'range'", "'nil'", 
            "'true'", "'false'", "'getInt'", "'putInt'", "'putIntLn'", "'getFloat'", 
            "'putFloat'", "'putFloatLn'", "'getBool'", "'putBool'", "'putBoolLn'", 
            "'getString'", "'putString'", "'putStringLn'", "'putLn'", "'+'", 
            "'-'", "'*'", "'/'", "'%'", "'=='", "'!='", "'<'", "'<='", "'>'", 
            "'>='", "'&&'", "'||'", "'!'", "'='", "':='", "'+='", "'-='", 
            "'*='", "'/='", "'%='", "'.'", "','", "';'", "':'", "'('", "')'", 
            "'{'", "'}'", "'['", "']'" ]

    symbolicNames = [ "<INVALID>",
            "IF", "ELSE", "FOR", "RETURN", "FUNC", "TYPE", "STRUCT", "INTERFACE", 
            "STRING", "INT", "FLOAT", "BOOLEAN", "CONST", "VAR", "CONTINUE", 
            "BREAK", "RANGE", "NIL", "TRUE", "FALSE", "GET_INT", "PUT_INT", 
            "PUT_INT_LN", "GET_FLOAT", "PUT_FLOAT", "PUT_FLOAT_LN", "GET_BOOL", 
            "PUT_BOOL", "PUT_BOOL_LN", "GET_STRING", "PUT_STRING", "PUT_STRING_LN", 
            "PUT_LN", "NEWLINE", "ID", "ADD", "SUB", "MUL", "DIV", "MOD", 
            "EQ", "NEQ", "LT", "LE", "GT", "GE", "AND", "OR", "NOT", "ASSIGN", 
            "SHORT_ASSIGN", "ADD_ASSIGN", "SUB_ASSIGN", "MUL_ASSIGN", "DIV_ASSIGN", 
            "MOD_ASSIGN", "DOT", "COMMA", "SEMICOLON", "COLON", "LPAREN", 
            "RPAREN", "LBRACE", "RBRACE", "LBRACKET", "RBRACKET", "INT_LIT", 
            "HEX_LIT", "OCT_LIT", "BIN_LIT", "FLOAT_LIT", "WS", "STRING_LIT", 
            "LINE_COMMENT", "BLOCK_COMMENT", "ERROR_CHAR", "ILLEGAL_ESCAPE", 
            "UNCLOSE_STRING" ]

    ruleNames = [ "IF", "ELSE", "FOR", "RETURN", "FUNC", "TYPE", "STRUCT", 
                  "INTERFACE", "STRING", "INT", "FLOAT", "BOOLEAN", "CONST", 
                  "VAR", "CONTINUE", "BREAK", "RANGE", "NIL", "TRUE", "FALSE", 
                  "GET_INT", "PUT_INT", "PUT_INT_LN", "GET_FLOAT", "PUT_FLOAT", 
                  "PUT_FLOAT_LN", "GET_BOOL", "PUT_BOOL", "PUT_BOOL_LN", 
                  "GET_STRING", "PUT_STRING", "PUT_STRING_LN", "PUT_LN", 
                  "NEWLINE", "ID", "ADD", "SUB", "MUL", "DIV", "MOD", "EQ", 
                  "NEQ", "LT", "LE", "GT", "GE", "AND", "OR", "NOT", "ASSIGN", 
                  "SHORT_ASSIGN", "ADD_ASSIGN", "SUB_ASSIGN", "MUL_ASSIGN", 
                  "DIV_ASSIGN", "MOD_ASSIGN", "DOT", "COMMA", "SEMICOLON", 
                  "COLON", "LPAREN", "RPAREN", "LBRACE", "RBRACE", "LBRACKET", 
                  "RBRACKET", "INT_LIT", "HEX_LIT", "OCT_LIT", "BIN_LIT", 
                  "Digit", "Exponent", "FLOAT_LIT", "WS", "DOUBTED_QUOTE", 
                  "STRING_LIT", "LINE_COMMENT", "BLOCK_COMMENT", "ERROR_CHAR", 
                  "ILLEGAL_ESCAPE", "UNCLOSE_STRING" ]

    grammarFileName = "MiniGo.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


    def emit(self):
        self.lastTokenType = self.type
        tk = self.type
        if tk == self.UNCLOSE_STRING:       
            result = super().emit();
            raise UncloseString(result.text);
        elif tk == self.ILLEGAL_ESCAPE:
            result = super().emit();
            raise IllegalEscape(result.text);
        elif tk == self.ERROR_CHAR:
            result = super().emit();
            raise ErrorToken(result.text); 
        else:
            return super().emit();


    def action(self, localctx:RuleContext, ruleIndex:int, actionIndex:int):
        if self._actions is None:
            actions = dict()
            actions[33] = self.NEWLINE_action 
            actions[78] = self.ERROR_CHAR_action 
            actions[79] = self.ILLEGAL_ESCAPE_action 
            actions[80] = self.UNCLOSE_STRING_action 
            self._actions = actions
        action = self._actions.get(ruleIndex, None)
        if action is not None:
            action(localctx, actionIndex)
        else:
            raise Exception("No registered action for:" + str(ruleIndex))


    def NEWLINE_action(self, localctx:RuleContext , actionIndex:int):
        if actionIndex == 0:

                if hasattr(self, 'lastTokenType') and self.lastTokenType in [
                    self.ID, self.INT_LIT, self.HEX_LIT, self.BIN_LIT, self.OCT_LIT, self.FLOAT_LIT, self.BOOLEAN, self.STRING_LIT, 
                    self.RPAREN, self.RBRACKET, self.RBRACE, self.STRING, self.INT, self.FLOAT, self.BOOLEAN, self.NIL, self.TRUE, self.FALSE,
                    self.RETURN, self.CONTINUE, self.BREAK
                ]:
                    self.type = self.SEMICOLON
                    self.text = ';'
                else:
                    self.skip()

     

    def ERROR_CHAR_action(self, localctx:RuleContext , actionIndex:int):
        if actionIndex == 1:
            raise ErrorToken(self.text)
     

    def ILLEGAL_ESCAPE_action(self, localctx:RuleContext , actionIndex:int):
        if actionIndex == 2:

                        raise IllegalEscape(self.text);
                    
     

    def UNCLOSE_STRING_action(self, localctx:RuleContext , actionIndex:int):
        if actionIndex == 3:

                if (len(self.text) >= 2 and self.text[-1] == '\n' and self.text[-2] == '\r'):
                    raise UncloseString(self.text[0:-2])
                elif (self.text[-1] == '\n'):
                    raise UncloseString(self.text[0:-1])
                else:
                    raise UncloseString(self.text)

     


