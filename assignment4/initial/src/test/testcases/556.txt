
        func quickSort(arr [10]int, low int, high int) {
            if (low < high) {
                // Partition the array and get the pivot index
                pivotIndex := partition(arr, low, high)
                
                // Recursively sort elements before and after the pivot
                quickSort(arr, low, pivotIndex - 1)
                quickSort(arr, pivotIndex + 1, high)
            }
        }

        func partition(arr [10]int, low int, high int) int {
            pivot := arr[high]
            i := low - 1  // Index of smaller element
            
            for j := low; j < high; j += 1 {
                // If current element is smaller than or equal to pivot
                if (arr[j] <= pivot) {
                    i += 1
                    // Swap arr[i] and arr[j]
                    temp := arr[i]
                    arr[i] := arr[j]
                    arr[j] := temp
                }
            }
            
            // Swap arr[i+1] and arr[high] (put pivot in correct position)
            temp := arr[i+1]
            arr[i+1] := arr[high]
            arr[high] := temp
            
            return i + 1
        }

        func main() {
            var arr [10]int = [10]int{4, 2, 3, 7, 8, 9, 12, 14, 15, 11};
            quickSort(arr, 0, 9);
            for i := 0; i < 10; i += 1 {
                putIntLn(arr[i]);
            }
        }
        