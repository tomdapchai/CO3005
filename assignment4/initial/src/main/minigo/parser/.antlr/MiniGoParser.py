# Generated from w:/CO3005/assignment4/initial/src/main/minigo/parser/MiniGo.g4 by ANTLR 4.13.1
# encoding: utf-8
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
	from typing import TextIO
else:
	from typing.io import TextIO

def serializedATN():
    return [
        4,1,65,816,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
        6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,
        2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,
        7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,
        2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,
        7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,
        2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,
        7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,52,7,52,
        2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,58,2,59,
        7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,2,64,7,64,2,65,7,65,
        2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,2,71,7,71,2,72,
        7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,2,78,7,78,
        2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,1,0,1,0,1,0,1,
        1,1,1,1,1,3,1,175,8,1,1,2,1,2,1,2,1,2,1,2,1,2,1,2,5,2,184,8,2,10,
        2,12,2,187,9,2,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,3,3,198,8,3,1,
        3,1,3,1,4,1,4,1,4,1,4,1,4,5,4,207,8,4,10,4,12,4,210,9,4,1,5,1,5,
        3,5,214,8,5,1,6,1,6,1,7,1,7,1,7,1,7,1,7,1,7,5,7,224,8,7,10,7,12,
        7,227,9,7,1,8,1,8,1,8,1,8,1,8,1,8,5,8,235,8,8,10,8,12,8,238,9,8,
        1,9,1,9,1,9,1,9,1,9,1,9,5,9,246,8,9,10,9,12,9,249,9,9,1,10,1,10,
        1,10,1,10,1,10,1,10,5,10,257,8,10,10,10,12,10,260,9,10,1,11,1,11,
        1,11,1,11,1,11,1,11,5,11,268,8,11,10,11,12,11,271,9,11,1,12,1,12,
        1,12,3,12,276,8,12,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,3,13,
        286,8,13,5,13,288,8,13,10,13,12,13,291,9,13,1,14,1,14,1,14,1,14,
        1,14,1,14,1,14,1,14,5,14,301,8,14,10,14,12,14,304,9,14,1,15,1,15,
        1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,3,15,317,8,15,1,16,
        1,16,1,16,1,16,1,16,3,16,324,8,16,1,17,1,17,1,17,1,17,1,17,1,17,
        1,17,1,17,3,17,334,8,17,1,18,1,18,1,18,1,18,1,19,1,19,1,19,1,19,
        3,19,344,8,19,1,19,1,19,1,19,3,19,349,8,19,1,20,1,20,3,20,353,8,
        20,1,21,1,21,1,22,1,22,3,22,359,8,22,1,23,1,23,1,23,1,24,1,24,1,
        24,1,24,3,24,368,8,24,1,25,1,25,1,26,1,26,1,26,1,26,1,26,1,26,5,
        26,378,8,26,10,26,12,26,381,9,26,1,27,1,27,1,27,1,27,1,27,1,27,5,
        27,389,8,27,10,27,12,27,392,9,27,1,28,1,28,1,28,1,28,1,28,1,28,5,
        28,400,8,28,10,28,12,28,403,9,28,1,29,1,29,1,29,1,29,1,29,1,29,5,
        29,411,8,29,10,29,12,29,414,9,29,1,30,1,30,1,30,1,30,1,30,1,30,5,
        30,422,8,30,10,30,12,30,425,9,30,1,31,1,31,1,31,1,32,1,32,1,32,1,
        32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,3,32,441,8,32,1,33,1,33,1,
        33,3,33,446,8,33,1,34,1,34,1,34,1,34,1,34,3,34,453,8,34,1,35,1,35,
        1,35,3,35,458,8,35,1,35,1,35,1,36,1,36,1,36,1,36,3,36,466,8,36,1,
        37,1,37,1,37,1,37,1,37,1,38,1,38,1,38,3,38,476,8,38,1,39,1,39,1,
        39,1,39,3,39,482,8,39,1,40,1,40,1,40,1,40,1,41,1,41,1,41,1,41,1,
        41,3,41,493,8,41,1,42,1,42,1,42,1,42,3,42,499,8,42,1,42,1,42,1,42,
        1,42,1,42,3,42,506,8,42,5,42,508,8,42,10,42,12,42,511,9,42,1,43,
        1,43,1,43,1,43,3,43,517,8,43,1,44,1,44,1,44,3,44,522,8,44,1,44,1,
        44,1,44,1,44,3,44,528,8,44,5,44,530,8,44,10,44,12,44,533,9,44,1,
        45,1,45,1,45,1,45,1,45,1,45,1,45,1,45,1,45,1,45,1,45,1,45,1,45,1,
        45,1,45,3,45,550,8,45,1,45,1,45,1,46,1,46,1,46,1,46,1,46,1,46,1,
        46,5,46,561,8,46,10,46,12,46,564,9,46,1,47,1,47,1,47,1,47,1,48,1,
        48,1,48,1,48,1,49,1,49,1,50,1,50,1,50,1,50,3,50,580,8,50,1,51,1,
        51,1,51,3,51,585,8,51,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,53,1,
        53,1,53,1,53,1,53,1,53,1,53,1,53,1,53,1,53,1,53,3,53,605,8,53,1,
        54,1,54,1,54,1,54,1,54,1,54,1,54,1,54,1,54,1,54,1,54,1,54,1,54,1,
        54,1,54,1,54,3,54,623,8,54,1,54,1,54,1,54,1,54,1,54,1,54,3,54,631,
        8,54,1,55,1,55,1,55,3,55,636,8,55,1,56,1,56,1,57,1,57,1,58,1,58,
        3,58,644,8,58,1,59,1,59,1,60,1,60,1,61,1,61,1,61,1,61,3,61,654,8,
        61,1,61,1,61,1,61,1,62,1,62,1,62,1,62,3,62,663,8,62,1,63,1,63,1,
        63,1,63,1,63,1,64,1,64,1,64,3,64,673,8,64,1,65,1,65,1,66,1,66,1,
        66,3,66,680,8,66,1,67,1,67,1,68,1,68,1,68,1,68,1,68,1,68,1,69,1,
        69,1,69,1,69,1,70,1,70,1,70,3,70,697,8,70,1,70,1,70,3,70,701,8,70,
        1,71,1,71,3,71,705,8,71,1,72,1,72,1,72,1,72,1,72,3,72,712,8,72,1,
        72,1,72,1,72,1,73,1,73,1,73,1,73,3,73,721,8,73,1,73,3,73,724,8,73,
        1,74,1,74,1,74,1,75,1,75,1,75,1,75,1,75,3,75,734,8,75,1,75,1,75,
        1,75,1,76,1,76,1,76,3,76,742,8,76,1,76,1,76,3,76,746,8,76,1,76,1,
        76,3,76,750,8,76,1,76,3,76,753,8,76,1,77,1,77,1,77,1,77,1,77,1,77,
        3,77,761,8,77,1,78,1,78,1,78,1,78,3,78,767,8,78,1,79,1,79,1,79,3,
        79,772,8,79,1,80,1,80,1,80,3,80,777,8,80,1,80,1,80,1,81,1,81,1,81,
        1,81,3,81,785,8,81,1,81,1,81,3,81,789,8,81,1,81,1,81,1,82,1,82,1,
        82,1,82,1,82,1,82,1,82,1,82,3,82,801,8,82,1,82,1,82,3,82,805,8,82,
        1,82,1,82,1,83,1,83,3,83,811,8,83,1,83,1,83,1,83,1,83,0,17,4,8,14,
        16,18,20,22,26,28,52,54,56,58,60,84,88,92,84,0,2,4,6,8,10,12,14,
        16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,54,56,58,
        60,62,64,66,68,70,72,74,76,78,80,82,84,86,88,90,92,94,96,98,100,
        102,104,106,108,110,112,114,116,118,120,122,124,126,128,130,132,
        134,136,138,140,142,144,146,148,150,152,154,156,158,160,162,164,
        166,0,7,1,0,28,33,1,0,23,24,1,0,25,27,1,0,54,57,1,0,38,43,1,0,37,
        38,1,0,9,12,862,0,168,1,0,0,0,2,174,1,0,0,0,4,176,1,0,0,0,6,197,
        1,0,0,0,8,201,1,0,0,0,10,213,1,0,0,0,12,215,1,0,0,0,14,217,1,0,0,
        0,16,228,1,0,0,0,18,239,1,0,0,0,20,250,1,0,0,0,22,261,1,0,0,0,24,
        272,1,0,0,0,26,277,1,0,0,0,28,292,1,0,0,0,30,316,1,0,0,0,32,323,
        1,0,0,0,34,333,1,0,0,0,36,335,1,0,0,0,38,348,1,0,0,0,40,352,1,0,
        0,0,42,354,1,0,0,0,44,358,1,0,0,0,46,360,1,0,0,0,48,363,1,0,0,0,
        50,369,1,0,0,0,52,371,1,0,0,0,54,382,1,0,0,0,56,393,1,0,0,0,58,404,
        1,0,0,0,60,415,1,0,0,0,62,426,1,0,0,0,64,440,1,0,0,0,66,445,1,0,
        0,0,68,452,1,0,0,0,70,454,1,0,0,0,72,461,1,0,0,0,74,467,1,0,0,0,
        76,475,1,0,0,0,78,481,1,0,0,0,80,483,1,0,0,0,82,487,1,0,0,0,84,498,
        1,0,0,0,86,512,1,0,0,0,88,521,1,0,0,0,90,549,1,0,0,0,92,553,1,0,
        0,0,94,565,1,0,0,0,96,569,1,0,0,0,98,573,1,0,0,0,100,575,1,0,0,0,
        102,584,1,0,0,0,104,586,1,0,0,0,106,604,1,0,0,0,108,630,1,0,0,0,
        110,635,1,0,0,0,112,637,1,0,0,0,114,639,1,0,0,0,116,641,1,0,0,0,
        118,645,1,0,0,0,120,647,1,0,0,0,122,649,1,0,0,0,124,658,1,0,0,0,
        126,664,1,0,0,0,128,672,1,0,0,0,130,674,1,0,0,0,132,676,1,0,0,0,
        134,681,1,0,0,0,136,683,1,0,0,0,138,689,1,0,0,0,140,693,1,0,0,0,
        142,704,1,0,0,0,144,706,1,0,0,0,146,720,1,0,0,0,148,725,1,0,0,0,
        150,728,1,0,0,0,152,749,1,0,0,0,154,754,1,0,0,0,156,766,1,0,0,0,
        158,768,1,0,0,0,160,773,1,0,0,0,162,780,1,0,0,0,164,792,1,0,0,0,
        166,808,1,0,0,0,168,169,3,2,1,0,169,170,5,0,0,1,170,1,1,0,0,0,171,
        172,5,21,0,0,172,175,3,2,1,0,173,175,3,4,2,0,174,171,1,0,0,0,174,
        173,1,0,0,0,175,3,1,0,0,0,176,177,6,2,-1,0,177,178,3,6,3,0,178,185,
        1,0,0,0,179,180,10,2,0,0,180,184,5,21,0,0,181,182,10,1,0,0,182,184,
        3,6,3,0,183,179,1,0,0,0,183,181,1,0,0,0,184,187,1,0,0,0,185,183,
        1,0,0,0,185,186,1,0,0,0,186,5,1,0,0,0,187,185,1,0,0,0,188,198,3,
        144,72,0,189,198,3,150,75,0,190,198,3,126,63,0,191,198,3,122,61,
        0,192,198,3,138,69,0,193,198,3,136,68,0,194,198,3,124,62,0,195,198,
        3,162,81,0,196,198,3,164,82,0,197,188,1,0,0,0,197,189,1,0,0,0,197,
        190,1,0,0,0,197,191,1,0,0,0,197,192,1,0,0,0,197,193,1,0,0,0,197,
        194,1,0,0,0,197,195,1,0,0,0,197,196,1,0,0,0,198,199,1,0,0,0,199,
        200,3,10,5,0,200,7,1,0,0,0,201,202,6,4,-1,0,202,203,5,21,0,0,203,
        208,1,0,0,0,204,205,10,1,0,0,205,207,5,21,0,0,206,204,1,0,0,0,207,
        210,1,0,0,0,208,206,1,0,0,0,208,209,1,0,0,0,209,9,1,0,0,0,210,208,
        1,0,0,0,211,214,5,46,0,0,212,214,3,8,4,0,213,211,1,0,0,0,213,212,
        1,0,0,0,214,11,1,0,0,0,215,216,3,14,7,0,216,13,1,0,0,0,217,218,6,
        7,-1,0,218,219,3,16,8,0,219,225,1,0,0,0,220,221,10,2,0,0,221,222,
        5,35,0,0,222,224,3,16,8,0,223,220,1,0,0,0,224,227,1,0,0,0,225,223,
        1,0,0,0,225,226,1,0,0,0,226,15,1,0,0,0,227,225,1,0,0,0,228,229,6,
        8,-1,0,229,230,3,18,9,0,230,236,1,0,0,0,231,232,10,2,0,0,232,233,
        5,34,0,0,233,235,3,18,9,0,234,231,1,0,0,0,235,238,1,0,0,0,236,234,
        1,0,0,0,236,237,1,0,0,0,237,17,1,0,0,0,238,236,1,0,0,0,239,240,6,
        9,-1,0,240,241,3,20,10,0,241,247,1,0,0,0,242,243,10,2,0,0,243,244,
        7,0,0,0,244,246,3,20,10,0,245,242,1,0,0,0,246,249,1,0,0,0,247,245,
        1,0,0,0,247,248,1,0,0,0,248,19,1,0,0,0,249,247,1,0,0,0,250,251,6,
        10,-1,0,251,252,3,22,11,0,252,258,1,0,0,0,253,254,10,2,0,0,254,255,
        7,1,0,0,255,257,3,22,11,0,256,253,1,0,0,0,257,260,1,0,0,0,258,256,
        1,0,0,0,258,259,1,0,0,0,259,21,1,0,0,0,260,258,1,0,0,0,261,262,6,
        11,-1,0,262,263,3,24,12,0,263,269,1,0,0,0,264,265,10,2,0,0,265,266,
        7,2,0,0,266,268,3,24,12,0,267,264,1,0,0,0,268,271,1,0,0,0,269,267,
        1,0,0,0,269,270,1,0,0,0,270,23,1,0,0,0,271,269,1,0,0,0,272,275,3,
        68,34,0,273,276,3,26,13,0,274,276,3,28,14,0,275,273,1,0,0,0,275,
        274,1,0,0,0,276,25,1,0,0,0,277,278,6,13,-1,0,278,279,3,28,14,0,279,
        289,1,0,0,0,280,281,10,2,0,0,281,285,5,44,0,0,282,286,5,22,0,0,283,
        286,3,160,80,0,284,286,3,46,23,0,285,282,1,0,0,0,285,283,1,0,0,0,
        285,284,1,0,0,0,286,288,1,0,0,0,287,280,1,0,0,0,288,291,1,0,0,0,
        289,287,1,0,0,0,289,290,1,0,0,0,290,27,1,0,0,0,291,289,1,0,0,0,292,
        293,6,14,-1,0,293,294,3,30,15,0,294,302,1,0,0,0,295,296,10,2,0,0,
        296,297,5,52,0,0,297,298,3,50,25,0,298,299,5,53,0,0,299,301,1,0,
        0,0,300,295,1,0,0,0,301,304,1,0,0,0,302,300,1,0,0,0,302,303,1,0,
        0,0,303,29,1,0,0,0,304,302,1,0,0,0,305,317,3,32,16,0,306,307,5,48,
        0,0,307,308,3,12,6,0,308,309,5,49,0,0,309,317,1,0,0,0,310,317,5,
        22,0,0,311,317,3,160,80,0,312,317,3,70,35,0,313,317,3,74,37,0,314,
        317,3,82,41,0,315,317,3,86,43,0,316,305,1,0,0,0,316,306,1,0,0,0,
        316,310,1,0,0,0,316,311,1,0,0,0,316,312,1,0,0,0,316,313,1,0,0,0,
        316,314,1,0,0,0,316,315,1,0,0,0,317,31,1,0,0,0,318,324,3,44,22,0,
        319,324,5,19,0,0,320,324,5,20,0,0,321,324,5,18,0,0,322,324,5,60,
        0,0,323,318,1,0,0,0,323,319,1,0,0,0,323,320,1,0,0,0,323,321,1,0,
        0,0,323,322,1,0,0,0,324,33,1,0,0,0,325,334,3,42,21,0,326,334,5,58,
        0,0,327,334,5,60,0,0,328,334,5,19,0,0,329,334,5,20,0,0,330,334,5,
        18,0,0,331,334,3,74,37,0,332,334,5,22,0,0,333,325,1,0,0,0,333,326,
        1,0,0,0,333,327,1,0,0,0,333,328,1,0,0,0,333,329,1,0,0,0,333,330,
        1,0,0,0,333,331,1,0,0,0,333,332,1,0,0,0,334,35,1,0,0,0,335,336,5,
        50,0,0,336,337,3,38,19,0,337,338,5,51,0,0,338,37,1,0,0,0,339,349,
        3,34,17,0,340,349,3,36,18,0,341,344,3,34,17,0,342,344,3,36,18,0,
        343,341,1,0,0,0,343,342,1,0,0,0,344,345,1,0,0,0,345,346,5,45,0,0,
        346,347,3,38,19,0,347,349,1,0,0,0,348,339,1,0,0,0,348,340,1,0,0,
        0,348,343,1,0,0,0,349,39,1,0,0,0,350,353,3,70,35,0,351,353,3,74,
        37,0,352,350,1,0,0,0,352,351,1,0,0,0,353,41,1,0,0,0,354,355,7,3,
        0,0,355,43,1,0,0,0,356,359,3,42,21,0,357,359,5,58,0,0,358,356,1,
        0,0,0,358,357,1,0,0,0,359,45,1,0,0,0,360,361,3,66,33,0,361,362,3,
        48,24,0,362,47,1,0,0,0,363,364,5,52,0,0,364,365,3,50,25,0,365,367,
        5,53,0,0,366,368,3,48,24,0,367,366,1,0,0,0,367,368,1,0,0,0,368,49,
        1,0,0,0,369,370,3,52,26,0,370,51,1,0,0,0,371,372,6,26,-1,0,372,373,
        3,54,27,0,373,379,1,0,0,0,374,375,10,2,0,0,375,376,5,35,0,0,376,
        378,3,54,27,0,377,374,1,0,0,0,378,381,1,0,0,0,379,377,1,0,0,0,379,
        380,1,0,0,0,380,53,1,0,0,0,381,379,1,0,0,0,382,383,6,27,-1,0,383,
        384,3,56,28,0,384,390,1,0,0,0,385,386,10,2,0,0,386,387,5,34,0,0,
        387,389,3,56,28,0,388,385,1,0,0,0,389,392,1,0,0,0,390,388,1,0,0,
        0,390,391,1,0,0,0,391,55,1,0,0,0,392,390,1,0,0,0,393,394,6,28,-1,
        0,394,395,3,58,29,0,395,401,1,0,0,0,396,397,10,2,0,0,397,398,7,0,
        0,0,398,400,3,58,29,0,399,396,1,0,0,0,400,403,1,0,0,0,401,399,1,
        0,0,0,401,402,1,0,0,0,402,57,1,0,0,0,403,401,1,0,0,0,404,405,6,29,
        -1,0,405,406,3,60,30,0,406,412,1,0,0,0,407,408,10,2,0,0,408,409,
        7,1,0,0,409,411,3,60,30,0,410,407,1,0,0,0,411,414,1,0,0,0,412,410,
        1,0,0,0,412,413,1,0,0,0,413,59,1,0,0,0,414,412,1,0,0,0,415,416,6,
        30,-1,0,416,417,3,62,31,0,417,423,1,0,0,0,418,419,10,2,0,0,419,420,
        7,2,0,0,420,422,3,62,31,0,421,418,1,0,0,0,422,425,1,0,0,0,423,421,
        1,0,0,0,423,424,1,0,0,0,424,61,1,0,0,0,425,423,1,0,0,0,426,427,3,
        68,34,0,427,428,3,64,32,0,428,63,1,0,0,0,429,441,3,66,33,0,430,441,
        3,46,23,0,431,441,3,42,21,0,432,433,5,48,0,0,433,434,3,50,25,0,434,
        435,5,49,0,0,435,441,1,0,0,0,436,441,3,70,35,0,437,441,3,74,37,0,
        438,441,3,82,41,0,439,441,3,86,43,0,440,429,1,0,0,0,440,430,1,0,
        0,0,440,431,1,0,0,0,440,432,1,0,0,0,440,436,1,0,0,0,440,437,1,0,
        0,0,440,438,1,0,0,0,440,439,1,0,0,0,441,65,1,0,0,0,442,446,5,22,
        0,0,443,446,5,60,0,0,444,446,3,160,80,0,445,442,1,0,0,0,445,443,
        1,0,0,0,445,444,1,0,0,0,446,67,1,0,0,0,447,453,1,0,0,0,448,449,5,
        24,0,0,449,453,3,68,34,0,450,451,5,36,0,0,451,453,3,68,34,0,452,
        447,1,0,0,0,452,448,1,0,0,0,452,450,1,0,0,0,453,69,1,0,0,0,454,457,
        3,72,36,0,455,458,3,130,65,0,456,458,3,134,67,0,457,455,1,0,0,0,
        457,456,1,0,0,0,458,459,1,0,0,0,459,460,3,36,18,0,460,71,1,0,0,0,
        461,462,5,52,0,0,462,463,3,50,25,0,463,465,5,53,0,0,464,466,3,72,
        36,0,465,464,1,0,0,0,465,466,1,0,0,0,466,73,1,0,0,0,467,468,5,22,
        0,0,468,469,5,50,0,0,469,470,3,76,38,0,470,471,5,51,0,0,471,75,1,
        0,0,0,472,473,3,80,40,0,473,474,3,78,39,0,474,476,1,0,0,0,475,472,
        1,0,0,0,475,476,1,0,0,0,476,77,1,0,0,0,477,478,5,45,0,0,478,479,
        3,80,40,0,479,480,3,78,39,0,480,482,1,0,0,0,481,477,1,0,0,0,481,
        482,1,0,0,0,482,79,1,0,0,0,483,484,5,22,0,0,484,485,5,47,0,0,485,
        486,3,12,6,0,486,81,1,0,0,0,487,488,3,84,42,0,488,492,5,44,0,0,489,
        493,5,22,0,0,490,493,3,160,80,0,491,493,3,46,23,0,492,489,1,0,0,
        0,492,490,1,0,0,0,492,491,1,0,0,0,493,83,1,0,0,0,494,495,6,42,-1,
        0,495,499,5,22,0,0,496,499,3,160,80,0,497,499,3,46,23,0,498,494,
        1,0,0,0,498,496,1,0,0,0,498,497,1,0,0,0,499,509,1,0,0,0,500,501,
        10,4,0,0,501,505,5,44,0,0,502,506,5,22,0,0,503,506,3,160,80,0,504,
        506,3,46,23,0,505,502,1,0,0,0,505,503,1,0,0,0,505,504,1,0,0,0,506,
        508,1,0,0,0,507,500,1,0,0,0,508,511,1,0,0,0,509,507,1,0,0,0,509,
        510,1,0,0,0,510,85,1,0,0,0,511,509,1,0,0,0,512,513,3,88,44,0,513,
        516,5,44,0,0,514,517,5,22,0,0,515,517,3,46,23,0,516,514,1,0,0,0,
        516,515,1,0,0,0,517,87,1,0,0,0,518,519,6,44,-1,0,519,522,5,22,0,
        0,520,522,3,46,23,0,521,518,1,0,0,0,521,520,1,0,0,0,522,531,1,0,
        0,0,523,524,10,3,0,0,524,527,5,44,0,0,525,528,5,22,0,0,526,528,3,
        46,23,0,527,525,1,0,0,0,527,526,1,0,0,0,528,530,1,0,0,0,529,523,
        1,0,0,0,530,533,1,0,0,0,531,529,1,0,0,0,531,532,1,0,0,0,532,89,1,
        0,0,0,533,531,1,0,0,0,534,550,3,46,23,0,535,550,3,82,41,0,536,550,
        3,86,43,0,537,550,3,126,63,0,538,550,3,122,61,0,539,550,3,138,69,
        0,540,550,3,136,68,0,541,550,3,124,62,0,542,550,3,120,60,0,543,550,
        3,118,59,0,544,550,3,104,52,0,545,550,3,108,54,0,546,550,3,94,47,
        0,547,550,3,160,80,0,548,550,3,116,58,0,549,534,1,0,0,0,549,535,
        1,0,0,0,549,536,1,0,0,0,549,537,1,0,0,0,549,538,1,0,0,0,549,539,
        1,0,0,0,549,540,1,0,0,0,549,541,1,0,0,0,549,542,1,0,0,0,549,543,
        1,0,0,0,549,544,1,0,0,0,549,545,1,0,0,0,549,546,1,0,0,0,549,547,
        1,0,0,0,549,548,1,0,0,0,550,551,1,0,0,0,551,552,3,10,5,0,552,91,
        1,0,0,0,553,554,6,46,-1,0,554,555,3,90,45,0,555,562,1,0,0,0,556,
        557,10,2,0,0,557,561,3,90,45,0,558,559,10,1,0,0,559,561,5,21,0,0,
        560,556,1,0,0,0,560,558,1,0,0,0,561,564,1,0,0,0,562,560,1,0,0,0,
        562,563,1,0,0,0,563,93,1,0,0,0,564,562,1,0,0,0,565,566,3,102,51,
        0,566,567,3,98,49,0,567,568,3,12,6,0,568,95,1,0,0,0,569,570,5,22,
        0,0,570,571,3,98,49,0,571,572,3,12,6,0,572,97,1,0,0,0,573,574,7,
        4,0,0,574,99,1,0,0,0,575,576,3,102,51,0,576,579,7,5,0,0,577,580,
        3,12,6,0,578,580,3,74,37,0,579,577,1,0,0,0,579,578,1,0,0,0,580,101,
        1,0,0,0,581,585,5,22,0,0,582,585,3,46,23,0,583,585,3,86,43,0,584,
        581,1,0,0,0,584,582,1,0,0,0,584,583,1,0,0,0,585,103,1,0,0,0,586,
        587,5,1,0,0,587,588,5,48,0,0,588,589,3,12,6,0,589,590,5,49,0,0,590,
        591,3,166,83,0,591,592,3,106,53,0,592,105,1,0,0,0,593,594,5,2,0,
        0,594,595,5,1,0,0,595,596,5,48,0,0,596,597,3,12,6,0,597,598,5,49,
        0,0,598,599,3,166,83,0,599,600,3,106,53,0,600,605,1,0,0,0,601,602,
        5,2,0,0,602,605,3,166,83,0,603,605,1,0,0,0,604,593,1,0,0,0,604,601,
        1,0,0,0,604,603,1,0,0,0,605,107,1,0,0,0,606,607,5,3,0,0,607,608,
        3,110,55,0,608,609,5,46,0,0,609,610,3,12,6,0,610,611,5,46,0,0,611,
        612,3,112,56,0,612,613,3,166,83,0,613,631,1,0,0,0,614,615,5,3,0,
        0,615,616,5,22,0,0,616,617,5,45,0,0,617,618,5,22,0,0,618,619,5,38,
        0,0,619,622,5,17,0,0,620,623,3,30,15,0,621,623,3,46,23,0,622,620,
        1,0,0,0,622,621,1,0,0,0,623,624,1,0,0,0,624,625,3,166,83,0,625,631,
        1,0,0,0,626,627,5,3,0,0,627,628,3,12,6,0,628,629,3,166,83,0,629,
        631,1,0,0,0,630,606,1,0,0,0,630,614,1,0,0,0,630,626,1,0,0,0,631,
        109,1,0,0,0,632,636,3,122,61,0,633,636,3,96,48,0,634,636,3,136,68,
        0,635,632,1,0,0,0,635,633,1,0,0,0,635,634,1,0,0,0,636,111,1,0,0,
        0,637,638,3,96,48,0,638,113,1,0,0,0,639,640,3,12,6,0,640,115,1,0,
        0,0,641,643,5,4,0,0,642,644,3,12,6,0,643,642,1,0,0,0,643,644,1,0,
        0,0,644,117,1,0,0,0,645,646,5,15,0,0,646,119,1,0,0,0,647,648,5,16,
        0,0,648,121,1,0,0,0,649,650,5,14,0,0,650,653,5,22,0,0,651,654,3,
        130,65,0,652,654,3,134,67,0,653,651,1,0,0,0,653,652,1,0,0,0,653,
        654,1,0,0,0,654,655,1,0,0,0,655,656,5,37,0,0,656,657,3,12,6,0,657,
        123,1,0,0,0,658,659,5,14,0,0,659,662,5,22,0,0,660,663,3,130,65,0,
        661,663,3,134,67,0,662,660,1,0,0,0,662,661,1,0,0,0,663,125,1,0,0,
        0,664,665,5,13,0,0,665,666,5,22,0,0,666,667,5,37,0,0,667,668,3,12,
        6,0,668,127,1,0,0,0,669,673,3,130,65,0,670,673,3,134,67,0,671,673,
        3,132,66,0,672,669,1,0,0,0,672,670,1,0,0,0,672,671,1,0,0,0,673,129,
        1,0,0,0,674,675,7,6,0,0,675,131,1,0,0,0,676,679,3,140,70,0,677,680,
        3,130,65,0,678,680,3,134,67,0,679,677,1,0,0,0,679,678,1,0,0,0,680,
        133,1,0,0,0,681,682,5,22,0,0,682,135,1,0,0,0,683,684,5,14,0,0,684,
        685,5,22,0,0,685,686,3,132,66,0,686,687,5,37,0,0,687,688,3,142,71,
        0,688,137,1,0,0,0,689,690,5,14,0,0,690,691,5,22,0,0,691,692,3,132,
        66,0,692,139,1,0,0,0,693,696,5,52,0,0,694,697,3,42,21,0,695,697,
        5,22,0,0,696,694,1,0,0,0,696,695,1,0,0,0,697,698,1,0,0,0,698,700,
        5,53,0,0,699,701,3,140,70,0,700,699,1,0,0,0,700,701,1,0,0,0,701,
        141,1,0,0,0,702,705,3,70,35,0,703,705,3,12,6,0,704,702,1,0,0,0,704,
        703,1,0,0,0,705,143,1,0,0,0,706,707,5,6,0,0,707,708,5,22,0,0,708,
        709,5,7,0,0,709,711,5,50,0,0,710,712,3,8,4,0,711,710,1,0,0,0,711,
        712,1,0,0,0,712,713,1,0,0,0,713,714,3,146,73,0,714,715,5,51,0,0,
        715,145,1,0,0,0,716,717,3,148,74,0,717,718,3,10,5,0,718,721,1,0,
        0,0,719,721,5,21,0,0,720,716,1,0,0,0,720,719,1,0,0,0,721,723,1,0,
        0,0,722,724,3,146,73,0,723,722,1,0,0,0,723,724,1,0,0,0,724,147,1,
        0,0,0,725,726,5,22,0,0,726,727,3,128,64,0,727,149,1,0,0,0,728,729,
        5,6,0,0,729,730,5,22,0,0,730,731,5,8,0,0,731,733,5,50,0,0,732,734,
        3,8,4,0,733,732,1,0,0,0,733,734,1,0,0,0,734,735,1,0,0,0,735,736,
        3,152,76,0,736,737,5,51,0,0,737,151,1,0,0,0,738,739,5,22,0,0,739,
        741,5,48,0,0,740,742,3,154,77,0,741,740,1,0,0,0,741,742,1,0,0,0,
        742,743,1,0,0,0,743,745,5,49,0,0,744,746,3,128,64,0,745,744,1,0,
        0,0,745,746,1,0,0,0,746,747,1,0,0,0,747,750,3,10,5,0,748,750,5,21,
        0,0,749,738,1,0,0,0,749,748,1,0,0,0,750,752,1,0,0,0,751,753,3,152,
        76,0,752,751,1,0,0,0,752,753,1,0,0,0,753,153,1,0,0,0,754,755,5,22,
        0,0,755,756,3,156,78,0,756,757,3,128,64,0,757,760,1,0,0,0,758,759,
        5,45,0,0,759,761,3,154,77,0,760,758,1,0,0,0,760,761,1,0,0,0,761,
        155,1,0,0,0,762,763,5,45,0,0,763,764,5,22,0,0,764,767,3,156,78,0,
        765,767,1,0,0,0,766,762,1,0,0,0,766,765,1,0,0,0,767,157,1,0,0,0,
        768,771,3,12,6,0,769,770,5,45,0,0,770,772,3,158,79,0,771,769,1,0,
        0,0,771,772,1,0,0,0,772,159,1,0,0,0,773,774,5,22,0,0,774,776,5,48,
        0,0,775,777,3,158,79,0,776,775,1,0,0,0,776,777,1,0,0,0,777,778,1,
        0,0,0,778,779,5,49,0,0,779,161,1,0,0,0,780,781,5,5,0,0,781,782,5,
        22,0,0,782,784,5,48,0,0,783,785,3,154,77,0,784,783,1,0,0,0,784,785,
        1,0,0,0,785,786,1,0,0,0,786,788,5,49,0,0,787,789,3,128,64,0,788,
        787,1,0,0,0,788,789,1,0,0,0,789,790,1,0,0,0,790,791,3,166,83,0,791,
        163,1,0,0,0,792,793,5,5,0,0,793,794,5,48,0,0,794,795,5,22,0,0,795,
        796,3,134,67,0,796,797,5,49,0,0,797,798,5,22,0,0,798,800,5,48,0,
        0,799,801,3,154,77,0,800,799,1,0,0,0,800,801,1,0,0,0,801,802,1,0,
        0,0,802,804,5,49,0,0,803,805,3,128,64,0,804,803,1,0,0,0,804,805,
        1,0,0,0,805,806,1,0,0,0,806,807,3,166,83,0,807,165,1,0,0,0,808,810,
        5,50,0,0,809,811,5,21,0,0,810,809,1,0,0,0,810,811,1,0,0,0,811,812,
        1,0,0,0,812,813,3,92,46,0,813,814,5,51,0,0,814,167,1,0,0,0,77,174,
        183,185,197,208,213,225,236,247,258,269,275,285,289,302,316,323,
        333,343,348,352,358,367,379,390,401,412,423,440,445,452,457,465,
        475,481,492,498,505,509,516,521,527,531,549,560,562,579,584,604,
        622,630,635,643,653,662,672,679,696,700,704,711,720,723,733,741,
        745,749,752,760,766,771,776,784,788,800,804,810
    ]

class MiniGoParser ( Parser ):

    grammarFileName = "MiniGo.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "'if'", "'else'", "'for'", "'return'", 
                     "'func'", "'type'", "'struct'", "'interface'", "'string'", 
                     "'int'", "'float'", "'boolean'", "'const'", "'var'", 
                     "'continue'", "'break'", "'range'", "'nil'", "'true'", 
                     "'false'", "<INVALID>", "<INVALID>", "'+'", "'-'", 
                     "'*'", "'/'", "'%'", "'=='", "'!='", "'<'", "'<='", 
                     "'>'", "'>='", "'&&'", "'||'", "'!'", "'='", "':='", 
                     "'+='", "'-='", "'*='", "'/='", "'%='", "'.'", "','", 
                     "';'", "':'", "'('", "')'", "'{'", "'}'", "'['", "']'" ]

    symbolicNames = [ "<INVALID>", "IF", "ELSE", "FOR", "RETURN", "FUNC", 
                      "TYPE", "STRUCT", "INTERFACE", "STRING", "INT", "FLOAT", 
                      "BOOLEAN", "CONST", "VAR", "CONTINUE", "BREAK", "RANGE", 
                      "NIL", "TRUE", "FALSE", "NEWLINE", "ID", "ADD", "SUB", 
                      "MUL", "DIV", "MOD", "EQ", "NEQ", "LT", "LE", "GT", 
                      "GE", "AND", "OR", "NOT", "ASSIGN", "SHORT_ASSIGN", 
                      "ADD_ASSIGN", "SUB_ASSIGN", "MUL_ASSIGN", "DIV_ASSIGN", 
                      "MOD_ASSIGN", "DOT", "COMMA", "SEMICOLON", "COLON", 
                      "LPAREN", "RPAREN", "LBRACE", "RBRACE", "LBRACKET", 
                      "RBRACKET", "INT_LIT", "HEX_LIT", "OCT_LIT", "BIN_LIT", 
                      "FLOAT_LIT", "WS", "STRING_LIT", "LINE_COMMENT", "BLOCK_COMMENT", 
                      "ERROR_CHAR", "ILLEGAL_ESCAPE", "UNCLOSE_STRING" ]

    RULE_program = 0
    RULE_program_list = 1
    RULE_decl_or_stmt = 2
    RULE_decl = 3
    RULE_newlines = 4
    RULE_eos = 5
    RULE_expr = 6
    RULE_logical_or_expr = 7
    RULE_logical_and_expr = 8
    RULE_relational_expr = 9
    RULE_additive_expr = 10
    RULE_multiplicative_expr = 11
    RULE_primary_expr = 12
    RULE_field_access = 13
    RULE_atom_arr_access = 14
    RULE_atom = 15
    RULE_atom_value = 16
    RULE_arr_allow_lit = 17
    RULE_arr_init_list = 18
    RULE_arr_init_list_body = 19
    RULE_literal = 20
    RULE_int_number = 21
    RULE_number = 22
    RULE_array_access = 23
    RULE_array_access_tail = 24
    RULE_index_expr = 25
    RULE_logical_index_or_expr = 26
    RULE_logical_index_and_expr = 27
    RULE_relational_index_expr = 28
    RULE_additive_index_expr = 29
    RULE_multiplicative_index_expr = 30
    RULE_signed_index_expr = 31
    RULE_primary_index_expr = 32
    RULE_secondary_index_expr = 33
    RULE_signed_tail = 34
    RULE_array_literal = 35
    RULE_array_literal_tail3 = 36
    RULE_struct_literal = 37
    RULE_struct_literal_tail = 38
    RULE_struct_literal_tail2 = 39
    RULE_field_init = 40
    RULE_struct_field_access = 41
    RULE_struct_field_access_head = 42
    RULE_struct_field_access_no_func = 43
    RULE_struct_field_access_no_func_head = 44
    RULE_stmt_in_block = 45
    RULE_stmt_list = 46
    RULE_assignment_stmt = 47
    RULE_assignment_stmt_scalar = 48
    RULE_assignment_operator = 49
    RULE_assignment_expr = 50
    RULE_lhs = 51
    RULE_if_stmt = 52
    RULE_if_stmt_tail = 53
    RULE_for_stmt = 54
    RULE_for_init = 55
    RULE_for_update = 56
    RULE_for_condition = 57
    RULE_return_stmt = 58
    RULE_continue_stmt = 59
    RULE_break_stmt = 60
    RULE_var_decl = 61
    RULE_var_decl_no_init = 62
    RULE_const_decl = 63
    RULE_types = 64
    RULE_primitiveType = 65
    RULE_arrayType = 66
    RULE_compositeType = 67
    RULE_array_decl_with_init = 68
    RULE_array_decl = 69
    RULE_dimensions = 70
    RULE_array_init = 71
    RULE_struct_decl = 72
    RULE_field_decl_list = 73
    RULE_field_decl = 74
    RULE_interface_decl = 75
    RULE_method_in_decl = 76
    RULE_param_decl = 77
    RULE_param_decl_tail = 78
    RULE_param_call_list = 79
    RULE_function_call = 80
    RULE_func_decl = 81
    RULE_method_decl = 82
    RULE_block = 83

    ruleNames =  [ "program", "program_list", "decl_or_stmt", "decl", "newlines", 
                   "eos", "expr", "logical_or_expr", "logical_and_expr", 
                   "relational_expr", "additive_expr", "multiplicative_expr", 
                   "primary_expr", "field_access", "atom_arr_access", "atom", 
                   "atom_value", "arr_allow_lit", "arr_init_list", "arr_init_list_body", 
                   "literal", "int_number", "number", "array_access", "array_access_tail", 
                   "index_expr", "logical_index_or_expr", "logical_index_and_expr", 
                   "relational_index_expr", "additive_index_expr", "multiplicative_index_expr", 
                   "signed_index_expr", "primary_index_expr", "secondary_index_expr", 
                   "signed_tail", "array_literal", "array_literal_tail3", 
                   "struct_literal", "struct_literal_tail", "struct_literal_tail2", 
                   "field_init", "struct_field_access", "struct_field_access_head", 
                   "struct_field_access_no_func", "struct_field_access_no_func_head", 
                   "stmt_in_block", "stmt_list", "assignment_stmt", "assignment_stmt_scalar", 
                   "assignment_operator", "assignment_expr", "lhs", "if_stmt", 
                   "if_stmt_tail", "for_stmt", "for_init", "for_update", 
                   "for_condition", "return_stmt", "continue_stmt", "break_stmt", 
                   "var_decl", "var_decl_no_init", "const_decl", "types", 
                   "primitiveType", "arrayType", "compositeType", "array_decl_with_init", 
                   "array_decl", "dimensions", "array_init", "struct_decl", 
                   "field_decl_list", "field_decl", "interface_decl", "method_in_decl", 
                   "param_decl", "param_decl_tail", "param_call_list", "function_call", 
                   "func_decl", "method_decl", "block" ]

    EOF = Token.EOF
    IF=1
    ELSE=2
    FOR=3
    RETURN=4
    FUNC=5
    TYPE=6
    STRUCT=7
    INTERFACE=8
    STRING=9
    INT=10
    FLOAT=11
    BOOLEAN=12
    CONST=13
    VAR=14
    CONTINUE=15
    BREAK=16
    RANGE=17
    NIL=18
    TRUE=19
    FALSE=20
    NEWLINE=21
    ID=22
    ADD=23
    SUB=24
    MUL=25
    DIV=26
    MOD=27
    EQ=28
    NEQ=29
    LT=30
    LE=31
    GT=32
    GE=33
    AND=34
    OR=35
    NOT=36
    ASSIGN=37
    SHORT_ASSIGN=38
    ADD_ASSIGN=39
    SUB_ASSIGN=40
    MUL_ASSIGN=41
    DIV_ASSIGN=42
    MOD_ASSIGN=43
    DOT=44
    COMMA=45
    SEMICOLON=46
    COLON=47
    LPAREN=48
    RPAREN=49
    LBRACE=50
    RBRACE=51
    LBRACKET=52
    RBRACKET=53
    INT_LIT=54
    HEX_LIT=55
    OCT_LIT=56
    BIN_LIT=57
    FLOAT_LIT=58
    WS=59
    STRING_LIT=60
    LINE_COMMENT=61
    BLOCK_COMMENT=62
    ERROR_CHAR=63
    ILLEGAL_ESCAPE=64
    UNCLOSE_STRING=65

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.1")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None




    class ProgramContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def program_list(self):
            return self.getTypedRuleContext(MiniGoParser.Program_listContext,0)


        def EOF(self):
            return self.getToken(MiniGoParser.EOF, 0)

        def getRuleIndex(self):
            return MiniGoParser.RULE_program




    def program(self):

        localctx = MiniGoParser.ProgramContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_program)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 168
            self.program_list()
            self.state = 169
            self.match(MiniGoParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Program_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NEWLINE(self):
            return self.getToken(MiniGoParser.NEWLINE, 0)

        def program_list(self):
            return self.getTypedRuleContext(MiniGoParser.Program_listContext,0)


        def decl_or_stmt(self):
            return self.getTypedRuleContext(MiniGoParser.Decl_or_stmtContext,0)


        def getRuleIndex(self):
            return MiniGoParser.RULE_program_list




    def program_list(self):

        localctx = MiniGoParser.Program_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_program_list)
        try:
            self.state = 174
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [21]:
                self.enterOuterAlt(localctx, 1)
                self.state = 171
                self.match(MiniGoParser.NEWLINE)
                self.state = 172
                self.program_list()
                pass
            elif token in [5, 6, 13, 14]:
                self.enterOuterAlt(localctx, 2)
                self.state = 173
                self.decl_or_stmt(0)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Decl_or_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def decl(self):
            return self.getTypedRuleContext(MiniGoParser.DeclContext,0)


        def decl_or_stmt(self):
            return self.getTypedRuleContext(MiniGoParser.Decl_or_stmtContext,0)


        def NEWLINE(self):
            return self.getToken(MiniGoParser.NEWLINE, 0)

        def getRuleIndex(self):
            return MiniGoParser.RULE_decl_or_stmt



    def decl_or_stmt(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = MiniGoParser.Decl_or_stmtContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 4
        self.enterRecursionRule(localctx, 4, self.RULE_decl_or_stmt, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 177
            self.decl()
            self._ctx.stop = self._input.LT(-1)
            self.state = 185
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,2,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 183
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,1,self._ctx)
                    if la_ == 1:
                        localctx = MiniGoParser.Decl_or_stmtContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_decl_or_stmt)
                        self.state = 179
                        if not self.precpred(self._ctx, 2):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                        self.state = 180
                        self.match(MiniGoParser.NEWLINE)
                        pass

                    elif la_ == 2:
                        localctx = MiniGoParser.Decl_or_stmtContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_decl_or_stmt)
                        self.state = 181
                        if not self.precpred(self._ctx, 1):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                        self.state = 182
                        self.decl()
                        pass

             
                self.state = 187
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,2,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class DeclContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def eos(self):
            return self.getTypedRuleContext(MiniGoParser.EosContext,0)


        def struct_decl(self):
            return self.getTypedRuleContext(MiniGoParser.Struct_declContext,0)


        def interface_decl(self):
            return self.getTypedRuleContext(MiniGoParser.Interface_declContext,0)


        def const_decl(self):
            return self.getTypedRuleContext(MiniGoParser.Const_declContext,0)


        def var_decl(self):
            return self.getTypedRuleContext(MiniGoParser.Var_declContext,0)


        def array_decl(self):
            return self.getTypedRuleContext(MiniGoParser.Array_declContext,0)


        def array_decl_with_init(self):
            return self.getTypedRuleContext(MiniGoParser.Array_decl_with_initContext,0)


        def var_decl_no_init(self):
            return self.getTypedRuleContext(MiniGoParser.Var_decl_no_initContext,0)


        def func_decl(self):
            return self.getTypedRuleContext(MiniGoParser.Func_declContext,0)


        def method_decl(self):
            return self.getTypedRuleContext(MiniGoParser.Method_declContext,0)


        def getRuleIndex(self):
            return MiniGoParser.RULE_decl




    def decl(self):

        localctx = MiniGoParser.DeclContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_decl)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 197
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,3,self._ctx)
            if la_ == 1:
                self.state = 188
                self.struct_decl()
                pass

            elif la_ == 2:
                self.state = 189
                self.interface_decl()
                pass

            elif la_ == 3:
                self.state = 190
                self.const_decl()
                pass

            elif la_ == 4:
                self.state = 191
                self.var_decl()
                pass

            elif la_ == 5:
                self.state = 192
                self.array_decl()
                pass

            elif la_ == 6:
                self.state = 193
                self.array_decl_with_init()
                pass

            elif la_ == 7:
                self.state = 194
                self.var_decl_no_init()
                pass

            elif la_ == 8:
                self.state = 195
                self.func_decl()
                pass

            elif la_ == 9:
                self.state = 196
                self.method_decl()
                pass


            self.state = 199
            self.eos()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NewlinesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NEWLINE(self):
            return self.getToken(MiniGoParser.NEWLINE, 0)

        def newlines(self):
            return self.getTypedRuleContext(MiniGoParser.NewlinesContext,0)


        def getRuleIndex(self):
            return MiniGoParser.RULE_newlines



    def newlines(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = MiniGoParser.NewlinesContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 8
        self.enterRecursionRule(localctx, 8, self.RULE_newlines, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 202
            self.match(MiniGoParser.NEWLINE)
            self._ctx.stop = self._input.LT(-1)
            self.state = 208
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,4,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = MiniGoParser.NewlinesContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_newlines)
                    self.state = 204
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 205
                    self.match(MiniGoParser.NEWLINE) 
                self.state = 210
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,4,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class EosContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SEMICOLON(self):
            return self.getToken(MiniGoParser.SEMICOLON, 0)

        def newlines(self):
            return self.getTypedRuleContext(MiniGoParser.NewlinesContext,0)


        def getRuleIndex(self):
            return MiniGoParser.RULE_eos




    def eos(self):

        localctx = MiniGoParser.EosContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_eos)
        try:
            self.state = 213
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [46]:
                self.enterOuterAlt(localctx, 1)
                self.state = 211
                self.match(MiniGoParser.SEMICOLON)
                pass
            elif token in [21]:
                self.enterOuterAlt(localctx, 2)
                self.state = 212
                self.newlines(0)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def logical_or_expr(self):
            return self.getTypedRuleContext(MiniGoParser.Logical_or_exprContext,0)


        def getRuleIndex(self):
            return MiniGoParser.RULE_expr




    def expr(self):

        localctx = MiniGoParser.ExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_expr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 215
            self.logical_or_expr(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Logical_or_exprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def logical_and_expr(self):
            return self.getTypedRuleContext(MiniGoParser.Logical_and_exprContext,0)


        def logical_or_expr(self):
            return self.getTypedRuleContext(MiniGoParser.Logical_or_exprContext,0)


        def OR(self):
            return self.getToken(MiniGoParser.OR, 0)

        def getRuleIndex(self):
            return MiniGoParser.RULE_logical_or_expr



    def logical_or_expr(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = MiniGoParser.Logical_or_exprContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 14
        self.enterRecursionRule(localctx, 14, self.RULE_logical_or_expr, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 218
            self.logical_and_expr(0)
            self._ctx.stop = self._input.LT(-1)
            self.state = 225
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,6,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = MiniGoParser.Logical_or_exprContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_logical_or_expr)
                    self.state = 220
                    if not self.precpred(self._ctx, 2):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                    self.state = 221
                    self.match(MiniGoParser.OR)
                    self.state = 222
                    self.logical_and_expr(0) 
                self.state = 227
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,6,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class Logical_and_exprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def relational_expr(self):
            return self.getTypedRuleContext(MiniGoParser.Relational_exprContext,0)


        def logical_and_expr(self):
            return self.getTypedRuleContext(MiniGoParser.Logical_and_exprContext,0)


        def AND(self):
            return self.getToken(MiniGoParser.AND, 0)

        def getRuleIndex(self):
            return MiniGoParser.RULE_logical_and_expr



    def logical_and_expr(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = MiniGoParser.Logical_and_exprContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 16
        self.enterRecursionRule(localctx, 16, self.RULE_logical_and_expr, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 229
            self.relational_expr(0)
            self._ctx.stop = self._input.LT(-1)
            self.state = 236
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,7,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = MiniGoParser.Logical_and_exprContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_logical_and_expr)
                    self.state = 231
                    if not self.precpred(self._ctx, 2):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                    self.state = 232
                    self.match(MiniGoParser.AND)
                    self.state = 233
                    self.relational_expr(0) 
                self.state = 238
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,7,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class Relational_exprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def additive_expr(self):
            return self.getTypedRuleContext(MiniGoParser.Additive_exprContext,0)


        def relational_expr(self):
            return self.getTypedRuleContext(MiniGoParser.Relational_exprContext,0)


        def EQ(self):
            return self.getToken(MiniGoParser.EQ, 0)

        def NEQ(self):
            return self.getToken(MiniGoParser.NEQ, 0)

        def LT(self):
            return self.getToken(MiniGoParser.LT, 0)

        def LE(self):
            return self.getToken(MiniGoParser.LE, 0)

        def GT(self):
            return self.getToken(MiniGoParser.GT, 0)

        def GE(self):
            return self.getToken(MiniGoParser.GE, 0)

        def getRuleIndex(self):
            return MiniGoParser.RULE_relational_expr



    def relational_expr(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = MiniGoParser.Relational_exprContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 18
        self.enterRecursionRule(localctx, 18, self.RULE_relational_expr, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 240
            self.additive_expr(0)
            self._ctx.stop = self._input.LT(-1)
            self.state = 247
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,8,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = MiniGoParser.Relational_exprContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_relational_expr)
                    self.state = 242
                    if not self.precpred(self._ctx, 2):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                    self.state = 243
                    _la = self._input.LA(1)
                    if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 16911433728) != 0)):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 244
                    self.additive_expr(0) 
                self.state = 249
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,8,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class Additive_exprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def multiplicative_expr(self):
            return self.getTypedRuleContext(MiniGoParser.Multiplicative_exprContext,0)


        def additive_expr(self):
            return self.getTypedRuleContext(MiniGoParser.Additive_exprContext,0)


        def ADD(self):
            return self.getToken(MiniGoParser.ADD, 0)

        def SUB(self):
            return self.getToken(MiniGoParser.SUB, 0)

        def getRuleIndex(self):
            return MiniGoParser.RULE_additive_expr



    def additive_expr(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = MiniGoParser.Additive_exprContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 20
        self.enterRecursionRule(localctx, 20, self.RULE_additive_expr, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 251
            self.multiplicative_expr(0)
            self._ctx.stop = self._input.LT(-1)
            self.state = 258
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,9,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = MiniGoParser.Additive_exprContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_additive_expr)
                    self.state = 253
                    if not self.precpred(self._ctx, 2):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                    self.state = 254
                    _la = self._input.LA(1)
                    if not(_la==23 or _la==24):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 255
                    self.multiplicative_expr(0) 
                self.state = 260
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,9,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class Multiplicative_exprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def primary_expr(self):
            return self.getTypedRuleContext(MiniGoParser.Primary_exprContext,0)


        def multiplicative_expr(self):
            return self.getTypedRuleContext(MiniGoParser.Multiplicative_exprContext,0)


        def MUL(self):
            return self.getToken(MiniGoParser.MUL, 0)

        def DIV(self):
            return self.getToken(MiniGoParser.DIV, 0)

        def MOD(self):
            return self.getToken(MiniGoParser.MOD, 0)

        def getRuleIndex(self):
            return MiniGoParser.RULE_multiplicative_expr



    def multiplicative_expr(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = MiniGoParser.Multiplicative_exprContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 22
        self.enterRecursionRule(localctx, 22, self.RULE_multiplicative_expr, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 262
            self.primary_expr()
            self._ctx.stop = self._input.LT(-1)
            self.state = 269
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,10,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = MiniGoParser.Multiplicative_exprContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_multiplicative_expr)
                    self.state = 264
                    if not self.precpred(self._ctx, 2):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                    self.state = 265
                    _la = self._input.LA(1)
                    if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 234881024) != 0)):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 266
                    self.primary_expr() 
                self.state = 271
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,10,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class Primary_exprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def signed_tail(self):
            return self.getTypedRuleContext(MiniGoParser.Signed_tailContext,0)


        def field_access(self):
            return self.getTypedRuleContext(MiniGoParser.Field_accessContext,0)


        def atom_arr_access(self):
            return self.getTypedRuleContext(MiniGoParser.Atom_arr_accessContext,0)


        def getRuleIndex(self):
            return MiniGoParser.RULE_primary_expr




    def primary_expr(self):

        localctx = MiniGoParser.Primary_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_primary_expr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 272
            self.signed_tail()
            self.state = 275
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,11,self._ctx)
            if la_ == 1:
                self.state = 273
                self.field_access(0)
                pass

            elif la_ == 2:
                self.state = 274
                self.atom_arr_access(0)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Field_accessContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def atom_arr_access(self):
            return self.getTypedRuleContext(MiniGoParser.Atom_arr_accessContext,0)


        def field_access(self):
            return self.getTypedRuleContext(MiniGoParser.Field_accessContext,0)


        def DOT(self):
            return self.getToken(MiniGoParser.DOT, 0)

        def ID(self):
            return self.getToken(MiniGoParser.ID, 0)

        def function_call(self):
            return self.getTypedRuleContext(MiniGoParser.Function_callContext,0)


        def array_access(self):
            return self.getTypedRuleContext(MiniGoParser.Array_accessContext,0)


        def getRuleIndex(self):
            return MiniGoParser.RULE_field_access



    def field_access(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = MiniGoParser.Field_accessContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 26
        self.enterRecursionRule(localctx, 26, self.RULE_field_access, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 278
            self.atom_arr_access(0)
            self._ctx.stop = self._input.LT(-1)
            self.state = 289
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,13,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = MiniGoParser.Field_accessContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_field_access)
                    self.state = 280
                    if not self.precpred(self._ctx, 2):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                    self.state = 281
                    self.match(MiniGoParser.DOT)
                    self.state = 285
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,12,self._ctx)
                    if la_ == 1:
                        self.state = 282
                        self.match(MiniGoParser.ID)
                        pass

                    elif la_ == 2:
                        self.state = 283
                        self.function_call()
                        pass

                    elif la_ == 3:
                        self.state = 284
                        self.array_access()
                        pass

             
                self.state = 291
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,13,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class Atom_arr_accessContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def atom(self):
            return self.getTypedRuleContext(MiniGoParser.AtomContext,0)


        def atom_arr_access(self):
            return self.getTypedRuleContext(MiniGoParser.Atom_arr_accessContext,0)


        def LBRACKET(self):
            return self.getToken(MiniGoParser.LBRACKET, 0)

        def index_expr(self):
            return self.getTypedRuleContext(MiniGoParser.Index_exprContext,0)


        def RBRACKET(self):
            return self.getToken(MiniGoParser.RBRACKET, 0)

        def getRuleIndex(self):
            return MiniGoParser.RULE_atom_arr_access



    def atom_arr_access(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = MiniGoParser.Atom_arr_accessContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 28
        self.enterRecursionRule(localctx, 28, self.RULE_atom_arr_access, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 293
            self.atom()
            self._ctx.stop = self._input.LT(-1)
            self.state = 302
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,14,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = MiniGoParser.Atom_arr_accessContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_atom_arr_access)
                    self.state = 295
                    if not self.precpred(self._ctx, 2):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                    self.state = 296
                    self.match(MiniGoParser.LBRACKET)
                    self.state = 297
                    self.index_expr()
                    self.state = 298
                    self.match(MiniGoParser.RBRACKET) 
                self.state = 304
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,14,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class AtomContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def atom_value(self):
            return self.getTypedRuleContext(MiniGoParser.Atom_valueContext,0)


        def LPAREN(self):
            return self.getToken(MiniGoParser.LPAREN, 0)

        def expr(self):
            return self.getTypedRuleContext(MiniGoParser.ExprContext,0)


        def RPAREN(self):
            return self.getToken(MiniGoParser.RPAREN, 0)

        def ID(self):
            return self.getToken(MiniGoParser.ID, 0)

        def function_call(self):
            return self.getTypedRuleContext(MiniGoParser.Function_callContext,0)


        def array_literal(self):
            return self.getTypedRuleContext(MiniGoParser.Array_literalContext,0)


        def struct_literal(self):
            return self.getTypedRuleContext(MiniGoParser.Struct_literalContext,0)


        def struct_field_access(self):
            return self.getTypedRuleContext(MiniGoParser.Struct_field_accessContext,0)


        def struct_field_access_no_func(self):
            return self.getTypedRuleContext(MiniGoParser.Struct_field_access_no_funcContext,0)


        def getRuleIndex(self):
            return MiniGoParser.RULE_atom




    def atom(self):

        localctx = MiniGoParser.AtomContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_atom)
        try:
            self.state = 316
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,15,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 305
                self.atom_value()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 306
                self.match(MiniGoParser.LPAREN)
                self.state = 307
                self.expr()
                self.state = 308
                self.match(MiniGoParser.RPAREN)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 310
                self.match(MiniGoParser.ID)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 311
                self.function_call()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 312
                self.array_literal()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 313
                self.struct_literal()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 314
                self.struct_field_access()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 315
                self.struct_field_access_no_func()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Atom_valueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def number(self):
            return self.getTypedRuleContext(MiniGoParser.NumberContext,0)


        def TRUE(self):
            return self.getToken(MiniGoParser.TRUE, 0)

        def FALSE(self):
            return self.getToken(MiniGoParser.FALSE, 0)

        def NIL(self):
            return self.getToken(MiniGoParser.NIL, 0)

        def STRING_LIT(self):
            return self.getToken(MiniGoParser.STRING_LIT, 0)

        def getRuleIndex(self):
            return MiniGoParser.RULE_atom_value




    def atom_value(self):

        localctx = MiniGoParser.Atom_valueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_atom_value)
        try:
            self.state = 323
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [54, 55, 56, 57, 58]:
                self.enterOuterAlt(localctx, 1)
                self.state = 318
                self.number()
                pass
            elif token in [19]:
                self.enterOuterAlt(localctx, 2)
                self.state = 319
                self.match(MiniGoParser.TRUE)
                pass
            elif token in [20]:
                self.enterOuterAlt(localctx, 3)
                self.state = 320
                self.match(MiniGoParser.FALSE)
                pass
            elif token in [18]:
                self.enterOuterAlt(localctx, 4)
                self.state = 321
                self.match(MiniGoParser.NIL)
                pass
            elif token in [60]:
                self.enterOuterAlt(localctx, 5)
                self.state = 322
                self.match(MiniGoParser.STRING_LIT)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Arr_allow_litContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def int_number(self):
            return self.getTypedRuleContext(MiniGoParser.Int_numberContext,0)


        def FLOAT_LIT(self):
            return self.getToken(MiniGoParser.FLOAT_LIT, 0)

        def STRING_LIT(self):
            return self.getToken(MiniGoParser.STRING_LIT, 0)

        def TRUE(self):
            return self.getToken(MiniGoParser.TRUE, 0)

        def FALSE(self):
            return self.getToken(MiniGoParser.FALSE, 0)

        def NIL(self):
            return self.getToken(MiniGoParser.NIL, 0)

        def struct_literal(self):
            return self.getTypedRuleContext(MiniGoParser.Struct_literalContext,0)


        def ID(self):
            return self.getToken(MiniGoParser.ID, 0)

        def getRuleIndex(self):
            return MiniGoParser.RULE_arr_allow_lit




    def arr_allow_lit(self):

        localctx = MiniGoParser.Arr_allow_litContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_arr_allow_lit)
        try:
            self.state = 333
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,17,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 325
                self.int_number()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 326
                self.match(MiniGoParser.FLOAT_LIT)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 327
                self.match(MiniGoParser.STRING_LIT)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 328
                self.match(MiniGoParser.TRUE)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 329
                self.match(MiniGoParser.FALSE)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 330
                self.match(MiniGoParser.NIL)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 331
                self.struct_literal()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 332
                self.match(MiniGoParser.ID)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Arr_init_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LBRACE(self):
            return self.getToken(MiniGoParser.LBRACE, 0)

        def arr_init_list_body(self):
            return self.getTypedRuleContext(MiniGoParser.Arr_init_list_bodyContext,0)


        def RBRACE(self):
            return self.getToken(MiniGoParser.RBRACE, 0)

        def getRuleIndex(self):
            return MiniGoParser.RULE_arr_init_list




    def arr_init_list(self):

        localctx = MiniGoParser.Arr_init_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_arr_init_list)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 335
            self.match(MiniGoParser.LBRACE)
            self.state = 336
            self.arr_init_list_body()
            self.state = 337
            self.match(MiniGoParser.RBRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Arr_init_list_bodyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def arr_allow_lit(self):
            return self.getTypedRuleContext(MiniGoParser.Arr_allow_litContext,0)


        def arr_init_list(self):
            return self.getTypedRuleContext(MiniGoParser.Arr_init_listContext,0)


        def COMMA(self):
            return self.getToken(MiniGoParser.COMMA, 0)

        def arr_init_list_body(self):
            return self.getTypedRuleContext(MiniGoParser.Arr_init_list_bodyContext,0)


        def getRuleIndex(self):
            return MiniGoParser.RULE_arr_init_list_body




    def arr_init_list_body(self):

        localctx = MiniGoParser.Arr_init_list_bodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_arr_init_list_body)
        try:
            self.state = 348
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,19,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 339
                self.arr_allow_lit()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 340
                self.arr_init_list()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 343
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [18, 19, 20, 22, 54, 55, 56, 57, 58, 60]:
                    self.state = 341
                    self.arr_allow_lit()
                    pass
                elif token in [50]:
                    self.state = 342
                    self.arr_init_list()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 345
                self.match(MiniGoParser.COMMA)
                self.state = 346
                self.arr_init_list_body()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def array_literal(self):
            return self.getTypedRuleContext(MiniGoParser.Array_literalContext,0)


        def struct_literal(self):
            return self.getTypedRuleContext(MiniGoParser.Struct_literalContext,0)


        def getRuleIndex(self):
            return MiniGoParser.RULE_literal




    def literal(self):

        localctx = MiniGoParser.LiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_literal)
        try:
            self.state = 352
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [52]:
                self.enterOuterAlt(localctx, 1)
                self.state = 350
                self.array_literal()
                pass
            elif token in [22]:
                self.enterOuterAlt(localctx, 2)
                self.state = 351
                self.struct_literal()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Int_numberContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INT_LIT(self):
            return self.getToken(MiniGoParser.INT_LIT, 0)

        def HEX_LIT(self):
            return self.getToken(MiniGoParser.HEX_LIT, 0)

        def OCT_LIT(self):
            return self.getToken(MiniGoParser.OCT_LIT, 0)

        def BIN_LIT(self):
            return self.getToken(MiniGoParser.BIN_LIT, 0)

        def getRuleIndex(self):
            return MiniGoParser.RULE_int_number




    def int_number(self):

        localctx = MiniGoParser.Int_numberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_int_number)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 354
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 270215977642229760) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NumberContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def int_number(self):
            return self.getTypedRuleContext(MiniGoParser.Int_numberContext,0)


        def FLOAT_LIT(self):
            return self.getToken(MiniGoParser.FLOAT_LIT, 0)

        def getRuleIndex(self):
            return MiniGoParser.RULE_number




    def number(self):

        localctx = MiniGoParser.NumberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_number)
        try:
            self.state = 358
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [54, 55, 56, 57]:
                self.enterOuterAlt(localctx, 1)
                self.state = 356
                self.int_number()
                pass
            elif token in [58]:
                self.enterOuterAlt(localctx, 2)
                self.state = 357
                self.match(MiniGoParser.FLOAT_LIT)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Array_accessContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def secondary_index_expr(self):
            return self.getTypedRuleContext(MiniGoParser.Secondary_index_exprContext,0)


        def array_access_tail(self):
            return self.getTypedRuleContext(MiniGoParser.Array_access_tailContext,0)


        def getRuleIndex(self):
            return MiniGoParser.RULE_array_access




    def array_access(self):

        localctx = MiniGoParser.Array_accessContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_array_access)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 360
            self.secondary_index_expr()
            self.state = 361
            self.array_access_tail()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Array_access_tailContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LBRACKET(self):
            return self.getToken(MiniGoParser.LBRACKET, 0)

        def index_expr(self):
            return self.getTypedRuleContext(MiniGoParser.Index_exprContext,0)


        def RBRACKET(self):
            return self.getToken(MiniGoParser.RBRACKET, 0)

        def array_access_tail(self):
            return self.getTypedRuleContext(MiniGoParser.Array_access_tailContext,0)


        def getRuleIndex(self):
            return MiniGoParser.RULE_array_access_tail




    def array_access_tail(self):

        localctx = MiniGoParser.Array_access_tailContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_array_access_tail)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 363
            self.match(MiniGoParser.LBRACKET)
            self.state = 364
            self.index_expr()
            self.state = 365
            self.match(MiniGoParser.RBRACKET)
            self.state = 367
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,22,self._ctx)
            if la_ == 1:
                self.state = 366
                self.array_access_tail()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Index_exprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def logical_index_or_expr(self):
            return self.getTypedRuleContext(MiniGoParser.Logical_index_or_exprContext,0)


        def getRuleIndex(self):
            return MiniGoParser.RULE_index_expr




    def index_expr(self):

        localctx = MiniGoParser.Index_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_index_expr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 369
            self.logical_index_or_expr(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Logical_index_or_exprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def logical_index_and_expr(self):
            return self.getTypedRuleContext(MiniGoParser.Logical_index_and_exprContext,0)


        def logical_index_or_expr(self):
            return self.getTypedRuleContext(MiniGoParser.Logical_index_or_exprContext,0)


        def OR(self):
            return self.getToken(MiniGoParser.OR, 0)

        def getRuleIndex(self):
            return MiniGoParser.RULE_logical_index_or_expr



    def logical_index_or_expr(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = MiniGoParser.Logical_index_or_exprContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 52
        self.enterRecursionRule(localctx, 52, self.RULE_logical_index_or_expr, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 372
            self.logical_index_and_expr(0)
            self._ctx.stop = self._input.LT(-1)
            self.state = 379
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,23,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = MiniGoParser.Logical_index_or_exprContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_logical_index_or_expr)
                    self.state = 374
                    if not self.precpred(self._ctx, 2):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                    self.state = 375
                    self.match(MiniGoParser.OR)
                    self.state = 376
                    self.logical_index_and_expr(0) 
                self.state = 381
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,23,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class Logical_index_and_exprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def relational_index_expr(self):
            return self.getTypedRuleContext(MiniGoParser.Relational_index_exprContext,0)


        def logical_index_and_expr(self):
            return self.getTypedRuleContext(MiniGoParser.Logical_index_and_exprContext,0)


        def AND(self):
            return self.getToken(MiniGoParser.AND, 0)

        def getRuleIndex(self):
            return MiniGoParser.RULE_logical_index_and_expr



    def logical_index_and_expr(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = MiniGoParser.Logical_index_and_exprContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 54
        self.enterRecursionRule(localctx, 54, self.RULE_logical_index_and_expr, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 383
            self.relational_index_expr(0)
            self._ctx.stop = self._input.LT(-1)
            self.state = 390
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,24,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = MiniGoParser.Logical_index_and_exprContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_logical_index_and_expr)
                    self.state = 385
                    if not self.precpred(self._ctx, 2):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                    self.state = 386
                    self.match(MiniGoParser.AND)
                    self.state = 387
                    self.relational_index_expr(0) 
                self.state = 392
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,24,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class Relational_index_exprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def additive_index_expr(self):
            return self.getTypedRuleContext(MiniGoParser.Additive_index_exprContext,0)


        def relational_index_expr(self):
            return self.getTypedRuleContext(MiniGoParser.Relational_index_exprContext,0)


        def EQ(self):
            return self.getToken(MiniGoParser.EQ, 0)

        def NEQ(self):
            return self.getToken(MiniGoParser.NEQ, 0)

        def LT(self):
            return self.getToken(MiniGoParser.LT, 0)

        def LE(self):
            return self.getToken(MiniGoParser.LE, 0)

        def GT(self):
            return self.getToken(MiniGoParser.GT, 0)

        def GE(self):
            return self.getToken(MiniGoParser.GE, 0)

        def getRuleIndex(self):
            return MiniGoParser.RULE_relational_index_expr



    def relational_index_expr(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = MiniGoParser.Relational_index_exprContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 56
        self.enterRecursionRule(localctx, 56, self.RULE_relational_index_expr, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 394
            self.additive_index_expr(0)
            self._ctx.stop = self._input.LT(-1)
            self.state = 401
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,25,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = MiniGoParser.Relational_index_exprContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_relational_index_expr)
                    self.state = 396
                    if not self.precpred(self._ctx, 2):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                    self.state = 397
                    _la = self._input.LA(1)
                    if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 16911433728) != 0)):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 398
                    self.additive_index_expr(0) 
                self.state = 403
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,25,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class Additive_index_exprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def multiplicative_index_expr(self):
            return self.getTypedRuleContext(MiniGoParser.Multiplicative_index_exprContext,0)


        def additive_index_expr(self):
            return self.getTypedRuleContext(MiniGoParser.Additive_index_exprContext,0)


        def ADD(self):
            return self.getToken(MiniGoParser.ADD, 0)

        def SUB(self):
            return self.getToken(MiniGoParser.SUB, 0)

        def getRuleIndex(self):
            return MiniGoParser.RULE_additive_index_expr



    def additive_index_expr(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = MiniGoParser.Additive_index_exprContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 58
        self.enterRecursionRule(localctx, 58, self.RULE_additive_index_expr, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 405
            self.multiplicative_index_expr(0)
            self._ctx.stop = self._input.LT(-1)
            self.state = 412
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,26,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = MiniGoParser.Additive_index_exprContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_additive_index_expr)
                    self.state = 407
                    if not self.precpred(self._ctx, 2):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                    self.state = 408
                    _la = self._input.LA(1)
                    if not(_la==23 or _la==24):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 409
                    self.multiplicative_index_expr(0) 
                self.state = 414
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,26,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class Multiplicative_index_exprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def signed_index_expr(self):
            return self.getTypedRuleContext(MiniGoParser.Signed_index_exprContext,0)


        def multiplicative_index_expr(self):
            return self.getTypedRuleContext(MiniGoParser.Multiplicative_index_exprContext,0)


        def MUL(self):
            return self.getToken(MiniGoParser.MUL, 0)

        def DIV(self):
            return self.getToken(MiniGoParser.DIV, 0)

        def MOD(self):
            return self.getToken(MiniGoParser.MOD, 0)

        def getRuleIndex(self):
            return MiniGoParser.RULE_multiplicative_index_expr



    def multiplicative_index_expr(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = MiniGoParser.Multiplicative_index_exprContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 60
        self.enterRecursionRule(localctx, 60, self.RULE_multiplicative_index_expr, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 416
            self.signed_index_expr()
            self._ctx.stop = self._input.LT(-1)
            self.state = 423
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,27,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = MiniGoParser.Multiplicative_index_exprContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_multiplicative_index_expr)
                    self.state = 418
                    if not self.precpred(self._ctx, 2):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                    self.state = 419
                    _la = self._input.LA(1)
                    if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 234881024) != 0)):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 420
                    self.signed_index_expr() 
                self.state = 425
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,27,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class Signed_index_exprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def signed_tail(self):
            return self.getTypedRuleContext(MiniGoParser.Signed_tailContext,0)


        def primary_index_expr(self):
            return self.getTypedRuleContext(MiniGoParser.Primary_index_exprContext,0)


        def getRuleIndex(self):
            return MiniGoParser.RULE_signed_index_expr




    def signed_index_expr(self):

        localctx = MiniGoParser.Signed_index_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_signed_index_expr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 426
            self.signed_tail()
            self.state = 427
            self.primary_index_expr()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Primary_index_exprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def secondary_index_expr(self):
            return self.getTypedRuleContext(MiniGoParser.Secondary_index_exprContext,0)


        def array_access(self):
            return self.getTypedRuleContext(MiniGoParser.Array_accessContext,0)


        def int_number(self):
            return self.getTypedRuleContext(MiniGoParser.Int_numberContext,0)


        def LPAREN(self):
            return self.getToken(MiniGoParser.LPAREN, 0)

        def index_expr(self):
            return self.getTypedRuleContext(MiniGoParser.Index_exprContext,0)


        def RPAREN(self):
            return self.getToken(MiniGoParser.RPAREN, 0)

        def array_literal(self):
            return self.getTypedRuleContext(MiniGoParser.Array_literalContext,0)


        def struct_literal(self):
            return self.getTypedRuleContext(MiniGoParser.Struct_literalContext,0)


        def struct_field_access(self):
            return self.getTypedRuleContext(MiniGoParser.Struct_field_accessContext,0)


        def struct_field_access_no_func(self):
            return self.getTypedRuleContext(MiniGoParser.Struct_field_access_no_funcContext,0)


        def getRuleIndex(self):
            return MiniGoParser.RULE_primary_index_expr




    def primary_index_expr(self):

        localctx = MiniGoParser.Primary_index_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_primary_index_expr)
        try:
            self.state = 440
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,28,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 429
                self.secondary_index_expr()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 430
                self.array_access()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 431
                self.int_number()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 432
                self.match(MiniGoParser.LPAREN)
                self.state = 433
                self.index_expr()
                self.state = 434
                self.match(MiniGoParser.RPAREN)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 436
                self.array_literal()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 437
                self.struct_literal()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 438
                self.struct_field_access()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 439
                self.struct_field_access_no_func()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Secondary_index_exprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ID(self):
            return self.getToken(MiniGoParser.ID, 0)

        def STRING_LIT(self):
            return self.getToken(MiniGoParser.STRING_LIT, 0)

        def function_call(self):
            return self.getTypedRuleContext(MiniGoParser.Function_callContext,0)


        def getRuleIndex(self):
            return MiniGoParser.RULE_secondary_index_expr




    def secondary_index_expr(self):

        localctx = MiniGoParser.Secondary_index_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_secondary_index_expr)
        try:
            self.state = 445
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,29,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 442
                self.match(MiniGoParser.ID)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 443
                self.match(MiniGoParser.STRING_LIT)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 444
                self.function_call()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Signed_tailContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SUB(self):
            return self.getToken(MiniGoParser.SUB, 0)

        def signed_tail(self):
            return self.getTypedRuleContext(MiniGoParser.Signed_tailContext,0)


        def NOT(self):
            return self.getToken(MiniGoParser.NOT, 0)

        def getRuleIndex(self):
            return MiniGoParser.RULE_signed_tail




    def signed_tail(self):

        localctx = MiniGoParser.Signed_tailContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_signed_tail)
        try:
            self.state = 452
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [18, 19, 20, 22, 48, 52, 54, 55, 56, 57, 58, 60]:
                self.enterOuterAlt(localctx, 1)

                pass
            elif token in [24]:
                self.enterOuterAlt(localctx, 2)
                self.state = 448
                self.match(MiniGoParser.SUB)
                self.state = 449
                self.signed_tail()
                pass
            elif token in [36]:
                self.enterOuterAlt(localctx, 3)
                self.state = 450
                self.match(MiniGoParser.NOT)
                self.state = 451
                self.signed_tail()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Array_literalContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def array_literal_tail3(self):
            return self.getTypedRuleContext(MiniGoParser.Array_literal_tail3Context,0)


        def arr_init_list(self):
            return self.getTypedRuleContext(MiniGoParser.Arr_init_listContext,0)


        def primitiveType(self):
            return self.getTypedRuleContext(MiniGoParser.PrimitiveTypeContext,0)


        def compositeType(self):
            return self.getTypedRuleContext(MiniGoParser.CompositeTypeContext,0)


        def getRuleIndex(self):
            return MiniGoParser.RULE_array_literal




    def array_literal(self):

        localctx = MiniGoParser.Array_literalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_array_literal)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 454
            self.array_literal_tail3()
            self.state = 457
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [9, 10, 11, 12]:
                self.state = 455
                self.primitiveType()
                pass
            elif token in [22]:
                self.state = 456
                self.compositeType()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 459
            self.arr_init_list()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Array_literal_tail3Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LBRACKET(self):
            return self.getToken(MiniGoParser.LBRACKET, 0)

        def index_expr(self):
            return self.getTypedRuleContext(MiniGoParser.Index_exprContext,0)


        def RBRACKET(self):
            return self.getToken(MiniGoParser.RBRACKET, 0)

        def array_literal_tail3(self):
            return self.getTypedRuleContext(MiniGoParser.Array_literal_tail3Context,0)


        def getRuleIndex(self):
            return MiniGoParser.RULE_array_literal_tail3




    def array_literal_tail3(self):

        localctx = MiniGoParser.Array_literal_tail3Context(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_array_literal_tail3)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 461
            self.match(MiniGoParser.LBRACKET)
            self.state = 462
            self.index_expr()
            self.state = 463
            self.match(MiniGoParser.RBRACKET)
            self.state = 465
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==52:
                self.state = 464
                self.array_literal_tail3()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Struct_literalContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ID(self):
            return self.getToken(MiniGoParser.ID, 0)

        def LBRACE(self):
            return self.getToken(MiniGoParser.LBRACE, 0)

        def struct_literal_tail(self):
            return self.getTypedRuleContext(MiniGoParser.Struct_literal_tailContext,0)


        def RBRACE(self):
            return self.getToken(MiniGoParser.RBRACE, 0)

        def getRuleIndex(self):
            return MiniGoParser.RULE_struct_literal




    def struct_literal(self):

        localctx = MiniGoParser.Struct_literalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_struct_literal)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 467
            self.match(MiniGoParser.ID)
            self.state = 468
            self.match(MiniGoParser.LBRACE)
            self.state = 469
            self.struct_literal_tail()
            self.state = 470
            self.match(MiniGoParser.RBRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Struct_literal_tailContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def field_init(self):
            return self.getTypedRuleContext(MiniGoParser.Field_initContext,0)


        def struct_literal_tail2(self):
            return self.getTypedRuleContext(MiniGoParser.Struct_literal_tail2Context,0)


        def getRuleIndex(self):
            return MiniGoParser.RULE_struct_literal_tail




    def struct_literal_tail(self):

        localctx = MiniGoParser.Struct_literal_tailContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_struct_literal_tail)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 475
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==22:
                self.state = 472
                self.field_init()
                self.state = 473
                self.struct_literal_tail2()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Struct_literal_tail2Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COMMA(self):
            return self.getToken(MiniGoParser.COMMA, 0)

        def field_init(self):
            return self.getTypedRuleContext(MiniGoParser.Field_initContext,0)


        def struct_literal_tail2(self):
            return self.getTypedRuleContext(MiniGoParser.Struct_literal_tail2Context,0)


        def getRuleIndex(self):
            return MiniGoParser.RULE_struct_literal_tail2




    def struct_literal_tail2(self):

        localctx = MiniGoParser.Struct_literal_tail2Context(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_struct_literal_tail2)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 481
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==45:
                self.state = 477
                self.match(MiniGoParser.COMMA)
                self.state = 478
                self.field_init()
                self.state = 479
                self.struct_literal_tail2()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Field_initContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ID(self):
            return self.getToken(MiniGoParser.ID, 0)

        def COLON(self):
            return self.getToken(MiniGoParser.COLON, 0)

        def expr(self):
            return self.getTypedRuleContext(MiniGoParser.ExprContext,0)


        def getRuleIndex(self):
            return MiniGoParser.RULE_field_init




    def field_init(self):

        localctx = MiniGoParser.Field_initContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_field_init)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 483
            self.match(MiniGoParser.ID)
            self.state = 484
            self.match(MiniGoParser.COLON)
            self.state = 485
            self.expr()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Struct_field_accessContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def struct_field_access_head(self):
            return self.getTypedRuleContext(MiniGoParser.Struct_field_access_headContext,0)


        def DOT(self):
            return self.getToken(MiniGoParser.DOT, 0)

        def ID(self):
            return self.getToken(MiniGoParser.ID, 0)

        def function_call(self):
            return self.getTypedRuleContext(MiniGoParser.Function_callContext,0)


        def array_access(self):
            return self.getTypedRuleContext(MiniGoParser.Array_accessContext,0)


        def getRuleIndex(self):
            return MiniGoParser.RULE_struct_field_access




    def struct_field_access(self):

        localctx = MiniGoParser.Struct_field_accessContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_struct_field_access)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 487
            self.struct_field_access_head(0)
            self.state = 488
            self.match(MiniGoParser.DOT)
            self.state = 492
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,35,self._ctx)
            if la_ == 1:
                self.state = 489
                self.match(MiniGoParser.ID)
                pass

            elif la_ == 2:
                self.state = 490
                self.function_call()
                pass

            elif la_ == 3:
                self.state = 491
                self.array_access()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Struct_field_access_headContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ID(self):
            return self.getToken(MiniGoParser.ID, 0)

        def function_call(self):
            return self.getTypedRuleContext(MiniGoParser.Function_callContext,0)


        def array_access(self):
            return self.getTypedRuleContext(MiniGoParser.Array_accessContext,0)


        def struct_field_access_head(self):
            return self.getTypedRuleContext(MiniGoParser.Struct_field_access_headContext,0)


        def DOT(self):
            return self.getToken(MiniGoParser.DOT, 0)

        def getRuleIndex(self):
            return MiniGoParser.RULE_struct_field_access_head



    def struct_field_access_head(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = MiniGoParser.Struct_field_access_headContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 84
        self.enterRecursionRule(localctx, 84, self.RULE_struct_field_access_head, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 498
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,36,self._ctx)
            if la_ == 1:
                self.state = 495
                self.match(MiniGoParser.ID)
                pass

            elif la_ == 2:
                self.state = 496
                self.function_call()
                pass

            elif la_ == 3:
                self.state = 497
                self.array_access()
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 509
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,38,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = MiniGoParser.Struct_field_access_headContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_struct_field_access_head)
                    self.state = 500
                    if not self.precpred(self._ctx, 4):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 4)")
                    self.state = 501
                    self.match(MiniGoParser.DOT)
                    self.state = 505
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,37,self._ctx)
                    if la_ == 1:
                        self.state = 502
                        self.match(MiniGoParser.ID)
                        pass

                    elif la_ == 2:
                        self.state = 503
                        self.function_call()
                        pass

                    elif la_ == 3:
                        self.state = 504
                        self.array_access()
                        pass

             
                self.state = 511
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,38,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class Struct_field_access_no_funcContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def struct_field_access_no_func_head(self):
            return self.getTypedRuleContext(MiniGoParser.Struct_field_access_no_func_headContext,0)


        def DOT(self):
            return self.getToken(MiniGoParser.DOT, 0)

        def ID(self):
            return self.getToken(MiniGoParser.ID, 0)

        def array_access(self):
            return self.getTypedRuleContext(MiniGoParser.Array_accessContext,0)


        def getRuleIndex(self):
            return MiniGoParser.RULE_struct_field_access_no_func




    def struct_field_access_no_func(self):

        localctx = MiniGoParser.Struct_field_access_no_funcContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_struct_field_access_no_func)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 512
            self.struct_field_access_no_func_head(0)
            self.state = 513
            self.match(MiniGoParser.DOT)
            self.state = 516
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,39,self._ctx)
            if la_ == 1:
                self.state = 514
                self.match(MiniGoParser.ID)
                pass

            elif la_ == 2:
                self.state = 515
                self.array_access()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Struct_field_access_no_func_headContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ID(self):
            return self.getToken(MiniGoParser.ID, 0)

        def array_access(self):
            return self.getTypedRuleContext(MiniGoParser.Array_accessContext,0)


        def struct_field_access_no_func_head(self):
            return self.getTypedRuleContext(MiniGoParser.Struct_field_access_no_func_headContext,0)


        def DOT(self):
            return self.getToken(MiniGoParser.DOT, 0)

        def getRuleIndex(self):
            return MiniGoParser.RULE_struct_field_access_no_func_head



    def struct_field_access_no_func_head(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = MiniGoParser.Struct_field_access_no_func_headContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 88
        self.enterRecursionRule(localctx, 88, self.RULE_struct_field_access_no_func_head, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 521
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,40,self._ctx)
            if la_ == 1:
                self.state = 519
                self.match(MiniGoParser.ID)
                pass

            elif la_ == 2:
                self.state = 520
                self.array_access()
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 531
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,42,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = MiniGoParser.Struct_field_access_no_func_headContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_struct_field_access_no_func_head)
                    self.state = 523
                    if not self.precpred(self._ctx, 3):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 3)")
                    self.state = 524
                    self.match(MiniGoParser.DOT)
                    self.state = 527
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,41,self._ctx)
                    if la_ == 1:
                        self.state = 525
                        self.match(MiniGoParser.ID)
                        pass

                    elif la_ == 2:
                        self.state = 526
                        self.array_access()
                        pass

             
                self.state = 533
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,42,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class Stmt_in_blockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def eos(self):
            return self.getTypedRuleContext(MiniGoParser.EosContext,0)


        def array_access(self):
            return self.getTypedRuleContext(MiniGoParser.Array_accessContext,0)


        def struct_field_access(self):
            return self.getTypedRuleContext(MiniGoParser.Struct_field_accessContext,0)


        def struct_field_access_no_func(self):
            return self.getTypedRuleContext(MiniGoParser.Struct_field_access_no_funcContext,0)


        def const_decl(self):
            return self.getTypedRuleContext(MiniGoParser.Const_declContext,0)


        def var_decl(self):
            return self.getTypedRuleContext(MiniGoParser.Var_declContext,0)


        def array_decl(self):
            return self.getTypedRuleContext(MiniGoParser.Array_declContext,0)


        def array_decl_with_init(self):
            return self.getTypedRuleContext(MiniGoParser.Array_decl_with_initContext,0)


        def var_decl_no_init(self):
            return self.getTypedRuleContext(MiniGoParser.Var_decl_no_initContext,0)


        def break_stmt(self):
            return self.getTypedRuleContext(MiniGoParser.Break_stmtContext,0)


        def continue_stmt(self):
            return self.getTypedRuleContext(MiniGoParser.Continue_stmtContext,0)


        def if_stmt(self):
            return self.getTypedRuleContext(MiniGoParser.If_stmtContext,0)


        def for_stmt(self):
            return self.getTypedRuleContext(MiniGoParser.For_stmtContext,0)


        def assignment_stmt(self):
            return self.getTypedRuleContext(MiniGoParser.Assignment_stmtContext,0)


        def function_call(self):
            return self.getTypedRuleContext(MiniGoParser.Function_callContext,0)


        def return_stmt(self):
            return self.getTypedRuleContext(MiniGoParser.Return_stmtContext,0)


        def getRuleIndex(self):
            return MiniGoParser.RULE_stmt_in_block




    def stmt_in_block(self):

        localctx = MiniGoParser.Stmt_in_blockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_stmt_in_block)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 549
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,43,self._ctx)
            if la_ == 1:
                self.state = 534
                self.array_access()
                pass

            elif la_ == 2:
                self.state = 535
                self.struct_field_access()
                pass

            elif la_ == 3:
                self.state = 536
                self.struct_field_access_no_func()
                pass

            elif la_ == 4:
                self.state = 537
                self.const_decl()
                pass

            elif la_ == 5:
                self.state = 538
                self.var_decl()
                pass

            elif la_ == 6:
                self.state = 539
                self.array_decl()
                pass

            elif la_ == 7:
                self.state = 540
                self.array_decl_with_init()
                pass

            elif la_ == 8:
                self.state = 541
                self.var_decl_no_init()
                pass

            elif la_ == 9:
                self.state = 542
                self.break_stmt()
                pass

            elif la_ == 10:
                self.state = 543
                self.continue_stmt()
                pass

            elif la_ == 11:
                self.state = 544
                self.if_stmt()
                pass

            elif la_ == 12:
                self.state = 545
                self.for_stmt()
                pass

            elif la_ == 13:
                self.state = 546
                self.assignment_stmt()
                pass

            elif la_ == 14:
                self.state = 547
                self.function_call()
                pass

            elif la_ == 15:
                self.state = 548
                self.return_stmt()
                pass


            self.state = 551
            self.eos()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Stmt_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def stmt_in_block(self):
            return self.getTypedRuleContext(MiniGoParser.Stmt_in_blockContext,0)


        def stmt_list(self):
            return self.getTypedRuleContext(MiniGoParser.Stmt_listContext,0)


        def NEWLINE(self):
            return self.getToken(MiniGoParser.NEWLINE, 0)

        def getRuleIndex(self):
            return MiniGoParser.RULE_stmt_list



    def stmt_list(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = MiniGoParser.Stmt_listContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 92
        self.enterRecursionRule(localctx, 92, self.RULE_stmt_list, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 554
            self.stmt_in_block()
            self._ctx.stop = self._input.LT(-1)
            self.state = 562
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,45,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 560
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,44,self._ctx)
                    if la_ == 1:
                        localctx = MiniGoParser.Stmt_listContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_stmt_list)
                        self.state = 556
                        if not self.precpred(self._ctx, 2):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                        self.state = 557
                        self.stmt_in_block()
                        pass

                    elif la_ == 2:
                        localctx = MiniGoParser.Stmt_listContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_stmt_list)
                        self.state = 558
                        if not self.precpred(self._ctx, 1):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                        self.state = 559
                        self.match(MiniGoParser.NEWLINE)
                        pass

             
                self.state = 564
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,45,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class Assignment_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def lhs(self):
            return self.getTypedRuleContext(MiniGoParser.LhsContext,0)


        def assignment_operator(self):
            return self.getTypedRuleContext(MiniGoParser.Assignment_operatorContext,0)


        def expr(self):
            return self.getTypedRuleContext(MiniGoParser.ExprContext,0)


        def getRuleIndex(self):
            return MiniGoParser.RULE_assignment_stmt




    def assignment_stmt(self):

        localctx = MiniGoParser.Assignment_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_assignment_stmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 565
            self.lhs()
            self.state = 566
            self.assignment_operator()
            self.state = 567
            self.expr()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Assignment_stmt_scalarContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ID(self):
            return self.getToken(MiniGoParser.ID, 0)

        def assignment_operator(self):
            return self.getTypedRuleContext(MiniGoParser.Assignment_operatorContext,0)


        def expr(self):
            return self.getTypedRuleContext(MiniGoParser.ExprContext,0)


        def getRuleIndex(self):
            return MiniGoParser.RULE_assignment_stmt_scalar




    def assignment_stmt_scalar(self):

        localctx = MiniGoParser.Assignment_stmt_scalarContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_assignment_stmt_scalar)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 569
            self.match(MiniGoParser.ID)
            self.state = 570
            self.assignment_operator()
            self.state = 571
            self.expr()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Assignment_operatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SHORT_ASSIGN(self):
            return self.getToken(MiniGoParser.SHORT_ASSIGN, 0)

        def ADD_ASSIGN(self):
            return self.getToken(MiniGoParser.ADD_ASSIGN, 0)

        def SUB_ASSIGN(self):
            return self.getToken(MiniGoParser.SUB_ASSIGN, 0)

        def MUL_ASSIGN(self):
            return self.getToken(MiniGoParser.MUL_ASSIGN, 0)

        def DIV_ASSIGN(self):
            return self.getToken(MiniGoParser.DIV_ASSIGN, 0)

        def MOD_ASSIGN(self):
            return self.getToken(MiniGoParser.MOD_ASSIGN, 0)

        def getRuleIndex(self):
            return MiniGoParser.RULE_assignment_operator




    def assignment_operator(self):

        localctx = MiniGoParser.Assignment_operatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_assignment_operator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 573
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 17317308137472) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Assignment_exprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def lhs(self):
            return self.getTypedRuleContext(MiniGoParser.LhsContext,0)


        def ASSIGN(self):
            return self.getToken(MiniGoParser.ASSIGN, 0)

        def SHORT_ASSIGN(self):
            return self.getToken(MiniGoParser.SHORT_ASSIGN, 0)

        def expr(self):
            return self.getTypedRuleContext(MiniGoParser.ExprContext,0)


        def struct_literal(self):
            return self.getTypedRuleContext(MiniGoParser.Struct_literalContext,0)


        def getRuleIndex(self):
            return MiniGoParser.RULE_assignment_expr




    def assignment_expr(self):

        localctx = MiniGoParser.Assignment_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_assignment_expr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 575
            self.lhs()
            self.state = 576
            _la = self._input.LA(1)
            if not(_la==37 or _la==38):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 579
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,46,self._ctx)
            if la_ == 1:
                self.state = 577
                self.expr()
                pass

            elif la_ == 2:
                self.state = 578
                self.struct_literal()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LhsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ID(self):
            return self.getToken(MiniGoParser.ID, 0)

        def array_access(self):
            return self.getTypedRuleContext(MiniGoParser.Array_accessContext,0)


        def struct_field_access_no_func(self):
            return self.getTypedRuleContext(MiniGoParser.Struct_field_access_no_funcContext,0)


        def getRuleIndex(self):
            return MiniGoParser.RULE_lhs




    def lhs(self):

        localctx = MiniGoParser.LhsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_lhs)
        try:
            self.state = 584
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,47,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 581
                self.match(MiniGoParser.ID)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 582
                self.array_access()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 583
                self.struct_field_access_no_func()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class If_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IF(self):
            return self.getToken(MiniGoParser.IF, 0)

        def LPAREN(self):
            return self.getToken(MiniGoParser.LPAREN, 0)

        def expr(self):
            return self.getTypedRuleContext(MiniGoParser.ExprContext,0)


        def RPAREN(self):
            return self.getToken(MiniGoParser.RPAREN, 0)

        def block(self):
            return self.getTypedRuleContext(MiniGoParser.BlockContext,0)


        def if_stmt_tail(self):
            return self.getTypedRuleContext(MiniGoParser.If_stmt_tailContext,0)


        def getRuleIndex(self):
            return MiniGoParser.RULE_if_stmt




    def if_stmt(self):

        localctx = MiniGoParser.If_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_if_stmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 586
            self.match(MiniGoParser.IF)
            self.state = 587
            self.match(MiniGoParser.LPAREN)
            self.state = 588
            self.expr()
            self.state = 589
            self.match(MiniGoParser.RPAREN)
            self.state = 590
            self.block()
            self.state = 591
            self.if_stmt_tail()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class If_stmt_tailContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ELSE(self):
            return self.getToken(MiniGoParser.ELSE, 0)

        def IF(self):
            return self.getToken(MiniGoParser.IF, 0)

        def LPAREN(self):
            return self.getToken(MiniGoParser.LPAREN, 0)

        def expr(self):
            return self.getTypedRuleContext(MiniGoParser.ExprContext,0)


        def RPAREN(self):
            return self.getToken(MiniGoParser.RPAREN, 0)

        def block(self):
            return self.getTypedRuleContext(MiniGoParser.BlockContext,0)


        def if_stmt_tail(self):
            return self.getTypedRuleContext(MiniGoParser.If_stmt_tailContext,0)


        def getRuleIndex(self):
            return MiniGoParser.RULE_if_stmt_tail




    def if_stmt_tail(self):

        localctx = MiniGoParser.If_stmt_tailContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_if_stmt_tail)
        try:
            self.state = 604
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,48,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 593
                self.match(MiniGoParser.ELSE)
                self.state = 594
                self.match(MiniGoParser.IF)
                self.state = 595
                self.match(MiniGoParser.LPAREN)
                self.state = 596
                self.expr()
                self.state = 597
                self.match(MiniGoParser.RPAREN)
                self.state = 598
                self.block()
                self.state = 599
                self.if_stmt_tail()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 601
                self.match(MiniGoParser.ELSE)
                self.state = 602
                self.block()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class For_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FOR(self):
            return self.getToken(MiniGoParser.FOR, 0)

        def for_init(self):
            return self.getTypedRuleContext(MiniGoParser.For_initContext,0)


        def SEMICOLON(self, i:int=None):
            if i is None:
                return self.getTokens(MiniGoParser.SEMICOLON)
            else:
                return self.getToken(MiniGoParser.SEMICOLON, i)

        def expr(self):
            return self.getTypedRuleContext(MiniGoParser.ExprContext,0)


        def for_update(self):
            return self.getTypedRuleContext(MiniGoParser.For_updateContext,0)


        def block(self):
            return self.getTypedRuleContext(MiniGoParser.BlockContext,0)


        def ID(self, i:int=None):
            if i is None:
                return self.getTokens(MiniGoParser.ID)
            else:
                return self.getToken(MiniGoParser.ID, i)

        def COMMA(self):
            return self.getToken(MiniGoParser.COMMA, 0)

        def SHORT_ASSIGN(self):
            return self.getToken(MiniGoParser.SHORT_ASSIGN, 0)

        def RANGE(self):
            return self.getToken(MiniGoParser.RANGE, 0)

        def atom(self):
            return self.getTypedRuleContext(MiniGoParser.AtomContext,0)


        def array_access(self):
            return self.getTypedRuleContext(MiniGoParser.Array_accessContext,0)


        def getRuleIndex(self):
            return MiniGoParser.RULE_for_stmt




    def for_stmt(self):

        localctx = MiniGoParser.For_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_for_stmt)
        try:
            self.state = 630
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,50,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 606
                self.match(MiniGoParser.FOR)
                self.state = 607
                self.for_init()
                self.state = 608
                self.match(MiniGoParser.SEMICOLON)
                self.state = 609
                self.expr()
                self.state = 610
                self.match(MiniGoParser.SEMICOLON)
                self.state = 611
                self.for_update()
                self.state = 612
                self.block()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 614
                self.match(MiniGoParser.FOR)
                self.state = 615
                self.match(MiniGoParser.ID)
                self.state = 616
                self.match(MiniGoParser.COMMA)
                self.state = 617
                self.match(MiniGoParser.ID)
                self.state = 618
                self.match(MiniGoParser.SHORT_ASSIGN)
                self.state = 619
                self.match(MiniGoParser.RANGE)
                self.state = 622
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,49,self._ctx)
                if la_ == 1:
                    self.state = 620
                    self.atom()
                    pass

                elif la_ == 2:
                    self.state = 621
                    self.array_access()
                    pass


                self.state = 624
                self.block()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 626
                self.match(MiniGoParser.FOR)
                self.state = 627
                self.expr()
                self.state = 628
                self.block()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class For_initContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def var_decl(self):
            return self.getTypedRuleContext(MiniGoParser.Var_declContext,0)


        def assignment_stmt_scalar(self):
            return self.getTypedRuleContext(MiniGoParser.Assignment_stmt_scalarContext,0)


        def array_decl_with_init(self):
            return self.getTypedRuleContext(MiniGoParser.Array_decl_with_initContext,0)


        def getRuleIndex(self):
            return MiniGoParser.RULE_for_init




    def for_init(self):

        localctx = MiniGoParser.For_initContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_for_init)
        try:
            self.state = 635
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,51,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 632
                self.var_decl()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 633
                self.assignment_stmt_scalar()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 634
                self.array_decl_with_init()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class For_updateContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def assignment_stmt_scalar(self):
            return self.getTypedRuleContext(MiniGoParser.Assignment_stmt_scalarContext,0)


        def getRuleIndex(self):
            return MiniGoParser.RULE_for_update




    def for_update(self):

        localctx = MiniGoParser.For_updateContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_for_update)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 637
            self.assignment_stmt_scalar()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class For_conditionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expr(self):
            return self.getTypedRuleContext(MiniGoParser.ExprContext,0)


        def getRuleIndex(self):
            return MiniGoParser.RULE_for_condition




    def for_condition(self):

        localctx = MiniGoParser.For_conditionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_for_condition)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 639
            self.expr()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Return_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RETURN(self):
            return self.getToken(MiniGoParser.RETURN, 0)

        def expr(self):
            return self.getTypedRuleContext(MiniGoParser.ExprContext,0)


        def getRuleIndex(self):
            return MiniGoParser.RULE_return_stmt




    def return_stmt(self):

        localctx = MiniGoParser.Return_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_return_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 641
            self.match(MiniGoParser.RETURN)
            self.state = 643
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 1716153001747152896) != 0):
                self.state = 642
                self.expr()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Continue_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CONTINUE(self):
            return self.getToken(MiniGoParser.CONTINUE, 0)

        def getRuleIndex(self):
            return MiniGoParser.RULE_continue_stmt




    def continue_stmt(self):

        localctx = MiniGoParser.Continue_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_continue_stmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 645
            self.match(MiniGoParser.CONTINUE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Break_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BREAK(self):
            return self.getToken(MiniGoParser.BREAK, 0)

        def getRuleIndex(self):
            return MiniGoParser.RULE_break_stmt




    def break_stmt(self):

        localctx = MiniGoParser.Break_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_break_stmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 647
            self.match(MiniGoParser.BREAK)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Var_declContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def VAR(self):
            return self.getToken(MiniGoParser.VAR, 0)

        def ID(self):
            return self.getToken(MiniGoParser.ID, 0)

        def ASSIGN(self):
            return self.getToken(MiniGoParser.ASSIGN, 0)

        def expr(self):
            return self.getTypedRuleContext(MiniGoParser.ExprContext,0)


        def primitiveType(self):
            return self.getTypedRuleContext(MiniGoParser.PrimitiveTypeContext,0)


        def compositeType(self):
            return self.getTypedRuleContext(MiniGoParser.CompositeTypeContext,0)


        def getRuleIndex(self):
            return MiniGoParser.RULE_var_decl




    def var_decl(self):

        localctx = MiniGoParser.Var_declContext(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_var_decl)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 649
            self.match(MiniGoParser.VAR)
            self.state = 650
            self.match(MiniGoParser.ID)
            self.state = 653
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [9, 10, 11, 12]:
                self.state = 651
                self.primitiveType()
                pass
            elif token in [22]:
                self.state = 652
                self.compositeType()
                pass
            elif token in [37]:
                pass
            else:
                pass
            self.state = 655
            self.match(MiniGoParser.ASSIGN)
            self.state = 656
            self.expr()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Var_decl_no_initContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def VAR(self):
            return self.getToken(MiniGoParser.VAR, 0)

        def ID(self):
            return self.getToken(MiniGoParser.ID, 0)

        def primitiveType(self):
            return self.getTypedRuleContext(MiniGoParser.PrimitiveTypeContext,0)


        def compositeType(self):
            return self.getTypedRuleContext(MiniGoParser.CompositeTypeContext,0)


        def getRuleIndex(self):
            return MiniGoParser.RULE_var_decl_no_init




    def var_decl_no_init(self):

        localctx = MiniGoParser.Var_decl_no_initContext(self, self._ctx, self.state)
        self.enterRule(localctx, 124, self.RULE_var_decl_no_init)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 658
            self.match(MiniGoParser.VAR)
            self.state = 659
            self.match(MiniGoParser.ID)
            self.state = 662
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [9, 10, 11, 12]:
                self.state = 660
                self.primitiveType()
                pass
            elif token in [22]:
                self.state = 661
                self.compositeType()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Const_declContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CONST(self):
            return self.getToken(MiniGoParser.CONST, 0)

        def ID(self):
            return self.getToken(MiniGoParser.ID, 0)

        def ASSIGN(self):
            return self.getToken(MiniGoParser.ASSIGN, 0)

        def expr(self):
            return self.getTypedRuleContext(MiniGoParser.ExprContext,0)


        def getRuleIndex(self):
            return MiniGoParser.RULE_const_decl




    def const_decl(self):

        localctx = MiniGoParser.Const_declContext(self, self._ctx, self.state)
        self.enterRule(localctx, 126, self.RULE_const_decl)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 664
            self.match(MiniGoParser.CONST)
            self.state = 665
            self.match(MiniGoParser.ID)
            self.state = 666
            self.match(MiniGoParser.ASSIGN)
            self.state = 667
            self.expr()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def primitiveType(self):
            return self.getTypedRuleContext(MiniGoParser.PrimitiveTypeContext,0)


        def compositeType(self):
            return self.getTypedRuleContext(MiniGoParser.CompositeTypeContext,0)


        def arrayType(self):
            return self.getTypedRuleContext(MiniGoParser.ArrayTypeContext,0)


        def getRuleIndex(self):
            return MiniGoParser.RULE_types




    def types(self):

        localctx = MiniGoParser.TypesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 128, self.RULE_types)
        try:
            self.state = 672
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [9, 10, 11, 12]:
                self.enterOuterAlt(localctx, 1)
                self.state = 669
                self.primitiveType()
                pass
            elif token in [22]:
                self.enterOuterAlt(localctx, 2)
                self.state = 670
                self.compositeType()
                pass
            elif token in [52]:
                self.enterOuterAlt(localctx, 3)
                self.state = 671
                self.arrayType()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PrimitiveTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INT(self):
            return self.getToken(MiniGoParser.INT, 0)

        def FLOAT(self):
            return self.getToken(MiniGoParser.FLOAT, 0)

        def STRING(self):
            return self.getToken(MiniGoParser.STRING, 0)

        def BOOLEAN(self):
            return self.getToken(MiniGoParser.BOOLEAN, 0)

        def getRuleIndex(self):
            return MiniGoParser.RULE_primitiveType




    def primitiveType(self):

        localctx = MiniGoParser.PrimitiveTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 130, self.RULE_primitiveType)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 674
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 7680) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArrayTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def dimensions(self):
            return self.getTypedRuleContext(MiniGoParser.DimensionsContext,0)


        def primitiveType(self):
            return self.getTypedRuleContext(MiniGoParser.PrimitiveTypeContext,0)


        def compositeType(self):
            return self.getTypedRuleContext(MiniGoParser.CompositeTypeContext,0)


        def getRuleIndex(self):
            return MiniGoParser.RULE_arrayType




    def arrayType(self):

        localctx = MiniGoParser.ArrayTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 132, self.RULE_arrayType)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 676
            self.dimensions()
            self.state = 679
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [9, 10, 11, 12]:
                self.state = 677
                self.primitiveType()
                pass
            elif token in [22]:
                self.state = 678
                self.compositeType()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CompositeTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ID(self):
            return self.getToken(MiniGoParser.ID, 0)

        def getRuleIndex(self):
            return MiniGoParser.RULE_compositeType




    def compositeType(self):

        localctx = MiniGoParser.CompositeTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 134, self.RULE_compositeType)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 681
            self.match(MiniGoParser.ID)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Array_decl_with_initContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def VAR(self):
            return self.getToken(MiniGoParser.VAR, 0)

        def ID(self):
            return self.getToken(MiniGoParser.ID, 0)

        def arrayType(self):
            return self.getTypedRuleContext(MiniGoParser.ArrayTypeContext,0)


        def ASSIGN(self):
            return self.getToken(MiniGoParser.ASSIGN, 0)

        def array_init(self):
            return self.getTypedRuleContext(MiniGoParser.Array_initContext,0)


        def getRuleIndex(self):
            return MiniGoParser.RULE_array_decl_with_init




    def array_decl_with_init(self):

        localctx = MiniGoParser.Array_decl_with_initContext(self, self._ctx, self.state)
        self.enterRule(localctx, 136, self.RULE_array_decl_with_init)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 683
            self.match(MiniGoParser.VAR)
            self.state = 684
            self.match(MiniGoParser.ID)
            self.state = 685
            self.arrayType()
            self.state = 686
            self.match(MiniGoParser.ASSIGN)
            self.state = 687
            self.array_init()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Array_declContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def VAR(self):
            return self.getToken(MiniGoParser.VAR, 0)

        def ID(self):
            return self.getToken(MiniGoParser.ID, 0)

        def arrayType(self):
            return self.getTypedRuleContext(MiniGoParser.ArrayTypeContext,0)


        def getRuleIndex(self):
            return MiniGoParser.RULE_array_decl




    def array_decl(self):

        localctx = MiniGoParser.Array_declContext(self, self._ctx, self.state)
        self.enterRule(localctx, 138, self.RULE_array_decl)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 689
            self.match(MiniGoParser.VAR)
            self.state = 690
            self.match(MiniGoParser.ID)
            self.state = 691
            self.arrayType()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DimensionsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LBRACKET(self):
            return self.getToken(MiniGoParser.LBRACKET, 0)

        def RBRACKET(self):
            return self.getToken(MiniGoParser.RBRACKET, 0)

        def int_number(self):
            return self.getTypedRuleContext(MiniGoParser.Int_numberContext,0)


        def ID(self):
            return self.getToken(MiniGoParser.ID, 0)

        def dimensions(self):
            return self.getTypedRuleContext(MiniGoParser.DimensionsContext,0)


        def getRuleIndex(self):
            return MiniGoParser.RULE_dimensions




    def dimensions(self):

        localctx = MiniGoParser.DimensionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 140, self.RULE_dimensions)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 693
            self.match(MiniGoParser.LBRACKET)
            self.state = 696
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [54, 55, 56, 57]:
                self.state = 694
                self.int_number()
                pass
            elif token in [22]:
                self.state = 695
                self.match(MiniGoParser.ID)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 698
            self.match(MiniGoParser.RBRACKET)
            self.state = 700
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==52:
                self.state = 699
                self.dimensions()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Array_initContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def array_literal(self):
            return self.getTypedRuleContext(MiniGoParser.Array_literalContext,0)


        def expr(self):
            return self.getTypedRuleContext(MiniGoParser.ExprContext,0)


        def getRuleIndex(self):
            return MiniGoParser.RULE_array_init




    def array_init(self):

        localctx = MiniGoParser.Array_initContext(self, self._ctx, self.state)
        self.enterRule(localctx, 142, self.RULE_array_init)
        try:
            self.state = 704
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,59,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 702
                self.array_literal()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 703
                self.expr()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Struct_declContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TYPE(self):
            return self.getToken(MiniGoParser.TYPE, 0)

        def ID(self):
            return self.getToken(MiniGoParser.ID, 0)

        def STRUCT(self):
            return self.getToken(MiniGoParser.STRUCT, 0)

        def LBRACE(self):
            return self.getToken(MiniGoParser.LBRACE, 0)

        def field_decl_list(self):
            return self.getTypedRuleContext(MiniGoParser.Field_decl_listContext,0)


        def RBRACE(self):
            return self.getToken(MiniGoParser.RBRACE, 0)

        def newlines(self):
            return self.getTypedRuleContext(MiniGoParser.NewlinesContext,0)


        def getRuleIndex(self):
            return MiniGoParser.RULE_struct_decl




    def struct_decl(self):

        localctx = MiniGoParser.Struct_declContext(self, self._ctx, self.state)
        self.enterRule(localctx, 144, self.RULE_struct_decl)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 706
            self.match(MiniGoParser.TYPE)
            self.state = 707
            self.match(MiniGoParser.ID)
            self.state = 708
            self.match(MiniGoParser.STRUCT)
            self.state = 709
            self.match(MiniGoParser.LBRACE)
            self.state = 711
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,60,self._ctx)
            if la_ == 1:
                self.state = 710
                self.newlines(0)


            self.state = 713
            self.field_decl_list()
            self.state = 714
            self.match(MiniGoParser.RBRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Field_decl_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def field_decl(self):
            return self.getTypedRuleContext(MiniGoParser.Field_declContext,0)


        def eos(self):
            return self.getTypedRuleContext(MiniGoParser.EosContext,0)


        def NEWLINE(self):
            return self.getToken(MiniGoParser.NEWLINE, 0)

        def field_decl_list(self):
            return self.getTypedRuleContext(MiniGoParser.Field_decl_listContext,0)


        def getRuleIndex(self):
            return MiniGoParser.RULE_field_decl_list




    def field_decl_list(self):

        localctx = MiniGoParser.Field_decl_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 146, self.RULE_field_decl_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 720
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [22]:
                self.state = 716
                self.field_decl()
                self.state = 717
                self.eos()
                pass
            elif token in [21]:
                self.state = 719
                self.match(MiniGoParser.NEWLINE)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 723
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==21 or _la==22:
                self.state = 722
                self.field_decl_list()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Field_declContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ID(self):
            return self.getToken(MiniGoParser.ID, 0)

        def types(self):
            return self.getTypedRuleContext(MiniGoParser.TypesContext,0)


        def getRuleIndex(self):
            return MiniGoParser.RULE_field_decl




    def field_decl(self):

        localctx = MiniGoParser.Field_declContext(self, self._ctx, self.state)
        self.enterRule(localctx, 148, self.RULE_field_decl)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 725
            self.match(MiniGoParser.ID)
            self.state = 726
            self.types()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Interface_declContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TYPE(self):
            return self.getToken(MiniGoParser.TYPE, 0)

        def ID(self):
            return self.getToken(MiniGoParser.ID, 0)

        def INTERFACE(self):
            return self.getToken(MiniGoParser.INTERFACE, 0)

        def LBRACE(self):
            return self.getToken(MiniGoParser.LBRACE, 0)

        def method_in_decl(self):
            return self.getTypedRuleContext(MiniGoParser.Method_in_declContext,0)


        def RBRACE(self):
            return self.getToken(MiniGoParser.RBRACE, 0)

        def newlines(self):
            return self.getTypedRuleContext(MiniGoParser.NewlinesContext,0)


        def getRuleIndex(self):
            return MiniGoParser.RULE_interface_decl




    def interface_decl(self):

        localctx = MiniGoParser.Interface_declContext(self, self._ctx, self.state)
        self.enterRule(localctx, 150, self.RULE_interface_decl)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 728
            self.match(MiniGoParser.TYPE)
            self.state = 729
            self.match(MiniGoParser.ID)
            self.state = 730
            self.match(MiniGoParser.INTERFACE)
            self.state = 731
            self.match(MiniGoParser.LBRACE)
            self.state = 733
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,63,self._ctx)
            if la_ == 1:
                self.state = 732
                self.newlines(0)


            self.state = 735
            self.method_in_decl()
            self.state = 736
            self.match(MiniGoParser.RBRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Method_in_declContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NEWLINE(self):
            return self.getToken(MiniGoParser.NEWLINE, 0)

        def method_in_decl(self):
            return self.getTypedRuleContext(MiniGoParser.Method_in_declContext,0)


        def ID(self):
            return self.getToken(MiniGoParser.ID, 0)

        def LPAREN(self):
            return self.getToken(MiniGoParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(MiniGoParser.RPAREN, 0)

        def eos(self):
            return self.getTypedRuleContext(MiniGoParser.EosContext,0)


        def param_decl(self):
            return self.getTypedRuleContext(MiniGoParser.Param_declContext,0)


        def types(self):
            return self.getTypedRuleContext(MiniGoParser.TypesContext,0)


        def getRuleIndex(self):
            return MiniGoParser.RULE_method_in_decl




    def method_in_decl(self):

        localctx = MiniGoParser.Method_in_declContext(self, self._ctx, self.state)
        self.enterRule(localctx, 152, self.RULE_method_in_decl)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 749
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [22]:
                self.state = 738
                self.match(MiniGoParser.ID)
                self.state = 739
                self.match(MiniGoParser.LPAREN)
                self.state = 741
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==22:
                    self.state = 740
                    self.param_decl()


                self.state = 743
                self.match(MiniGoParser.RPAREN)
                self.state = 745
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 4503599631572480) != 0):
                    self.state = 744
                    self.types()


                self.state = 747
                self.eos()
                pass
            elif token in [21]:
                self.state = 748
                self.match(MiniGoParser.NEWLINE)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 752
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==21 or _la==22:
                self.state = 751
                self.method_in_decl()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Param_declContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ID(self):
            return self.getToken(MiniGoParser.ID, 0)

        def param_decl_tail(self):
            return self.getTypedRuleContext(MiniGoParser.Param_decl_tailContext,0)


        def types(self):
            return self.getTypedRuleContext(MiniGoParser.TypesContext,0)


        def COMMA(self):
            return self.getToken(MiniGoParser.COMMA, 0)

        def param_decl(self):
            return self.getTypedRuleContext(MiniGoParser.Param_declContext,0)


        def getRuleIndex(self):
            return MiniGoParser.RULE_param_decl




    def param_decl(self):

        localctx = MiniGoParser.Param_declContext(self, self._ctx, self.state)
        self.enterRule(localctx, 154, self.RULE_param_decl)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 754
            self.match(MiniGoParser.ID)
            self.state = 755
            self.param_decl_tail()
            self.state = 756
            self.types()
            self.state = 760
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==45:
                self.state = 758
                self.match(MiniGoParser.COMMA)
                self.state = 759
                self.param_decl()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Param_decl_tailContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COMMA(self):
            return self.getToken(MiniGoParser.COMMA, 0)

        def ID(self):
            return self.getToken(MiniGoParser.ID, 0)

        def param_decl_tail(self):
            return self.getTypedRuleContext(MiniGoParser.Param_decl_tailContext,0)


        def getRuleIndex(self):
            return MiniGoParser.RULE_param_decl_tail




    def param_decl_tail(self):

        localctx = MiniGoParser.Param_decl_tailContext(self, self._ctx, self.state)
        self.enterRule(localctx, 156, self.RULE_param_decl_tail)
        try:
            self.state = 766
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [45]:
                self.enterOuterAlt(localctx, 1)
                self.state = 762
                self.match(MiniGoParser.COMMA)
                self.state = 763
                self.match(MiniGoParser.ID)
                self.state = 764
                self.param_decl_tail()
                pass
            elif token in [9, 10, 11, 12, 22, 52]:
                self.enterOuterAlt(localctx, 2)

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Param_call_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expr(self):
            return self.getTypedRuleContext(MiniGoParser.ExprContext,0)


        def COMMA(self):
            return self.getToken(MiniGoParser.COMMA, 0)

        def param_call_list(self):
            return self.getTypedRuleContext(MiniGoParser.Param_call_listContext,0)


        def getRuleIndex(self):
            return MiniGoParser.RULE_param_call_list




    def param_call_list(self):

        localctx = MiniGoParser.Param_call_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 158, self.RULE_param_call_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 768
            self.expr()
            self.state = 771
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==45:
                self.state = 769
                self.match(MiniGoParser.COMMA)
                self.state = 770
                self.param_call_list()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Function_callContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ID(self):
            return self.getToken(MiniGoParser.ID, 0)

        def LPAREN(self):
            return self.getToken(MiniGoParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(MiniGoParser.RPAREN, 0)

        def param_call_list(self):
            return self.getTypedRuleContext(MiniGoParser.Param_call_listContext,0)


        def getRuleIndex(self):
            return MiniGoParser.RULE_function_call




    def function_call(self):

        localctx = MiniGoParser.Function_callContext(self, self._ctx, self.state)
        self.enterRule(localctx, 160, self.RULE_function_call)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 773
            self.match(MiniGoParser.ID)
            self.state = 774
            self.match(MiniGoParser.LPAREN)
            self.state = 776
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 1716153001747152896) != 0):
                self.state = 775
                self.param_call_list()


            self.state = 778
            self.match(MiniGoParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Func_declContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FUNC(self):
            return self.getToken(MiniGoParser.FUNC, 0)

        def ID(self):
            return self.getToken(MiniGoParser.ID, 0)

        def LPAREN(self):
            return self.getToken(MiniGoParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(MiniGoParser.RPAREN, 0)

        def block(self):
            return self.getTypedRuleContext(MiniGoParser.BlockContext,0)


        def param_decl(self):
            return self.getTypedRuleContext(MiniGoParser.Param_declContext,0)


        def types(self):
            return self.getTypedRuleContext(MiniGoParser.TypesContext,0)


        def getRuleIndex(self):
            return MiniGoParser.RULE_func_decl




    def func_decl(self):

        localctx = MiniGoParser.Func_declContext(self, self._ctx, self.state)
        self.enterRule(localctx, 162, self.RULE_func_decl)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 780
            self.match(MiniGoParser.FUNC)
            self.state = 781
            self.match(MiniGoParser.ID)
            self.state = 782
            self.match(MiniGoParser.LPAREN)
            self.state = 784
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==22:
                self.state = 783
                self.param_decl()


            self.state = 786
            self.match(MiniGoParser.RPAREN)
            self.state = 788
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 4503599631572480) != 0):
                self.state = 787
                self.types()


            self.state = 790
            self.block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Method_declContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FUNC(self):
            return self.getToken(MiniGoParser.FUNC, 0)

        def LPAREN(self, i:int=None):
            if i is None:
                return self.getTokens(MiniGoParser.LPAREN)
            else:
                return self.getToken(MiniGoParser.LPAREN, i)

        def ID(self, i:int=None):
            if i is None:
                return self.getTokens(MiniGoParser.ID)
            else:
                return self.getToken(MiniGoParser.ID, i)

        def compositeType(self):
            return self.getTypedRuleContext(MiniGoParser.CompositeTypeContext,0)


        def RPAREN(self, i:int=None):
            if i is None:
                return self.getTokens(MiniGoParser.RPAREN)
            else:
                return self.getToken(MiniGoParser.RPAREN, i)

        def block(self):
            return self.getTypedRuleContext(MiniGoParser.BlockContext,0)


        def param_decl(self):
            return self.getTypedRuleContext(MiniGoParser.Param_declContext,0)


        def types(self):
            return self.getTypedRuleContext(MiniGoParser.TypesContext,0)


        def getRuleIndex(self):
            return MiniGoParser.RULE_method_decl




    def method_decl(self):

        localctx = MiniGoParser.Method_declContext(self, self._ctx, self.state)
        self.enterRule(localctx, 164, self.RULE_method_decl)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 792
            self.match(MiniGoParser.FUNC)
            self.state = 793
            self.match(MiniGoParser.LPAREN)
            self.state = 794
            self.match(MiniGoParser.ID)
            self.state = 795
            self.compositeType()
            self.state = 796
            self.match(MiniGoParser.RPAREN)
            self.state = 797
            self.match(MiniGoParser.ID)
            self.state = 798
            self.match(MiniGoParser.LPAREN)
            self.state = 800
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==22:
                self.state = 799
                self.param_decl()


            self.state = 802
            self.match(MiniGoParser.RPAREN)
            self.state = 804
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 4503599631572480) != 0):
                self.state = 803
                self.types()


            self.state = 806
            self.block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BlockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LBRACE(self):
            return self.getToken(MiniGoParser.LBRACE, 0)

        def stmt_list(self):
            return self.getTypedRuleContext(MiniGoParser.Stmt_listContext,0)


        def RBRACE(self):
            return self.getToken(MiniGoParser.RBRACE, 0)

        def NEWLINE(self):
            return self.getToken(MiniGoParser.NEWLINE, 0)

        def getRuleIndex(self):
            return MiniGoParser.RULE_block




    def block(self):

        localctx = MiniGoParser.BlockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 166, self.RULE_block)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 808
            self.match(MiniGoParser.LBRACE)
            self.state = 810
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==21:
                self.state = 809
                self.match(MiniGoParser.NEWLINE)


            self.state = 812
            self.stmt_list(0)
            self.state = 813
            self.match(MiniGoParser.RBRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx



    def sempred(self, localctx:RuleContext, ruleIndex:int, predIndex:int):
        if self._predicates == None:
            self._predicates = dict()
        self._predicates[2] = self.decl_or_stmt_sempred
        self._predicates[4] = self.newlines_sempred
        self._predicates[7] = self.logical_or_expr_sempred
        self._predicates[8] = self.logical_and_expr_sempred
        self._predicates[9] = self.relational_expr_sempred
        self._predicates[10] = self.additive_expr_sempred
        self._predicates[11] = self.multiplicative_expr_sempred
        self._predicates[13] = self.field_access_sempred
        self._predicates[14] = self.atom_arr_access_sempred
        self._predicates[26] = self.logical_index_or_expr_sempred
        self._predicates[27] = self.logical_index_and_expr_sempred
        self._predicates[28] = self.relational_index_expr_sempred
        self._predicates[29] = self.additive_index_expr_sempred
        self._predicates[30] = self.multiplicative_index_expr_sempred
        self._predicates[42] = self.struct_field_access_head_sempred
        self._predicates[44] = self.struct_field_access_no_func_head_sempred
        self._predicates[46] = self.stmt_list_sempred
        pred = self._predicates.get(ruleIndex, None)
        if pred is None:
            raise Exception("No predicate with index:" + str(ruleIndex))
        else:
            return pred(localctx, predIndex)

    def decl_or_stmt_sempred(self, localctx:Decl_or_stmtContext, predIndex:int):
            if predIndex == 0:
                return self.precpred(self._ctx, 2)
         

            if predIndex == 1:
                return self.precpred(self._ctx, 1)
         

    def newlines_sempred(self, localctx:NewlinesContext, predIndex:int):
            if predIndex == 2:
                return self.precpred(self._ctx, 1)
         

    def logical_or_expr_sempred(self, localctx:Logical_or_exprContext, predIndex:int):
            if predIndex == 3:
                return self.precpred(self._ctx, 2)
         

    def logical_and_expr_sempred(self, localctx:Logical_and_exprContext, predIndex:int):
            if predIndex == 4:
                return self.precpred(self._ctx, 2)
         

    def relational_expr_sempred(self, localctx:Relational_exprContext, predIndex:int):
            if predIndex == 5:
                return self.precpred(self._ctx, 2)
         

    def additive_expr_sempred(self, localctx:Additive_exprContext, predIndex:int):
            if predIndex == 6:
                return self.precpred(self._ctx, 2)
         

    def multiplicative_expr_sempred(self, localctx:Multiplicative_exprContext, predIndex:int):
            if predIndex == 7:
                return self.precpred(self._ctx, 2)
         

    def field_access_sempred(self, localctx:Field_accessContext, predIndex:int):
            if predIndex == 8:
                return self.precpred(self._ctx, 2)
         

    def atom_arr_access_sempred(self, localctx:Atom_arr_accessContext, predIndex:int):
            if predIndex == 9:
                return self.precpred(self._ctx, 2)
         

    def logical_index_or_expr_sempred(self, localctx:Logical_index_or_exprContext, predIndex:int):
            if predIndex == 10:
                return self.precpred(self._ctx, 2)
         

    def logical_index_and_expr_sempred(self, localctx:Logical_index_and_exprContext, predIndex:int):
            if predIndex == 11:
                return self.precpred(self._ctx, 2)
         

    def relational_index_expr_sempred(self, localctx:Relational_index_exprContext, predIndex:int):
            if predIndex == 12:
                return self.precpred(self._ctx, 2)
         

    def additive_index_expr_sempred(self, localctx:Additive_index_exprContext, predIndex:int):
            if predIndex == 13:
                return self.precpred(self._ctx, 2)
         

    def multiplicative_index_expr_sempred(self, localctx:Multiplicative_index_exprContext, predIndex:int):
            if predIndex == 14:
                return self.precpred(self._ctx, 2)
         

    def struct_field_access_head_sempred(self, localctx:Struct_field_access_headContext, predIndex:int):
            if predIndex == 15:
                return self.precpred(self._ctx, 4)
         

    def struct_field_access_no_func_head_sempred(self, localctx:Struct_field_access_no_func_headContext, predIndex:int):
            if predIndex == 16:
                return self.precpred(self._ctx, 3)
         

    def stmt_list_sempred(self, localctx:Stmt_listContext, predIndex:int):
            if predIndex == 17:
                return self.precpred(self._ctx, 2)
         

            if predIndex == 18:
                return self.precpred(self._ctx, 1)
         




