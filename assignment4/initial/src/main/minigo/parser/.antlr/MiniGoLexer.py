# Generated from w:/CO3005/assignment4/initial/src/main/minigo/parser/MiniGo.g4 by ANTLR 4.13.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


from lexererr import *


def serializedATN():
    return [
        4,0,65,495,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,
        39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,
        45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,
        52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,
        58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,2,64,7,64,2,
        65,7,65,2,66,7,66,2,67,7,67,1,0,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,2,
        1,2,1,2,1,2,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,4,1,4,1,4,1,4,1,4,1,5,
        1,5,1,5,1,5,1,5,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,7,1,7,1,7,1,7,1,7,
        1,7,1,7,1,7,1,7,1,7,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,9,1,9,1,9,1,9,
        1,10,1,10,1,10,1,10,1,10,1,10,1,11,1,11,1,11,1,11,1,11,1,11,1,11,
        1,11,1,12,1,12,1,12,1,12,1,12,1,12,1,13,1,13,1,13,1,13,1,14,1,14,
        1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,15,1,15,1,15,1,15,1,15,1,15,
        1,16,1,16,1,16,1,16,1,16,1,16,1,17,1,17,1,17,1,17,1,18,1,18,1,18,
        1,18,1,18,1,19,1,19,1,19,1,19,1,19,1,19,1,20,3,20,256,8,20,1,20,
        1,20,1,20,1,21,1,21,5,21,263,8,21,10,21,12,21,266,9,21,1,22,1,22,
        1,23,1,23,1,24,1,24,1,25,1,25,1,26,1,26,1,27,1,27,1,27,1,28,1,28,
        1,28,1,29,1,29,1,30,1,30,1,30,1,31,1,31,1,32,1,32,1,32,1,33,1,33,
        1,33,1,34,1,34,1,34,1,35,1,35,1,36,1,36,1,37,1,37,1,37,1,38,1,38,
        1,38,1,39,1,39,1,39,1,40,1,40,1,40,1,41,1,41,1,41,1,42,1,42,1,42,
        1,43,1,43,1,44,1,44,1,45,1,45,1,46,1,46,1,47,1,47,1,48,1,48,1,49,
        1,49,1,50,1,50,1,51,1,51,1,52,1,52,1,53,1,53,1,53,5,53,345,8,53,
        10,53,12,53,348,9,53,3,53,350,8,53,1,54,1,54,1,54,4,54,355,8,54,
        11,54,12,54,356,1,55,1,55,1,55,4,55,362,8,55,11,55,12,55,363,1,56,
        1,56,1,56,4,56,369,8,56,11,56,12,56,370,1,57,1,57,1,58,1,58,3,58,
        377,8,58,1,58,4,58,380,8,58,11,58,12,58,381,1,59,4,59,385,8,59,11,
        59,12,59,386,1,59,1,59,5,59,391,8,59,10,59,12,59,394,9,59,1,59,3,
        59,397,8,59,1,59,4,59,400,8,59,11,59,12,59,401,1,59,1,59,1,59,1,
        59,4,59,408,8,59,11,59,12,59,409,1,59,1,59,3,59,414,8,59,1,60,4,
        60,417,8,60,11,60,12,60,418,1,60,1,60,1,61,1,61,1,62,1,62,1,62,1,
        62,1,62,1,62,5,62,431,8,62,10,62,12,62,434,9,62,1,62,1,62,1,63,1,
        63,1,63,1,63,5,63,442,8,63,10,63,12,63,445,9,63,1,63,1,63,1,64,1,
        64,1,64,1,64,1,64,5,64,454,8,64,10,64,12,64,457,9,64,1,64,1,64,1,
        64,1,64,1,64,1,65,1,65,1,65,1,66,1,66,1,66,1,66,5,66,471,8,66,10,
        66,12,66,474,9,66,1,66,1,66,1,66,1,66,1,67,1,67,1,67,1,67,1,67,1,
        67,5,67,486,8,67,10,67,12,67,489,9,67,1,67,3,67,492,8,67,1,67,1,
        67,1,455,0,68,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,
        23,12,25,13,27,14,29,15,31,16,33,17,35,18,37,19,39,20,41,21,43,22,
        45,23,47,24,49,25,51,26,53,27,55,28,57,29,59,30,61,31,63,32,65,33,
        67,34,69,35,71,36,73,37,75,38,77,39,79,40,81,41,83,42,85,43,87,44,
        89,45,91,46,93,47,95,48,97,49,99,50,101,51,103,52,105,53,107,54,
        109,55,111,56,113,57,115,0,117,0,119,58,121,59,123,0,125,60,127,
        61,129,62,131,63,133,64,135,65,1,0,18,3,0,65,90,95,95,97,122,4,0,
        48,57,65,90,95,95,97,122,1,0,49,57,1,0,48,57,2,0,88,88,120,120,3,
        0,48,57,65,70,97,102,2,0,79,79,111,111,1,0,48,55,2,0,66,66,98,98,
        1,0,48,49,2,0,69,69,101,101,2,0,43,43,45,45,3,0,9,9,12,13,32,32,
        3,0,10,10,34,34,92,92,5,0,34,34,92,92,110,110,114,114,116,116,2,
        0,10,10,13,13,4,0,10,10,13,13,34,34,92,92,1,1,10,10,519,0,1,1,0,
        0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,
        0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,
        0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,
        0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,
        0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,
        0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,
        0,63,1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,0,0,69,1,0,0,0,0,71,1,0,0,0,
        0,73,1,0,0,0,0,75,1,0,0,0,0,77,1,0,0,0,0,79,1,0,0,0,0,81,1,0,0,0,
        0,83,1,0,0,0,0,85,1,0,0,0,0,87,1,0,0,0,0,89,1,0,0,0,0,91,1,0,0,0,
        0,93,1,0,0,0,0,95,1,0,0,0,0,97,1,0,0,0,0,99,1,0,0,0,0,101,1,0,0,
        0,0,103,1,0,0,0,0,105,1,0,0,0,0,107,1,0,0,0,0,109,1,0,0,0,0,111,
        1,0,0,0,0,113,1,0,0,0,0,119,1,0,0,0,0,121,1,0,0,0,0,125,1,0,0,0,
        0,127,1,0,0,0,0,129,1,0,0,0,0,131,1,0,0,0,0,133,1,0,0,0,0,135,1,
        0,0,0,1,137,1,0,0,0,3,140,1,0,0,0,5,145,1,0,0,0,7,149,1,0,0,0,9,
        156,1,0,0,0,11,161,1,0,0,0,13,166,1,0,0,0,15,173,1,0,0,0,17,183,
        1,0,0,0,19,190,1,0,0,0,21,194,1,0,0,0,23,200,1,0,0,0,25,208,1,0,
        0,0,27,214,1,0,0,0,29,218,1,0,0,0,31,227,1,0,0,0,33,233,1,0,0,0,
        35,239,1,0,0,0,37,243,1,0,0,0,39,248,1,0,0,0,41,255,1,0,0,0,43,260,
        1,0,0,0,45,267,1,0,0,0,47,269,1,0,0,0,49,271,1,0,0,0,51,273,1,0,
        0,0,53,275,1,0,0,0,55,277,1,0,0,0,57,280,1,0,0,0,59,283,1,0,0,0,
        61,285,1,0,0,0,63,288,1,0,0,0,65,290,1,0,0,0,67,293,1,0,0,0,69,296,
        1,0,0,0,71,299,1,0,0,0,73,301,1,0,0,0,75,303,1,0,0,0,77,306,1,0,
        0,0,79,309,1,0,0,0,81,312,1,0,0,0,83,315,1,0,0,0,85,318,1,0,0,0,
        87,321,1,0,0,0,89,323,1,0,0,0,91,325,1,0,0,0,93,327,1,0,0,0,95,329,
        1,0,0,0,97,331,1,0,0,0,99,333,1,0,0,0,101,335,1,0,0,0,103,337,1,
        0,0,0,105,339,1,0,0,0,107,349,1,0,0,0,109,351,1,0,0,0,111,358,1,
        0,0,0,113,365,1,0,0,0,115,372,1,0,0,0,117,374,1,0,0,0,119,413,1,
        0,0,0,121,416,1,0,0,0,123,422,1,0,0,0,125,424,1,0,0,0,127,437,1,
        0,0,0,129,448,1,0,0,0,131,463,1,0,0,0,133,466,1,0,0,0,135,479,1,
        0,0,0,137,138,5,105,0,0,138,139,5,102,0,0,139,2,1,0,0,0,140,141,
        5,101,0,0,141,142,5,108,0,0,142,143,5,115,0,0,143,144,5,101,0,0,
        144,4,1,0,0,0,145,146,5,102,0,0,146,147,5,111,0,0,147,148,5,114,
        0,0,148,6,1,0,0,0,149,150,5,114,0,0,150,151,5,101,0,0,151,152,5,
        116,0,0,152,153,5,117,0,0,153,154,5,114,0,0,154,155,5,110,0,0,155,
        8,1,0,0,0,156,157,5,102,0,0,157,158,5,117,0,0,158,159,5,110,0,0,
        159,160,5,99,0,0,160,10,1,0,0,0,161,162,5,116,0,0,162,163,5,121,
        0,0,163,164,5,112,0,0,164,165,5,101,0,0,165,12,1,0,0,0,166,167,5,
        115,0,0,167,168,5,116,0,0,168,169,5,114,0,0,169,170,5,117,0,0,170,
        171,5,99,0,0,171,172,5,116,0,0,172,14,1,0,0,0,173,174,5,105,0,0,
        174,175,5,110,0,0,175,176,5,116,0,0,176,177,5,101,0,0,177,178,5,
        114,0,0,178,179,5,102,0,0,179,180,5,97,0,0,180,181,5,99,0,0,181,
        182,5,101,0,0,182,16,1,0,0,0,183,184,5,115,0,0,184,185,5,116,0,0,
        185,186,5,114,0,0,186,187,5,105,0,0,187,188,5,110,0,0,188,189,5,
        103,0,0,189,18,1,0,0,0,190,191,5,105,0,0,191,192,5,110,0,0,192,193,
        5,116,0,0,193,20,1,0,0,0,194,195,5,102,0,0,195,196,5,108,0,0,196,
        197,5,111,0,0,197,198,5,97,0,0,198,199,5,116,0,0,199,22,1,0,0,0,
        200,201,5,98,0,0,201,202,5,111,0,0,202,203,5,111,0,0,203,204,5,108,
        0,0,204,205,5,101,0,0,205,206,5,97,0,0,206,207,5,110,0,0,207,24,
        1,0,0,0,208,209,5,99,0,0,209,210,5,111,0,0,210,211,5,110,0,0,211,
        212,5,115,0,0,212,213,5,116,0,0,213,26,1,0,0,0,214,215,5,118,0,0,
        215,216,5,97,0,0,216,217,5,114,0,0,217,28,1,0,0,0,218,219,5,99,0,
        0,219,220,5,111,0,0,220,221,5,110,0,0,221,222,5,116,0,0,222,223,
        5,105,0,0,223,224,5,110,0,0,224,225,5,117,0,0,225,226,5,101,0,0,
        226,30,1,0,0,0,227,228,5,98,0,0,228,229,5,114,0,0,229,230,5,101,
        0,0,230,231,5,97,0,0,231,232,5,107,0,0,232,32,1,0,0,0,233,234,5,
        114,0,0,234,235,5,97,0,0,235,236,5,110,0,0,236,237,5,103,0,0,237,
        238,5,101,0,0,238,34,1,0,0,0,239,240,5,110,0,0,240,241,5,105,0,0,
        241,242,5,108,0,0,242,36,1,0,0,0,243,244,5,116,0,0,244,245,5,114,
        0,0,245,246,5,117,0,0,246,247,5,101,0,0,247,38,1,0,0,0,248,249,5,
        102,0,0,249,250,5,97,0,0,250,251,5,108,0,0,251,252,5,115,0,0,252,
        253,5,101,0,0,253,40,1,0,0,0,254,256,5,13,0,0,255,254,1,0,0,0,255,
        256,1,0,0,0,256,257,1,0,0,0,257,258,5,10,0,0,258,259,6,20,0,0,259,
        42,1,0,0,0,260,264,7,0,0,0,261,263,7,1,0,0,262,261,1,0,0,0,263,266,
        1,0,0,0,264,262,1,0,0,0,264,265,1,0,0,0,265,44,1,0,0,0,266,264,1,
        0,0,0,267,268,5,43,0,0,268,46,1,0,0,0,269,270,5,45,0,0,270,48,1,
        0,0,0,271,272,5,42,0,0,272,50,1,0,0,0,273,274,5,47,0,0,274,52,1,
        0,0,0,275,276,5,37,0,0,276,54,1,0,0,0,277,278,5,61,0,0,278,279,5,
        61,0,0,279,56,1,0,0,0,280,281,5,33,0,0,281,282,5,61,0,0,282,58,1,
        0,0,0,283,284,5,60,0,0,284,60,1,0,0,0,285,286,5,60,0,0,286,287,5,
        61,0,0,287,62,1,0,0,0,288,289,5,62,0,0,289,64,1,0,0,0,290,291,5,
        62,0,0,291,292,5,61,0,0,292,66,1,0,0,0,293,294,5,38,0,0,294,295,
        5,38,0,0,295,68,1,0,0,0,296,297,5,124,0,0,297,298,5,124,0,0,298,
        70,1,0,0,0,299,300,5,33,0,0,300,72,1,0,0,0,301,302,5,61,0,0,302,
        74,1,0,0,0,303,304,5,58,0,0,304,305,5,61,0,0,305,76,1,0,0,0,306,
        307,5,43,0,0,307,308,5,61,0,0,308,78,1,0,0,0,309,310,5,45,0,0,310,
        311,5,61,0,0,311,80,1,0,0,0,312,313,5,42,0,0,313,314,5,61,0,0,314,
        82,1,0,0,0,315,316,5,47,0,0,316,317,5,61,0,0,317,84,1,0,0,0,318,
        319,5,37,0,0,319,320,5,61,0,0,320,86,1,0,0,0,321,322,5,46,0,0,322,
        88,1,0,0,0,323,324,5,44,0,0,324,90,1,0,0,0,325,326,5,59,0,0,326,
        92,1,0,0,0,327,328,5,58,0,0,328,94,1,0,0,0,329,330,5,40,0,0,330,
        96,1,0,0,0,331,332,5,41,0,0,332,98,1,0,0,0,333,334,5,123,0,0,334,
        100,1,0,0,0,335,336,5,125,0,0,336,102,1,0,0,0,337,338,5,91,0,0,338,
        104,1,0,0,0,339,340,5,93,0,0,340,106,1,0,0,0,341,350,5,48,0,0,342,
        346,7,2,0,0,343,345,7,3,0,0,344,343,1,0,0,0,345,348,1,0,0,0,346,
        344,1,0,0,0,346,347,1,0,0,0,347,350,1,0,0,0,348,346,1,0,0,0,349,
        341,1,0,0,0,349,342,1,0,0,0,350,108,1,0,0,0,351,352,5,48,0,0,352,
        354,7,4,0,0,353,355,7,5,0,0,354,353,1,0,0,0,355,356,1,0,0,0,356,
        354,1,0,0,0,356,357,1,0,0,0,357,110,1,0,0,0,358,359,5,48,0,0,359,
        361,7,6,0,0,360,362,7,7,0,0,361,360,1,0,0,0,362,363,1,0,0,0,363,
        361,1,0,0,0,363,364,1,0,0,0,364,112,1,0,0,0,365,366,5,48,0,0,366,
        368,7,8,0,0,367,369,7,9,0,0,368,367,1,0,0,0,369,370,1,0,0,0,370,
        368,1,0,0,0,370,371,1,0,0,0,371,114,1,0,0,0,372,373,7,3,0,0,373,
        116,1,0,0,0,374,376,7,10,0,0,375,377,7,11,0,0,376,375,1,0,0,0,376,
        377,1,0,0,0,377,379,1,0,0,0,378,380,3,115,57,0,379,378,1,0,0,0,380,
        381,1,0,0,0,381,379,1,0,0,0,381,382,1,0,0,0,382,118,1,0,0,0,383,
        385,3,115,57,0,384,383,1,0,0,0,385,386,1,0,0,0,386,384,1,0,0,0,386,
        387,1,0,0,0,387,388,1,0,0,0,388,392,5,46,0,0,389,391,3,115,57,0,
        390,389,1,0,0,0,391,394,1,0,0,0,392,390,1,0,0,0,392,393,1,0,0,0,
        393,396,1,0,0,0,394,392,1,0,0,0,395,397,3,117,58,0,396,395,1,0,0,
        0,396,397,1,0,0,0,397,414,1,0,0,0,398,400,3,115,57,0,399,398,1,0,
        0,0,400,401,1,0,0,0,401,399,1,0,0,0,401,402,1,0,0,0,402,403,1,0,
        0,0,403,404,5,46,0,0,404,405,3,117,58,0,405,414,1,0,0,0,406,408,
        3,115,57,0,407,406,1,0,0,0,408,409,1,0,0,0,409,407,1,0,0,0,409,410,
        1,0,0,0,410,411,1,0,0,0,411,412,5,46,0,0,412,414,1,0,0,0,413,384,
        1,0,0,0,413,399,1,0,0,0,413,407,1,0,0,0,414,120,1,0,0,0,415,417,
        7,12,0,0,416,415,1,0,0,0,417,418,1,0,0,0,418,416,1,0,0,0,418,419,
        1,0,0,0,419,420,1,0,0,0,420,421,6,60,1,0,421,122,1,0,0,0,422,423,
        5,34,0,0,423,124,1,0,0,0,424,432,5,34,0,0,425,431,8,13,0,0,426,427,
        5,92,0,0,427,431,7,14,0,0,428,429,5,39,0,0,429,431,5,34,0,0,430,
        425,1,0,0,0,430,426,1,0,0,0,430,428,1,0,0,0,431,434,1,0,0,0,432,
        430,1,0,0,0,432,433,1,0,0,0,433,435,1,0,0,0,434,432,1,0,0,0,435,
        436,5,34,0,0,436,126,1,0,0,0,437,438,5,47,0,0,438,439,5,47,0,0,439,
        443,1,0,0,0,440,442,8,15,0,0,441,440,1,0,0,0,442,445,1,0,0,0,443,
        441,1,0,0,0,443,444,1,0,0,0,444,446,1,0,0,0,445,443,1,0,0,0,446,
        447,6,63,1,0,447,128,1,0,0,0,448,449,5,47,0,0,449,450,5,42,0,0,450,
        455,1,0,0,0,451,454,3,129,64,0,452,454,9,0,0,0,453,451,1,0,0,0,453,
        452,1,0,0,0,454,457,1,0,0,0,455,456,1,0,0,0,455,453,1,0,0,0,456,
        458,1,0,0,0,457,455,1,0,0,0,458,459,5,42,0,0,459,460,5,47,0,0,460,
        461,1,0,0,0,461,462,6,64,1,0,462,130,1,0,0,0,463,464,9,0,0,0,464,
        465,6,65,2,0,465,132,1,0,0,0,466,472,5,34,0,0,467,468,5,92,0,0,468,
        471,7,14,0,0,469,471,8,16,0,0,470,467,1,0,0,0,470,469,1,0,0,0,471,
        474,1,0,0,0,472,470,1,0,0,0,472,473,1,0,0,0,473,475,1,0,0,0,474,
        472,1,0,0,0,475,476,5,92,0,0,476,477,8,14,0,0,477,478,6,66,3,0,478,
        134,1,0,0,0,479,487,5,34,0,0,480,486,8,13,0,0,481,482,5,92,0,0,482,
        486,7,14,0,0,483,484,5,39,0,0,484,486,5,34,0,0,485,480,1,0,0,0,485,
        481,1,0,0,0,485,483,1,0,0,0,486,489,1,0,0,0,487,485,1,0,0,0,487,
        488,1,0,0,0,488,491,1,0,0,0,489,487,1,0,0,0,490,492,7,17,0,0,491,
        490,1,0,0,0,492,493,1,0,0,0,493,494,6,67,4,0,494,136,1,0,0,0,27,
        0,255,264,346,349,356,363,370,376,381,386,392,396,401,409,413,418,
        430,432,443,453,455,470,472,485,487,491,5,1,20,0,6,0,0,1,65,1,1,
        66,2,1,67,3
    ]

class MiniGoLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    IF = 1
    ELSE = 2
    FOR = 3
    RETURN = 4
    FUNC = 5
    TYPE = 6
    STRUCT = 7
    INTERFACE = 8
    STRING = 9
    INT = 10
    FLOAT = 11
    BOOLEAN = 12
    CONST = 13
    VAR = 14
    CONTINUE = 15
    BREAK = 16
    RANGE = 17
    NIL = 18
    TRUE = 19
    FALSE = 20
    NEWLINE = 21
    ID = 22
    ADD = 23
    SUB = 24
    MUL = 25
    DIV = 26
    MOD = 27
    EQ = 28
    NEQ = 29
    LT = 30
    LE = 31
    GT = 32
    GE = 33
    AND = 34
    OR = 35
    NOT = 36
    ASSIGN = 37
    SHORT_ASSIGN = 38
    ADD_ASSIGN = 39
    SUB_ASSIGN = 40
    MUL_ASSIGN = 41
    DIV_ASSIGN = 42
    MOD_ASSIGN = 43
    DOT = 44
    COMMA = 45
    SEMICOLON = 46
    COLON = 47
    LPAREN = 48
    RPAREN = 49
    LBRACE = 50
    RBRACE = 51
    LBRACKET = 52
    RBRACKET = 53
    INT_LIT = 54
    HEX_LIT = 55
    OCT_LIT = 56
    BIN_LIT = 57
    FLOAT_LIT = 58
    WS = 59
    STRING_LIT = 60
    LINE_COMMENT = 61
    BLOCK_COMMENT = 62
    ERROR_CHAR = 63
    ILLEGAL_ESCAPE = 64
    UNCLOSE_STRING = 65

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'if'", "'else'", "'for'", "'return'", "'func'", "'type'", "'struct'", 
            "'interface'", "'string'", "'int'", "'float'", "'boolean'", 
            "'const'", "'var'", "'continue'", "'break'", "'range'", "'nil'", 
            "'true'", "'false'", "'+'", "'-'", "'*'", "'/'", "'%'", "'=='", 
            "'!='", "'<'", "'<='", "'>'", "'>='", "'&&'", "'||'", "'!'", 
            "'='", "':='", "'+='", "'-='", "'*='", "'/='", "'%='", "'.'", 
            "','", "';'", "':'", "'('", "')'", "'{'", "'}'", "'['", "']'" ]

    symbolicNames = [ "<INVALID>",
            "IF", "ELSE", "FOR", "RETURN", "FUNC", "TYPE", "STRUCT", "INTERFACE", 
            "STRING", "INT", "FLOAT", "BOOLEAN", "CONST", "VAR", "CONTINUE", 
            "BREAK", "RANGE", "NIL", "TRUE", "FALSE", "NEWLINE", "ID", "ADD", 
            "SUB", "MUL", "DIV", "MOD", "EQ", "NEQ", "LT", "LE", "GT", "GE", 
            "AND", "OR", "NOT", "ASSIGN", "SHORT_ASSIGN", "ADD_ASSIGN", 
            "SUB_ASSIGN", "MUL_ASSIGN", "DIV_ASSIGN", "MOD_ASSIGN", "DOT", 
            "COMMA", "SEMICOLON", "COLON", "LPAREN", "RPAREN", "LBRACE", 
            "RBRACE", "LBRACKET", "RBRACKET", "INT_LIT", "HEX_LIT", "OCT_LIT", 
            "BIN_LIT", "FLOAT_LIT", "WS", "STRING_LIT", "LINE_COMMENT", 
            "BLOCK_COMMENT", "ERROR_CHAR", "ILLEGAL_ESCAPE", "UNCLOSE_STRING" ]

    ruleNames = [ "IF", "ELSE", "FOR", "RETURN", "FUNC", "TYPE", "STRUCT", 
                  "INTERFACE", "STRING", "INT", "FLOAT", "BOOLEAN", "CONST", 
                  "VAR", "CONTINUE", "BREAK", "RANGE", "NIL", "TRUE", "FALSE", 
                  "NEWLINE", "ID", "ADD", "SUB", "MUL", "DIV", "MOD", "EQ", 
                  "NEQ", "LT", "LE", "GT", "GE", "AND", "OR", "NOT", "ASSIGN", 
                  "SHORT_ASSIGN", "ADD_ASSIGN", "SUB_ASSIGN", "MUL_ASSIGN", 
                  "DIV_ASSIGN", "MOD_ASSIGN", "DOT", "COMMA", "SEMICOLON", 
                  "COLON", "LPAREN", "RPAREN", "LBRACE", "RBRACE", "LBRACKET", 
                  "RBRACKET", "INT_LIT", "HEX_LIT", "OCT_LIT", "BIN_LIT", 
                  "Digit", "Exponent", "FLOAT_LIT", "WS", "DOUBTED_QUOTE", 
                  "STRING_LIT", "LINE_COMMENT", "BLOCK_COMMENT", "ERROR_CHAR", 
                  "ILLEGAL_ESCAPE", "UNCLOSE_STRING" ]

    grammarFileName = "MiniGo.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


    def emit(self):
        self.lastTokenType = self.type
        tk = self.type
        if tk == self.UNCLOSE_STRING:       
            result = super().emit();
            raise UncloseString(result.text);
        elif tk == self.ILLEGAL_ESCAPE:
            result = super().emit();
            raise IllegalEscape(result.text);
        elif tk == self.ERROR_CHAR:
            result = super().emit();
            raise ErrorToken(result.text); 
        else:
            return super().emit();


    def action(self, localctx:RuleContext, ruleIndex:int, actionIndex:int):
        if self._actions is None:
            actions = dict()
            actions[20] = self.NEWLINE_action 
            actions[65] = self.ERROR_CHAR_action 
            actions[66] = self.ILLEGAL_ESCAPE_action 
            actions[67] = self.UNCLOSE_STRING_action 
            self._actions = actions
        action = self._actions.get(ruleIndex, None)
        if action is not None:
            action(localctx, actionIndex)
        else:
            raise Exception("No registered action for:" + str(ruleIndex))


    def NEWLINE_action(self, localctx:RuleContext , actionIndex:int):
        if actionIndex == 0:

                if hasattr(self, 'lastTokenType') and self.lastTokenType in [
                    self.ID, self.INT_LIT, self.HEX_LIT, self.BIN_LIT, self.OCT_LIT, self.FLOAT_LIT, self.BOOLEAN, self.STRING_LIT, 
                    self.RPAREN, self.RBRACKET, self.RBRACE, self.STRING, self.INT, self.FLOAT, self.BOOLEAN, self.NIL, self.TRUE, self.FALSE,
                    self.RETURN, self.CONTINUE, self.BREAK
                ]:
                    self.type = self.SEMICOLON
                    self.text = ';'
                else:
                    self.skip()

     

    def ERROR_CHAR_action(self, localctx:RuleContext , actionIndex:int):
        if actionIndex == 1:
            raise ErrorToken(self.text)
     

    def ILLEGAL_ESCAPE_action(self, localctx:RuleContext , actionIndex:int):
        if actionIndex == 2:

                        raise IllegalEscape(self.text);
                    
     

    def UNCLOSE_STRING_action(self, localctx:RuleContext , actionIndex:int):
        if actionIndex == 3:

                if (len(self.text) >= 2 and self.text[-1] == '\n' and self.text[-2] == '\r'):
                    raise UncloseString(self.text[0:-2])
                elif (self.text[-1] == '\n'):
                    raise UncloseString(self.text[0:-1])
                else:
                    raise UncloseString(self.text)

     


