# Generated from d:/CO3005/assignment1/src/main/minigo/parser/MiniGo.g4 by ANTLR 4.13.1
# encoding: utf-8
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
	from typing import TextIO
else:
	from typing.io import TextIO

def serializedATN():
    return [
        4,1,78,931,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
        6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,
        2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,
        7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,
        2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,
        7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,
        2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,
        7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,52,7,52,
        2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,58,2,59,
        7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,2,64,7,64,2,65,7,65,
        2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,2,71,7,71,2,72,
        7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,2,78,7,78,
        2,79,7,79,2,80,7,80,2,81,7,81,1,0,1,0,1,0,1,1,1,1,1,1,3,1,171,8,
        1,1,2,1,2,1,2,1,2,3,2,177,8,2,1,2,1,2,1,2,1,2,1,2,1,2,5,2,185,8,
        2,10,2,12,2,188,9,2,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,3,3,199,
        8,3,1,3,1,3,3,3,203,8,3,1,4,1,4,1,4,1,4,1,4,5,4,210,8,4,10,4,12,
        4,213,9,4,1,5,1,5,1,6,1,6,1,6,1,6,1,6,1,6,5,6,223,8,6,10,6,12,6,
        226,9,6,1,7,1,7,1,7,1,7,1,7,1,7,5,7,234,8,7,10,7,12,7,237,9,7,1,
        8,1,8,1,8,1,8,1,8,1,8,5,8,245,8,8,10,8,12,8,248,9,8,1,9,1,9,1,9,
        1,9,1,9,1,9,5,9,256,8,9,10,9,12,9,259,9,9,1,10,1,10,1,10,1,10,1,
        10,1,10,5,10,267,8,10,10,10,12,10,270,9,10,1,11,1,11,1,11,3,11,275,
        8,11,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,3,12,285,8,12,5,12,
        287,8,12,10,12,12,12,290,9,12,1,13,1,13,1,13,1,13,1,13,1,13,1,13,
        1,13,5,13,300,8,13,10,13,12,13,303,9,13,1,14,1,14,1,14,1,14,1,14,
        1,14,1,14,1,14,3,14,313,8,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,
        3,14,322,8,14,1,14,1,14,3,14,326,8,14,1,14,3,14,329,8,14,1,15,1,
        15,1,15,1,15,1,15,3,15,336,8,15,1,16,1,16,1,16,1,16,1,16,1,16,1,
        16,1,16,3,16,346,8,16,1,17,1,17,1,17,1,17,1,17,1,17,3,17,354,8,17,
        1,17,1,17,1,17,3,17,359,8,17,1,18,1,18,3,18,363,8,18,1,19,1,19,1,
        20,1,20,3,20,369,8,20,1,21,1,21,1,21,1,22,1,22,1,22,1,22,3,22,378,
        8,22,1,23,1,23,1,24,1,24,1,24,1,24,1,24,1,24,5,24,388,8,24,10,24,
        12,24,391,9,24,1,25,1,25,1,25,1,25,1,25,1,25,5,25,399,8,25,10,25,
        12,25,402,9,25,1,26,1,26,1,26,1,26,1,26,1,26,5,26,410,8,26,10,26,
        12,26,413,9,26,1,27,1,27,1,27,1,27,1,27,1,27,5,27,421,8,27,10,27,
        12,27,424,9,27,1,28,1,28,1,28,1,28,1,28,1,28,5,28,432,8,28,10,28,
        12,28,435,9,28,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,
        1,29,1,29,3,29,449,8,29,1,30,1,30,1,30,3,30,454,8,30,1,31,1,31,1,
        31,1,31,1,31,1,31,1,31,5,31,463,8,31,10,31,12,31,466,9,31,1,32,1,
        32,1,32,1,32,1,32,1,32,1,33,1,33,3,33,476,8,33,1,33,1,33,3,33,480,
        8,33,1,34,1,34,1,34,1,34,3,34,486,8,34,1,35,1,35,1,35,1,35,1,35,
        1,36,1,36,1,36,3,36,496,8,36,1,37,1,37,1,37,1,37,3,37,502,8,37,1,
        38,1,38,1,38,1,38,1,39,1,39,1,39,1,39,3,39,512,8,39,1,39,1,39,1,
        39,1,39,1,39,3,39,519,8,39,5,39,521,8,39,10,39,12,39,524,9,39,1,
        40,1,40,1,40,3,40,529,8,40,1,40,1,40,1,40,1,40,3,40,535,8,40,5,40,
        537,8,40,10,40,12,40,540,9,40,1,41,1,41,1,41,1,41,1,41,1,41,1,41,
        1,41,1,41,1,41,1,41,1,41,1,41,1,41,1,41,1,41,1,41,3,41,559,8,41,
        1,42,1,42,1,42,1,42,1,42,1,42,1,42,1,42,1,42,1,42,1,42,1,42,3,42,
        573,8,42,1,43,1,43,1,43,1,43,1,43,5,43,580,8,43,10,43,12,43,583,
        9,43,1,44,1,44,1,44,1,44,1,45,1,45,1,46,1,46,1,46,1,46,3,46,595,
        8,46,1,47,1,47,1,47,3,47,600,8,47,1,48,1,48,1,48,1,48,1,48,3,48,
        607,8,48,1,48,1,48,1,48,1,49,3,49,613,8,49,1,49,1,49,1,49,1,49,1,
        49,1,49,3,49,621,8,49,1,49,1,49,1,49,3,49,626,8,49,1,49,3,49,629,
        8,49,1,49,1,49,3,49,633,8,49,1,49,3,49,636,8,49,3,49,638,8,49,1,
        50,1,50,1,50,1,50,1,50,1,50,1,50,3,50,647,8,50,1,50,1,50,1,50,1,
        50,1,50,1,50,1,50,1,50,1,50,1,50,3,50,659,8,50,1,50,1,50,1,50,1,
        50,1,50,3,50,666,8,50,1,50,1,50,3,50,670,8,50,1,51,1,51,1,51,1,51,
        3,51,676,8,51,1,52,1,52,3,52,680,8,52,1,53,1,53,1,54,1,54,3,54,686,
        8,54,1,55,1,55,1,56,1,56,1,57,1,57,1,57,3,57,695,8,57,1,57,1,57,
        1,57,1,58,1,58,1,58,1,58,1,59,1,59,1,59,1,59,1,59,3,59,709,8,59,
        1,59,1,59,1,59,1,60,1,60,1,60,1,60,1,60,1,61,1,61,1,61,1,61,3,61,
        723,8,61,1,62,1,62,1,63,1,63,1,64,1,64,1,64,1,65,1,65,1,66,1,66,
        1,66,1,66,1,66,1,66,3,66,740,8,66,1,67,1,67,1,67,1,67,3,67,746,8,
        67,1,68,1,68,1,68,1,68,1,68,3,68,753,8,68,1,69,1,69,3,69,757,8,69,
        1,69,1,69,3,69,761,8,69,3,69,763,8,69,1,70,1,70,1,70,1,70,1,70,3,
        70,770,8,70,1,70,1,70,1,70,1,71,1,71,1,71,1,71,1,71,3,71,780,8,71,
        1,71,3,71,783,8,71,1,72,1,72,1,72,1,72,3,72,789,8,72,1,73,1,73,1,
        73,1,73,1,73,3,73,796,8,73,1,73,1,73,1,73,1,74,1,74,1,74,3,74,804,
        8,74,1,74,1,74,3,74,808,8,74,1,74,1,74,3,74,812,8,74,1,74,3,74,815,
        8,74,1,75,1,75,1,75,1,75,1,75,1,75,3,75,823,8,75,1,76,1,76,1,76,
        3,76,828,8,76,1,77,1,77,1,77,3,77,833,8,77,1,77,1,77,3,77,837,8,
        77,1,78,1,78,1,78,1,78,3,78,843,8,78,1,78,1,78,3,78,847,8,78,1,78,
        1,78,1,79,1,79,1,79,1,79,1,79,1,79,1,79,1,79,3,79,859,8,79,1,79,
        1,79,3,79,863,8,79,1,79,1,79,1,80,1,80,3,80,869,8,80,1,80,1,80,1,
        80,1,81,1,81,1,81,1,81,1,81,1,81,1,81,1,81,1,81,1,81,1,81,1,81,1,
        81,1,81,1,81,1,81,1,81,1,81,1,81,1,81,1,81,1,81,1,81,1,81,1,81,1,
        81,1,81,1,81,1,81,1,81,1,81,1,81,1,81,1,81,1,81,1,81,1,81,1,81,1,
        81,1,81,1,81,1,81,1,81,1,81,1,81,1,81,1,81,1,81,1,81,1,81,1,81,1,
        81,1,81,1,81,1,81,3,81,929,8,81,1,81,0,18,4,8,12,14,16,18,20,24,
        26,48,50,52,54,56,62,78,80,86,82,0,2,4,6,8,10,12,14,16,18,20,22,
        24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,54,56,58,60,62,64,66,
        68,70,72,74,76,78,80,82,84,86,88,90,92,94,96,98,100,102,104,106,
        108,110,112,114,116,118,120,122,124,126,128,130,132,134,136,138,
        140,142,144,146,148,150,152,154,156,158,160,162,0,11,1,0,47,48,1,
        0,41,42,1,0,43,46,1,0,36,37,1,0,38,40,2,0,34,34,59,59,1,0,67,70,
        2,0,50,50,52,56,1,0,50,51,1,0,9,12,1,0,7,8,1005,0,164,1,0,0,0,2,
        170,1,0,0,0,4,176,1,0,0,0,6,198,1,0,0,0,8,204,1,0,0,0,10,214,1,0,
        0,0,12,216,1,0,0,0,14,227,1,0,0,0,16,238,1,0,0,0,18,249,1,0,0,0,
        20,260,1,0,0,0,22,271,1,0,0,0,24,276,1,0,0,0,26,291,1,0,0,0,28,328,
        1,0,0,0,30,335,1,0,0,0,32,345,1,0,0,0,34,358,1,0,0,0,36,362,1,0,
        0,0,38,364,1,0,0,0,40,368,1,0,0,0,42,370,1,0,0,0,44,373,1,0,0,0,
        46,379,1,0,0,0,48,381,1,0,0,0,50,392,1,0,0,0,52,403,1,0,0,0,54,414,
        1,0,0,0,56,425,1,0,0,0,58,448,1,0,0,0,60,453,1,0,0,0,62,455,1,0,
        0,0,64,467,1,0,0,0,66,475,1,0,0,0,68,481,1,0,0,0,70,487,1,0,0,0,
        72,495,1,0,0,0,74,501,1,0,0,0,76,503,1,0,0,0,78,511,1,0,0,0,80,528,
        1,0,0,0,82,558,1,0,0,0,84,572,1,0,0,0,86,574,1,0,0,0,88,584,1,0,
        0,0,90,588,1,0,0,0,92,590,1,0,0,0,94,599,1,0,0,0,96,601,1,0,0,0,
        98,637,1,0,0,0,100,669,1,0,0,0,102,675,1,0,0,0,104,679,1,0,0,0,106,
        681,1,0,0,0,108,683,1,0,0,0,110,687,1,0,0,0,112,689,1,0,0,0,114,
        691,1,0,0,0,116,699,1,0,0,0,118,708,1,0,0,0,120,713,1,0,0,0,122,
        722,1,0,0,0,124,724,1,0,0,0,126,726,1,0,0,0,128,728,1,0,0,0,130,
        731,1,0,0,0,132,733,1,0,0,0,134,741,1,0,0,0,136,752,1,0,0,0,138,
        762,1,0,0,0,140,764,1,0,0,0,142,779,1,0,0,0,144,784,1,0,0,0,146,
        790,1,0,0,0,148,811,1,0,0,0,150,816,1,0,0,0,152,827,1,0,0,0,154,
        836,1,0,0,0,156,838,1,0,0,0,158,850,1,0,0,0,160,866,1,0,0,0,162,
        928,1,0,0,0,164,165,3,2,1,0,165,166,5,0,0,1,166,1,1,0,0,0,167,168,
        5,34,0,0,168,171,3,2,1,0,169,171,3,4,2,0,170,167,1,0,0,0,170,169,
        1,0,0,0,171,3,1,0,0,0,172,173,6,2,-1,0,173,177,3,6,3,0,174,177,3,
        82,41,0,175,177,3,10,5,0,176,172,1,0,0,0,176,174,1,0,0,0,176,175,
        1,0,0,0,177,186,1,0,0,0,178,179,10,4,0,0,179,185,5,34,0,0,180,181,
        10,3,0,0,181,185,3,6,3,0,182,183,10,2,0,0,183,185,3,82,41,0,184,
        178,1,0,0,0,184,180,1,0,0,0,184,182,1,0,0,0,185,188,1,0,0,0,186,
        184,1,0,0,0,186,187,1,0,0,0,187,5,1,0,0,0,188,186,1,0,0,0,189,199,
        3,140,70,0,190,199,3,146,73,0,191,199,3,120,60,0,192,199,3,114,57,
        0,193,199,3,132,66,0,194,199,3,116,58,0,195,199,3,118,59,0,196,199,
        3,156,78,0,197,199,3,158,79,0,198,189,1,0,0,0,198,190,1,0,0,0,198,
        191,1,0,0,0,198,192,1,0,0,0,198,193,1,0,0,0,198,194,1,0,0,0,198,
        195,1,0,0,0,198,196,1,0,0,0,198,197,1,0,0,0,199,202,1,0,0,0,200,
        203,5,59,0,0,201,203,3,8,4,0,202,200,1,0,0,0,202,201,1,0,0,0,203,
        7,1,0,0,0,204,205,6,4,-1,0,205,206,5,34,0,0,206,211,1,0,0,0,207,
        208,10,1,0,0,208,210,5,34,0,0,209,207,1,0,0,0,210,213,1,0,0,0,211,
        209,1,0,0,0,211,212,1,0,0,0,212,9,1,0,0,0,213,211,1,0,0,0,214,215,
        3,12,6,0,215,11,1,0,0,0,216,217,6,6,-1,0,217,218,3,14,7,0,218,224,
        1,0,0,0,219,220,10,2,0,0,220,221,7,0,0,0,221,223,3,14,7,0,222,219,
        1,0,0,0,223,226,1,0,0,0,224,222,1,0,0,0,224,225,1,0,0,0,225,13,1,
        0,0,0,226,224,1,0,0,0,227,228,6,7,-1,0,228,229,3,16,8,0,229,235,
        1,0,0,0,230,231,10,2,0,0,231,232,7,1,0,0,232,234,3,16,8,0,233,230,
        1,0,0,0,234,237,1,0,0,0,235,233,1,0,0,0,235,236,1,0,0,0,236,15,1,
        0,0,0,237,235,1,0,0,0,238,239,6,8,-1,0,239,240,3,18,9,0,240,246,
        1,0,0,0,241,242,10,2,0,0,242,243,7,2,0,0,243,245,3,18,9,0,244,241,
        1,0,0,0,245,248,1,0,0,0,246,244,1,0,0,0,246,247,1,0,0,0,247,17,1,
        0,0,0,248,246,1,0,0,0,249,250,6,9,-1,0,250,251,3,20,10,0,251,257,
        1,0,0,0,252,253,10,2,0,0,253,254,7,3,0,0,254,256,3,20,10,0,255,252,
        1,0,0,0,256,259,1,0,0,0,257,255,1,0,0,0,257,258,1,0,0,0,258,19,1,
        0,0,0,259,257,1,0,0,0,260,261,6,10,-1,0,261,262,3,22,11,0,262,268,
        1,0,0,0,263,264,10,2,0,0,264,265,7,4,0,0,265,267,3,22,11,0,266,263,
        1,0,0,0,267,270,1,0,0,0,268,266,1,0,0,0,268,269,1,0,0,0,269,21,1,
        0,0,0,270,268,1,0,0,0,271,274,3,62,31,0,272,275,3,24,12,0,273,275,
        3,26,13,0,274,272,1,0,0,0,274,273,1,0,0,0,275,23,1,0,0,0,276,277,
        6,12,-1,0,277,278,3,26,13,0,278,288,1,0,0,0,279,280,10,2,0,0,280,
        284,5,57,0,0,281,285,5,35,0,0,282,285,3,154,77,0,283,285,3,42,21,
        0,284,281,1,0,0,0,284,282,1,0,0,0,284,283,1,0,0,0,285,287,1,0,0,
        0,286,279,1,0,0,0,287,290,1,0,0,0,288,286,1,0,0,0,288,289,1,0,0,
        0,289,25,1,0,0,0,290,288,1,0,0,0,291,292,6,13,-1,0,292,293,3,28,
        14,0,293,301,1,0,0,0,294,295,10,2,0,0,295,296,5,65,0,0,296,297,3,
        46,23,0,297,298,5,66,0,0,298,300,1,0,0,0,299,294,1,0,0,0,300,303,
        1,0,0,0,301,299,1,0,0,0,301,302,1,0,0,0,302,27,1,0,0,0,303,301,1,
        0,0,0,304,329,3,30,15,0,305,306,5,61,0,0,306,307,3,10,5,0,307,308,
        5,62,0,0,308,329,1,0,0,0,309,329,5,35,0,0,310,312,3,154,77,0,311,
        313,7,5,0,0,312,311,1,0,0,0,312,313,1,0,0,0,313,329,1,0,0,0,314,
        329,3,64,32,0,315,329,3,70,35,0,316,317,3,88,44,0,317,318,7,5,0,
        0,318,329,1,0,0,0,319,321,3,78,39,0,320,322,7,5,0,0,321,320,1,0,
        0,0,321,322,1,0,0,0,322,329,1,0,0,0,323,325,3,80,40,0,324,326,7,
        5,0,0,325,324,1,0,0,0,325,326,1,0,0,0,326,329,1,0,0,0,327,329,3,
        42,21,0,328,304,1,0,0,0,328,305,1,0,0,0,328,309,1,0,0,0,328,310,
        1,0,0,0,328,314,1,0,0,0,328,315,1,0,0,0,328,316,1,0,0,0,328,319,
        1,0,0,0,328,323,1,0,0,0,328,327,1,0,0,0,329,29,1,0,0,0,330,336,3,
        40,20,0,331,336,5,19,0,0,332,336,5,20,0,0,333,336,5,18,0,0,334,336,
        5,73,0,0,335,330,1,0,0,0,335,331,1,0,0,0,335,332,1,0,0,0,335,333,
        1,0,0,0,335,334,1,0,0,0,336,31,1,0,0,0,337,338,5,61,0,0,338,339,
        3,34,17,0,339,340,5,62,0,0,340,346,1,0,0,0,341,342,5,63,0,0,342,
        343,3,34,17,0,343,344,5,64,0,0,344,346,1,0,0,0,345,337,1,0,0,0,345,
        341,1,0,0,0,346,33,1,0,0,0,347,359,3,10,5,0,348,359,3,70,35,0,349,
        359,3,32,16,0,350,354,3,10,5,0,351,354,3,70,35,0,352,354,3,32,16,
        0,353,350,1,0,0,0,353,351,1,0,0,0,353,352,1,0,0,0,354,355,1,0,0,
        0,355,356,5,58,0,0,356,357,3,34,17,0,357,359,1,0,0,0,358,347,1,0,
        0,0,358,348,1,0,0,0,358,349,1,0,0,0,358,353,1,0,0,0,359,35,1,0,0,
        0,360,363,3,64,32,0,361,363,3,70,35,0,362,360,1,0,0,0,362,361,1,
        0,0,0,363,37,1,0,0,0,364,365,7,6,0,0,365,39,1,0,0,0,366,369,3,38,
        19,0,367,369,5,71,0,0,368,366,1,0,0,0,368,367,1,0,0,0,369,41,1,0,
        0,0,370,371,3,60,30,0,371,372,3,44,22,0,372,43,1,0,0,0,373,374,5,
        65,0,0,374,375,3,46,23,0,375,377,5,66,0,0,376,378,3,44,22,0,377,
        376,1,0,0,0,377,378,1,0,0,0,378,45,1,0,0,0,379,380,3,48,24,0,380,
        47,1,0,0,0,381,382,6,24,-1,0,382,383,3,50,25,0,383,389,1,0,0,0,384,
        385,10,2,0,0,385,386,7,0,0,0,386,388,3,50,25,0,387,384,1,0,0,0,388,
        391,1,0,0,0,389,387,1,0,0,0,389,390,1,0,0,0,390,49,1,0,0,0,391,389,
        1,0,0,0,392,393,6,25,-1,0,393,394,3,52,26,0,394,400,1,0,0,0,395,
        396,10,2,0,0,396,397,7,1,0,0,397,399,3,52,26,0,398,395,1,0,0,0,399,
        402,1,0,0,0,400,398,1,0,0,0,400,401,1,0,0,0,401,51,1,0,0,0,402,400,
        1,0,0,0,403,404,6,26,-1,0,404,405,3,54,27,0,405,411,1,0,0,0,406,
        407,10,2,0,0,407,408,7,2,0,0,408,410,3,54,27,0,409,406,1,0,0,0,410,
        413,1,0,0,0,411,409,1,0,0,0,411,412,1,0,0,0,412,53,1,0,0,0,413,411,
        1,0,0,0,414,415,6,27,-1,0,415,416,3,56,28,0,416,422,1,0,0,0,417,
        418,10,2,0,0,418,419,7,3,0,0,419,421,3,56,28,0,420,417,1,0,0,0,421,
        424,1,0,0,0,422,420,1,0,0,0,422,423,1,0,0,0,423,55,1,0,0,0,424,422,
        1,0,0,0,425,426,6,28,-1,0,426,427,3,58,29,0,427,433,1,0,0,0,428,
        429,10,2,0,0,429,430,7,4,0,0,430,432,3,58,29,0,431,428,1,0,0,0,432,
        435,1,0,0,0,433,431,1,0,0,0,433,434,1,0,0,0,434,57,1,0,0,0,435,433,
        1,0,0,0,436,449,3,60,30,0,437,449,3,42,21,0,438,449,3,38,19,0,439,
        440,3,62,31,0,440,441,3,38,19,0,441,449,1,0,0,0,442,443,5,61,0,0,
        443,444,3,46,23,0,444,445,5,62,0,0,445,449,1,0,0,0,446,449,3,64,
        32,0,447,449,3,70,35,0,448,436,1,0,0,0,448,437,1,0,0,0,448,438,1,
        0,0,0,448,439,1,0,0,0,448,442,1,0,0,0,448,446,1,0,0,0,448,447,1,
        0,0,0,449,59,1,0,0,0,450,454,5,35,0,0,451,454,5,73,0,0,452,454,3,
        154,77,0,453,450,1,0,0,0,453,451,1,0,0,0,453,452,1,0,0,0,454,61,
        1,0,0,0,455,464,6,31,-1,0,456,457,10,3,0,0,457,463,5,36,0,0,458,
        459,10,2,0,0,459,463,5,37,0,0,460,461,10,1,0,0,461,463,5,49,0,0,
        462,456,1,0,0,0,462,458,1,0,0,0,462,460,1,0,0,0,463,466,1,0,0,0,
        464,462,1,0,0,0,464,465,1,0,0,0,465,63,1,0,0,0,466,464,1,0,0,0,467,
        468,3,68,34,0,468,469,3,122,61,0,469,470,5,63,0,0,470,471,3,66,33,
        0,471,472,5,64,0,0,472,65,1,0,0,0,473,476,3,10,5,0,474,476,3,32,
        16,0,475,473,1,0,0,0,475,474,1,0,0,0,476,479,1,0,0,0,477,478,5,58,
        0,0,478,480,3,66,33,0,479,477,1,0,0,0,479,480,1,0,0,0,480,67,1,0,
        0,0,481,482,5,65,0,0,482,483,3,46,23,0,483,485,5,66,0,0,484,486,
        3,68,34,0,485,484,1,0,0,0,485,486,1,0,0,0,486,69,1,0,0,0,487,488,
        5,35,0,0,488,489,5,63,0,0,489,490,3,72,36,0,490,491,5,64,0,0,491,
        71,1,0,0,0,492,493,3,76,38,0,493,494,3,74,37,0,494,496,1,0,0,0,495,
        492,1,0,0,0,495,496,1,0,0,0,496,73,1,0,0,0,497,498,5,58,0,0,498,
        499,3,76,38,0,499,500,3,74,37,0,500,502,1,0,0,0,501,497,1,0,0,0,
        501,502,1,0,0,0,502,75,1,0,0,0,503,504,5,35,0,0,504,505,5,60,0,0,
        505,506,3,10,5,0,506,77,1,0,0,0,507,508,6,39,-1,0,508,512,5,35,0,
        0,509,512,3,154,77,0,510,512,3,42,21,0,511,507,1,0,0,0,511,509,1,
        0,0,0,511,510,1,0,0,0,512,522,1,0,0,0,513,514,10,4,0,0,514,518,5,
        57,0,0,515,519,5,35,0,0,516,519,3,154,77,0,517,519,3,42,21,0,518,
        515,1,0,0,0,518,516,1,0,0,0,518,517,1,0,0,0,519,521,1,0,0,0,520,
        513,1,0,0,0,521,524,1,0,0,0,522,520,1,0,0,0,522,523,1,0,0,0,523,
        79,1,0,0,0,524,522,1,0,0,0,525,526,6,40,-1,0,526,529,5,35,0,0,527,
        529,3,42,21,0,528,525,1,0,0,0,528,527,1,0,0,0,529,538,1,0,0,0,530,
        531,10,3,0,0,531,534,5,57,0,0,532,535,5,35,0,0,533,535,3,42,21,0,
        534,532,1,0,0,0,534,533,1,0,0,0,535,537,1,0,0,0,536,530,1,0,0,0,
        537,540,1,0,0,0,538,536,1,0,0,0,538,539,1,0,0,0,539,81,1,0,0,0,540,
        538,1,0,0,0,541,542,3,154,77,0,542,543,7,5,0,0,543,559,1,0,0,0,544,
        545,3,42,21,0,545,546,7,5,0,0,546,559,1,0,0,0,547,548,3,78,39,0,
        548,549,7,5,0,0,549,559,1,0,0,0,550,551,3,80,40,0,551,552,7,5,0,
        0,552,559,1,0,0,0,553,559,3,96,48,0,554,559,3,100,50,0,555,556,3,
        88,44,0,556,557,7,5,0,0,557,559,1,0,0,0,558,541,1,0,0,0,558,544,
        1,0,0,0,558,547,1,0,0,0,558,550,1,0,0,0,558,553,1,0,0,0,558,554,
        1,0,0,0,558,555,1,0,0,0,559,83,1,0,0,0,560,573,3,6,3,0,561,573,3,
        82,41,0,562,563,3,112,56,0,563,564,7,5,0,0,564,573,1,0,0,0,565,566,
        3,110,55,0,566,567,7,5,0,0,567,573,1,0,0,0,568,569,3,108,54,0,569,
        570,7,5,0,0,570,573,1,0,0,0,571,573,5,34,0,0,572,560,1,0,0,0,572,
        561,1,0,0,0,572,562,1,0,0,0,572,565,1,0,0,0,572,568,1,0,0,0,572,
        571,1,0,0,0,573,85,1,0,0,0,574,575,6,43,-1,0,575,576,3,84,42,0,576,
        581,1,0,0,0,577,578,10,1,0,0,578,580,3,84,42,0,579,577,1,0,0,0,580,
        583,1,0,0,0,581,579,1,0,0,0,581,582,1,0,0,0,582,87,1,0,0,0,583,581,
        1,0,0,0,584,585,3,94,47,0,585,586,3,90,45,0,586,587,3,10,5,0,587,
        89,1,0,0,0,588,589,7,7,0,0,589,91,1,0,0,0,590,591,3,94,47,0,591,
        594,7,8,0,0,592,595,3,10,5,0,593,595,3,70,35,0,594,592,1,0,0,0,594,
        593,1,0,0,0,595,93,1,0,0,0,596,600,5,35,0,0,597,600,3,42,21,0,598,
        600,3,80,40,0,599,596,1,0,0,0,599,597,1,0,0,0,599,598,1,0,0,0,600,
        95,1,0,0,0,601,602,5,1,0,0,602,603,5,61,0,0,603,604,3,10,5,0,604,
        606,5,62,0,0,605,607,3,8,4,0,606,605,1,0,0,0,606,607,1,0,0,0,607,
        608,1,0,0,0,608,609,3,160,80,0,609,610,3,98,49,0,610,97,1,0,0,0,
        611,613,3,8,4,0,612,611,1,0,0,0,612,613,1,0,0,0,613,614,1,0,0,0,
        614,615,5,2,0,0,615,616,5,1,0,0,616,617,5,61,0,0,617,618,3,10,5,
        0,618,620,5,62,0,0,619,621,3,8,4,0,620,619,1,0,0,0,620,621,1,0,0,
        0,621,622,1,0,0,0,622,623,3,160,80,0,623,624,3,98,49,0,624,626,1,
        0,0,0,625,612,1,0,0,0,625,626,1,0,0,0,626,638,1,0,0,0,627,629,3,
        8,4,0,628,627,1,0,0,0,628,629,1,0,0,0,629,630,1,0,0,0,630,632,5,
        2,0,0,631,633,3,8,4,0,632,631,1,0,0,0,632,633,1,0,0,0,633,634,1,
        0,0,0,634,636,3,160,80,0,635,628,1,0,0,0,635,636,1,0,0,0,636,638,
        1,0,0,0,637,625,1,0,0,0,637,635,1,0,0,0,638,99,1,0,0,0,639,640,5,
        3,0,0,640,641,3,102,51,0,641,642,5,59,0,0,642,643,3,10,5,0,643,644,
        5,59,0,0,644,646,3,104,52,0,645,647,3,8,4,0,646,645,1,0,0,0,646,
        647,1,0,0,0,647,648,1,0,0,0,648,649,3,160,80,0,649,670,1,0,0,0,650,
        651,5,3,0,0,651,652,5,35,0,0,652,653,5,58,0,0,653,654,5,35,0,0,654,
        655,5,51,0,0,655,656,5,17,0,0,656,658,3,28,14,0,657,659,3,8,4,0,
        658,657,1,0,0,0,658,659,1,0,0,0,659,660,1,0,0,0,660,661,3,160,80,
        0,661,670,1,0,0,0,662,663,5,3,0,0,663,665,3,10,5,0,664,666,3,8,4,
        0,665,664,1,0,0,0,665,666,1,0,0,0,666,667,1,0,0,0,667,668,3,160,
        80,0,668,670,1,0,0,0,669,639,1,0,0,0,669,650,1,0,0,0,669,662,1,0,
        0,0,670,101,1,0,0,0,671,676,3,118,59,0,672,676,3,114,57,0,673,676,
        3,132,66,0,674,676,3,156,78,0,675,671,1,0,0,0,675,672,1,0,0,0,675,
        673,1,0,0,0,675,674,1,0,0,0,676,103,1,0,0,0,677,680,3,88,44,0,678,
        680,3,118,59,0,679,677,1,0,0,0,679,678,1,0,0,0,680,105,1,0,0,0,681,
        682,3,10,5,0,682,107,1,0,0,0,683,685,5,4,0,0,684,686,3,10,5,0,685,
        684,1,0,0,0,685,686,1,0,0,0,686,109,1,0,0,0,687,688,5,15,0,0,688,
        111,1,0,0,0,689,690,5,16,0,0,690,113,1,0,0,0,691,692,5,14,0,0,692,
        694,5,35,0,0,693,695,3,122,61,0,694,693,1,0,0,0,694,695,1,0,0,0,
        695,696,1,0,0,0,696,697,5,50,0,0,697,698,3,10,5,0,698,115,1,0,0,
        0,699,700,5,14,0,0,700,701,5,35,0,0,701,702,3,122,61,0,702,117,1,
        0,0,0,703,709,3,94,47,0,704,705,5,35,0,0,705,706,3,134,67,0,706,
        707,3,122,61,0,707,709,1,0,0,0,708,703,1,0,0,0,708,704,1,0,0,0,709,
        710,1,0,0,0,710,711,5,51,0,0,711,712,3,10,5,0,712,119,1,0,0,0,713,
        714,5,13,0,0,714,715,5,35,0,0,715,716,5,50,0,0,716,717,3,10,5,0,
        717,121,1,0,0,0,718,723,3,124,62,0,719,723,3,126,63,0,720,723,3,
        130,65,0,721,723,3,128,64,0,722,718,1,0,0,0,722,719,1,0,0,0,722,
        720,1,0,0,0,722,721,1,0,0,0,723,123,1,0,0,0,724,725,7,9,0,0,725,
        125,1,0,0,0,726,727,7,10,0,0,727,127,1,0,0,0,728,729,3,44,22,0,729,
        730,3,122,61,0,730,129,1,0,0,0,731,732,5,35,0,0,732,131,1,0,0,0,
        733,734,5,14,0,0,734,735,5,35,0,0,735,736,3,134,67,0,736,739,3,122,
        61,0,737,738,5,50,0,0,738,740,3,136,68,0,739,737,1,0,0,0,739,740,
        1,0,0,0,740,133,1,0,0,0,741,742,5,65,0,0,742,743,5,67,0,0,743,745,
        5,66,0,0,744,746,3,134,67,0,745,744,1,0,0,0,745,746,1,0,0,0,746,
        135,1,0,0,0,747,748,5,63,0,0,748,749,3,138,69,0,749,750,5,64,0,0,
        750,753,1,0,0,0,751,753,3,10,5,0,752,747,1,0,0,0,752,751,1,0,0,0,
        753,137,1,0,0,0,754,757,3,10,5,0,755,757,3,32,16,0,756,754,1,0,0,
        0,756,755,1,0,0,0,757,760,1,0,0,0,758,759,5,58,0,0,759,761,3,138,
        69,0,760,758,1,0,0,0,760,761,1,0,0,0,761,763,1,0,0,0,762,756,1,0,
        0,0,762,763,1,0,0,0,763,139,1,0,0,0,764,765,5,6,0,0,765,766,5,35,
        0,0,766,767,5,7,0,0,767,769,5,63,0,0,768,770,3,8,4,0,769,768,1,0,
        0,0,769,770,1,0,0,0,770,771,1,0,0,0,771,772,3,142,71,0,772,773,5,
        64,0,0,773,141,1,0,0,0,774,780,3,144,72,0,775,780,3,140,70,0,776,
        780,3,146,73,0,777,780,3,158,79,0,778,780,5,34,0,0,779,774,1,0,0,
        0,779,775,1,0,0,0,779,776,1,0,0,0,779,777,1,0,0,0,779,778,1,0,0,
        0,780,782,1,0,0,0,781,783,3,142,71,0,782,781,1,0,0,0,782,783,1,0,
        0,0,783,143,1,0,0,0,784,785,5,35,0,0,785,786,3,122,61,0,786,788,
        7,5,0,0,787,789,5,34,0,0,788,787,1,0,0,0,788,789,1,0,0,0,789,145,
        1,0,0,0,790,791,5,6,0,0,791,792,5,35,0,0,792,793,5,8,0,0,793,795,
        5,63,0,0,794,796,3,8,4,0,795,794,1,0,0,0,795,796,1,0,0,0,796,797,
        1,0,0,0,797,798,3,148,74,0,798,799,5,64,0,0,799,147,1,0,0,0,800,
        801,5,35,0,0,801,803,5,61,0,0,802,804,3,150,75,0,803,802,1,0,0,0,
        803,804,1,0,0,0,804,805,1,0,0,0,805,807,5,62,0,0,806,808,3,122,61,
        0,807,806,1,0,0,0,807,808,1,0,0,0,808,809,1,0,0,0,809,812,7,5,0,
        0,810,812,5,34,0,0,811,800,1,0,0,0,811,810,1,0,0,0,812,814,1,0,0,
        0,813,815,3,148,74,0,814,813,1,0,0,0,814,815,1,0,0,0,815,149,1,0,
        0,0,816,817,5,35,0,0,817,818,3,152,76,0,818,819,3,122,61,0,819,822,
        1,0,0,0,820,821,5,58,0,0,821,823,3,150,75,0,822,820,1,0,0,0,822,
        823,1,0,0,0,823,151,1,0,0,0,824,825,5,58,0,0,825,826,5,35,0,0,826,
        828,3,152,76,0,827,824,1,0,0,0,827,828,1,0,0,0,828,153,1,0,0,0,829,
        830,5,35,0,0,830,832,5,61,0,0,831,833,3,34,17,0,832,831,1,0,0,0,
        832,833,1,0,0,0,833,834,1,0,0,0,834,837,5,62,0,0,835,837,3,162,81,
        0,836,829,1,0,0,0,836,835,1,0,0,0,837,155,1,0,0,0,838,839,5,5,0,
        0,839,840,5,35,0,0,840,842,5,61,0,0,841,843,3,150,75,0,842,841,1,
        0,0,0,842,843,1,0,0,0,843,844,1,0,0,0,844,846,5,62,0,0,845,847,3,
        122,61,0,846,845,1,0,0,0,846,847,1,0,0,0,847,848,1,0,0,0,848,849,
        3,160,80,0,849,157,1,0,0,0,850,851,5,5,0,0,851,852,5,61,0,0,852,
        853,5,35,0,0,853,854,3,130,65,0,854,855,5,62,0,0,855,856,5,35,0,
        0,856,858,5,61,0,0,857,859,3,150,75,0,858,857,1,0,0,0,858,859,1,
        0,0,0,859,860,1,0,0,0,860,862,5,62,0,0,861,863,3,122,61,0,862,861,
        1,0,0,0,862,863,1,0,0,0,863,864,1,0,0,0,864,865,3,160,80,0,865,159,
        1,0,0,0,866,868,5,63,0,0,867,869,5,34,0,0,868,867,1,0,0,0,868,869,
        1,0,0,0,869,870,1,0,0,0,870,871,3,86,43,0,871,872,5,64,0,0,872,161,
        1,0,0,0,873,874,5,21,0,0,874,875,5,61,0,0,875,929,5,62,0,0,876,877,
        5,22,0,0,877,878,5,61,0,0,878,879,3,10,5,0,879,880,5,62,0,0,880,
        929,1,0,0,0,881,882,5,23,0,0,882,883,5,61,0,0,883,884,3,10,5,0,884,
        885,5,62,0,0,885,929,1,0,0,0,886,887,5,24,0,0,887,888,5,61,0,0,888,
        929,5,62,0,0,889,890,5,25,0,0,890,891,5,61,0,0,891,892,3,10,5,0,
        892,893,5,62,0,0,893,929,1,0,0,0,894,895,5,26,0,0,895,896,5,61,0,
        0,896,897,3,10,5,0,897,898,5,62,0,0,898,929,1,0,0,0,899,900,5,27,
        0,0,900,901,5,61,0,0,901,929,5,62,0,0,902,903,5,28,0,0,903,904,5,
        61,0,0,904,905,3,10,5,0,905,906,5,62,0,0,906,929,1,0,0,0,907,908,
        5,29,0,0,908,909,5,61,0,0,909,910,3,10,5,0,910,911,5,62,0,0,911,
        929,1,0,0,0,912,913,5,30,0,0,913,914,5,61,0,0,914,929,5,62,0,0,915,
        916,5,31,0,0,916,917,5,61,0,0,917,918,3,10,5,0,918,919,5,62,0,0,
        919,929,1,0,0,0,920,921,5,32,0,0,921,922,5,61,0,0,922,923,3,10,5,
        0,923,924,5,62,0,0,924,929,1,0,0,0,925,926,5,33,0,0,926,927,5,61,
        0,0,927,929,5,62,0,0,928,873,1,0,0,0,928,876,1,0,0,0,928,881,1,0,
        0,0,928,886,1,0,0,0,928,889,1,0,0,0,928,894,1,0,0,0,928,899,1,0,
        0,0,928,902,1,0,0,0,928,907,1,0,0,0,928,912,1,0,0,0,928,915,1,0,
        0,0,928,920,1,0,0,0,928,925,1,0,0,0,929,163,1,0,0,0,95,170,176,184,
        186,198,202,211,224,235,246,257,268,274,284,288,301,312,321,325,
        328,335,345,353,358,362,368,377,389,400,411,422,433,448,453,462,
        464,475,479,485,495,501,511,518,522,528,534,538,558,572,581,594,
        599,606,612,620,625,628,632,635,637,646,658,665,669,675,679,685,
        694,708,722,739,745,752,756,760,762,769,779,782,788,795,803,807,
        811,814,822,827,832,836,842,846,858,862,868,928
    ]

class MiniGoParser ( Parser ):

    grammarFileName = "MiniGo.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "'if'", "'else'", "'for'", "'return'", 
                     "'func'", "'type'", "'struct'", "'interface'", "'string'", 
                     "'int'", "'float'", "'boolean'", "'const'", "'var'", 
                     "'continue'", "'break'", "'range'", "'nil'", "'true'", 
                     "'false'", "'getInt'", "'putInt'", "'putIntLn'", "'getFloat'", 
                     "'putFloat'", "'putFloatLn'", "'getBool'", "'putBool'", 
                     "'putBoolLn'", "'getString'", "'putString'", "'putStringLn'", 
                     "'putLn'", "<INVALID>", "<INVALID>", "'+'", "'-'", 
                     "'*'", "'/'", "'%'", "'=='", "'!='", "'<'", "'<='", 
                     "'>'", "'>='", "'&&'", "'||'", "'!'", "'='", "':='", 
                     "'+='", "'-='", "'*='", "'/='", "'%='", "'.'", "','", 
                     "';'", "':'", "'('", "')'", "'{'", "'}'", "'['", "']'" ]

    symbolicNames = [ "<INVALID>", "IF", "ELSE", "FOR", "RETURN", "FUNC", 
                      "TYPE", "STRUCT", "INTERFACE", "STRING", "INT", "FLOAT", 
                      "BOOLEAN", "CONST", "VAR", "CONTINUE", "BREAK", "RANGE", 
                      "NIL", "TRUE", "FALSE", "GET_INT", "PUT_INT", "PUT_INT_LN", 
                      "GET_FLOAT", "PUT_FLOAT", "PUT_FLOAT_LN", "GET_BOOL", 
                      "PUT_BOOL", "PUT_BOOL_LN", "GET_STRING", "PUT_STRING", 
                      "PUT_STRING_LN", "PUT_LN", "NEWLINE", "ID", "ADD", 
                      "SUB", "MUL", "DIV", "MOD", "EQ", "NEQ", "LT", "LE", 
                      "GT", "GE", "AND", "OR", "NOT", "ASSIGN", "SHORT_ASSIGN", 
                      "ADD_ASSIGN", "SUB_ASSIGN", "MUL_ASSIGN", "DIV_ASSIGN", 
                      "MOD_ASSIGN", "DOT", "COMMA", "SEMICOLON", "COLON", 
                      "LPAREN", "RPAREN", "LBRACE", "RBRACE", "LBRACKET", 
                      "RBRACKET", "INT_LIT", "HEX_LIT", "OCT_LIT", "BIN_LIT", 
                      "FLOAT_LIT", "WS", "STRING_LIT", "LINE_COMMENT", "BLOCK_COMMENT", 
                      "ERROR_CHAR", "ILLEGAL_ESCAPE", "UNCLOSE_STRING" ]

    RULE_program = 0
    RULE_program_list = 1
    RULE_decl_or_stmt = 2
    RULE_decl = 3
    RULE_newlines = 4
    RULE_expr = 5
    RULE_logical_expr = 6
    RULE_equality_expr = 7
    RULE_relational_expr = 8
    RULE_additive_expr = 9
    RULE_multiplicative_expr = 10
    RULE_primary_expr = 11
    RULE_field_access = 12
    RULE_atom_arr_access = 13
    RULE_atom = 14
    RULE_atom_value = 15
    RULE_atom_list = 16
    RULE_expr_list = 17
    RULE_literal = 18
    RULE_int_number = 19
    RULE_number = 20
    RULE_array_access = 21
    RULE_array_access_tail = 22
    RULE_index_expr = 23
    RULE_logical_index_expr = 24
    RULE_equality_index_expr = 25
    RULE_relational_index_expr = 26
    RULE_additive_index_expr = 27
    RULE_multiplicative_index_expr = 28
    RULE_primary_index_expr = 29
    RULE_secondary_index_expr = 30
    RULE_signed_tail = 31
    RULE_array_literal = 32
    RULE_array_literal_tail = 33
    RULE_array_literal_tail3 = 34
    RULE_struct_literal = 35
    RULE_struct_literal_tail = 36
    RULE_struct_literal_tail2 = 37
    RULE_field_init = 38
    RULE_struct_field_access = 39
    RULE_struct_field_access_no_func = 40
    RULE_stmt_primary = 41
    RULE_stmt_in_block = 42
    RULE_stmt_list = 43
    RULE_assignment_stmt = 44
    RULE_assignment_operator = 45
    RULE_assignment_expr = 46
    RULE_lhs = 47
    RULE_if_stmt = 48
    RULE_if_stmt_tail = 49
    RULE_for_stmt = 50
    RULE_for_init = 51
    RULE_for_update = 52
    RULE_for_condition = 53
    RULE_return_stmt = 54
    RULE_continue_stmt = 55
    RULE_break_stmt = 56
    RULE_var_decl = 57
    RULE_var_decl_no_init = 58
    RULE_short_decl = 59
    RULE_const_decl = 60
    RULE_types = 61
    RULE_primitiveType = 62
    RULE_compositeType = 63
    RULE_arrayType = 64
    RULE_userDefineType = 65
    RULE_array_decl = 66
    RULE_dimensions = 67
    RULE_array_init = 68
    RULE_array_init_tail = 69
    RULE_struct_decl = 70
    RULE_field_decl_list = 71
    RULE_field_decl = 72
    RULE_interface_decl = 73
    RULE_method_in_decl = 74
    RULE_param_decl = 75
    RULE_param_decl_tail = 76
    RULE_function_call = 77
    RULE_func_decl = 78
    RULE_method_decl = 79
    RULE_block = 80
    RULE_built_in_function_call = 81

    ruleNames =  [ "program", "program_list", "decl_or_stmt", "decl", "newlines", 
                   "expr", "logical_expr", "equality_expr", "relational_expr", 
                   "additive_expr", "multiplicative_expr", "primary_expr", 
                   "field_access", "atom_arr_access", "atom", "atom_value", 
                   "atom_list", "expr_list", "literal", "int_number", "number", 
                   "array_access", "array_access_tail", "index_expr", "logical_index_expr", 
                   "equality_index_expr", "relational_index_expr", "additive_index_expr", 
                   "multiplicative_index_expr", "primary_index_expr", "secondary_index_expr", 
                   "signed_tail", "array_literal", "array_literal_tail", 
                   "array_literal_tail3", "struct_literal", "struct_literal_tail", 
                   "struct_literal_tail2", "field_init", "struct_field_access", 
                   "struct_field_access_no_func", "stmt_primary", "stmt_in_block", 
                   "stmt_list", "assignment_stmt", "assignment_operator", 
                   "assignment_expr", "lhs", "if_stmt", "if_stmt_tail", 
                   "for_stmt", "for_init", "for_update", "for_condition", 
                   "return_stmt", "continue_stmt", "break_stmt", "var_decl", 
                   "var_decl_no_init", "short_decl", "const_decl", "types", 
                   "primitiveType", "compositeType", "arrayType", "userDefineType", 
                   "array_decl", "dimensions", "array_init", "array_init_tail", 
                   "struct_decl", "field_decl_list", "field_decl", "interface_decl", 
                   "method_in_decl", "param_decl", "param_decl_tail", "function_call", 
                   "func_decl", "method_decl", "block", "built_in_function_call" ]

    EOF = Token.EOF
    IF=1
    ELSE=2
    FOR=3
    RETURN=4
    FUNC=5
    TYPE=6
    STRUCT=7
    INTERFACE=8
    STRING=9
    INT=10
    FLOAT=11
    BOOLEAN=12
    CONST=13
    VAR=14
    CONTINUE=15
    BREAK=16
    RANGE=17
    NIL=18
    TRUE=19
    FALSE=20
    GET_INT=21
    PUT_INT=22
    PUT_INT_LN=23
    GET_FLOAT=24
    PUT_FLOAT=25
    PUT_FLOAT_LN=26
    GET_BOOL=27
    PUT_BOOL=28
    PUT_BOOL_LN=29
    GET_STRING=30
    PUT_STRING=31
    PUT_STRING_LN=32
    PUT_LN=33
    NEWLINE=34
    ID=35
    ADD=36
    SUB=37
    MUL=38
    DIV=39
    MOD=40
    EQ=41
    NEQ=42
    LT=43
    LE=44
    GT=45
    GE=46
    AND=47
    OR=48
    NOT=49
    ASSIGN=50
    SHORT_ASSIGN=51
    ADD_ASSIGN=52
    SUB_ASSIGN=53
    MUL_ASSIGN=54
    DIV_ASSIGN=55
    MOD_ASSIGN=56
    DOT=57
    COMMA=58
    SEMICOLON=59
    COLON=60
    LPAREN=61
    RPAREN=62
    LBRACE=63
    RBRACE=64
    LBRACKET=65
    RBRACKET=66
    INT_LIT=67
    HEX_LIT=68
    OCT_LIT=69
    BIN_LIT=70
    FLOAT_LIT=71
    WS=72
    STRING_LIT=73
    LINE_COMMENT=74
    BLOCK_COMMENT=75
    ERROR_CHAR=76
    ILLEGAL_ESCAPE=77
    UNCLOSE_STRING=78

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.1")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None




    class ProgramContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def program_list(self):
            return self.getTypedRuleContext(MiniGoParser.Program_listContext,0)


        def EOF(self):
            return self.getToken(MiniGoParser.EOF, 0)

        def getRuleIndex(self):
            return MiniGoParser.RULE_program




    def program(self):

        localctx = MiniGoParser.ProgramContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_program)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 164
            self.program_list()
            self.state = 165
            self.match(MiniGoParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Program_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NEWLINE(self):
            return self.getToken(MiniGoParser.NEWLINE, 0)

        def program_list(self):
            return self.getTypedRuleContext(MiniGoParser.Program_listContext,0)


        def decl_or_stmt(self):
            return self.getTypedRuleContext(MiniGoParser.Decl_or_stmtContext,0)


        def getRuleIndex(self):
            return MiniGoParser.RULE_program_list




    def program_list(self):

        localctx = MiniGoParser.Program_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_program_list)
        try:
            self.state = 170
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,0,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 167
                self.match(MiniGoParser.NEWLINE)
                self.state = 168
                self.program_list()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 169
                self.decl_or_stmt(0)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Decl_or_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def decl(self):
            return self.getTypedRuleContext(MiniGoParser.DeclContext,0)


        def stmt_primary(self):
            return self.getTypedRuleContext(MiniGoParser.Stmt_primaryContext,0)


        def expr(self):
            return self.getTypedRuleContext(MiniGoParser.ExprContext,0)


        def decl_or_stmt(self):
            return self.getTypedRuleContext(MiniGoParser.Decl_or_stmtContext,0)


        def NEWLINE(self):
            return self.getToken(MiniGoParser.NEWLINE, 0)

        def getRuleIndex(self):
            return MiniGoParser.RULE_decl_or_stmt



    def decl_or_stmt(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = MiniGoParser.Decl_or_stmtContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 4
        self.enterRecursionRule(localctx, 4, self.RULE_decl_or_stmt, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 176
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1,self._ctx)
            if la_ == 1:
                self.state = 173
                self.decl()
                pass

            elif la_ == 2:
                self.state = 174
                self.stmt_primary()
                pass

            elif la_ == 3:
                self.state = 175
                self.expr()
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 186
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,3,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 184
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,2,self._ctx)
                    if la_ == 1:
                        localctx = MiniGoParser.Decl_or_stmtContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_decl_or_stmt)
                        self.state = 178
                        if not self.precpred(self._ctx, 4):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 4)")
                        self.state = 179
                        self.match(MiniGoParser.NEWLINE)
                        pass

                    elif la_ == 2:
                        localctx = MiniGoParser.Decl_or_stmtContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_decl_or_stmt)
                        self.state = 180
                        if not self.precpred(self._ctx, 3):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 3)")
                        self.state = 181
                        self.decl()
                        pass

                    elif la_ == 3:
                        localctx = MiniGoParser.Decl_or_stmtContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_decl_or_stmt)
                        self.state = 182
                        if not self.precpred(self._ctx, 2):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                        self.state = 183
                        self.stmt_primary()
                        pass

             
                self.state = 188
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,3,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class DeclContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def struct_decl(self):
            return self.getTypedRuleContext(MiniGoParser.Struct_declContext,0)


        def interface_decl(self):
            return self.getTypedRuleContext(MiniGoParser.Interface_declContext,0)


        def const_decl(self):
            return self.getTypedRuleContext(MiniGoParser.Const_declContext,0)


        def var_decl(self):
            return self.getTypedRuleContext(MiniGoParser.Var_declContext,0)


        def array_decl(self):
            return self.getTypedRuleContext(MiniGoParser.Array_declContext,0)


        def var_decl_no_init(self):
            return self.getTypedRuleContext(MiniGoParser.Var_decl_no_initContext,0)


        def short_decl(self):
            return self.getTypedRuleContext(MiniGoParser.Short_declContext,0)


        def func_decl(self):
            return self.getTypedRuleContext(MiniGoParser.Func_declContext,0)


        def method_decl(self):
            return self.getTypedRuleContext(MiniGoParser.Method_declContext,0)


        def SEMICOLON(self):
            return self.getToken(MiniGoParser.SEMICOLON, 0)

        def newlines(self):
            return self.getTypedRuleContext(MiniGoParser.NewlinesContext,0)


        def getRuleIndex(self):
            return MiniGoParser.RULE_decl




    def decl(self):

        localctx = MiniGoParser.DeclContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_decl)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 198
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,4,self._ctx)
            if la_ == 1:
                self.state = 189
                self.struct_decl()
                pass

            elif la_ == 2:
                self.state = 190
                self.interface_decl()
                pass

            elif la_ == 3:
                self.state = 191
                self.const_decl()
                pass

            elif la_ == 4:
                self.state = 192
                self.var_decl()
                pass

            elif la_ == 5:
                self.state = 193
                self.array_decl()
                pass

            elif la_ == 6:
                self.state = 194
                self.var_decl_no_init()
                pass

            elif la_ == 7:
                self.state = 195
                self.short_decl()
                pass

            elif la_ == 8:
                self.state = 196
                self.func_decl()
                pass

            elif la_ == 9:
                self.state = 197
                self.method_decl()
                pass


            self.state = 202
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [59]:
                self.state = 200
                self.match(MiniGoParser.SEMICOLON)
                pass
            elif token in [34]:
                self.state = 201
                self.newlines(0)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NewlinesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NEWLINE(self):
            return self.getToken(MiniGoParser.NEWLINE, 0)

        def newlines(self):
            return self.getTypedRuleContext(MiniGoParser.NewlinesContext,0)


        def getRuleIndex(self):
            return MiniGoParser.RULE_newlines



    def newlines(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = MiniGoParser.NewlinesContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 8
        self.enterRecursionRule(localctx, 8, self.RULE_newlines, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 205
            self.match(MiniGoParser.NEWLINE)
            self._ctx.stop = self._input.LT(-1)
            self.state = 211
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,6,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = MiniGoParser.NewlinesContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_newlines)
                    self.state = 207
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 208
                    self.match(MiniGoParser.NEWLINE) 
                self.state = 213
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,6,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class ExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def logical_expr(self):
            return self.getTypedRuleContext(MiniGoParser.Logical_exprContext,0)


        def getRuleIndex(self):
            return MiniGoParser.RULE_expr




    def expr(self):

        localctx = MiniGoParser.ExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_expr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 214
            self.logical_expr(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Logical_exprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def equality_expr(self):
            return self.getTypedRuleContext(MiniGoParser.Equality_exprContext,0)


        def logical_expr(self):
            return self.getTypedRuleContext(MiniGoParser.Logical_exprContext,0)


        def AND(self):
            return self.getToken(MiniGoParser.AND, 0)

        def OR(self):
            return self.getToken(MiniGoParser.OR, 0)

        def getRuleIndex(self):
            return MiniGoParser.RULE_logical_expr



    def logical_expr(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = MiniGoParser.Logical_exprContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 12
        self.enterRecursionRule(localctx, 12, self.RULE_logical_expr, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 217
            self.equality_expr(0)
            self._ctx.stop = self._input.LT(-1)
            self.state = 224
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,7,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = MiniGoParser.Logical_exprContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_logical_expr)
                    self.state = 219
                    if not self.precpred(self._ctx, 2):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                    self.state = 220
                    _la = self._input.LA(1)
                    if not(_la==47 or _la==48):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 221
                    self.equality_expr(0) 
                self.state = 226
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,7,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class Equality_exprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def relational_expr(self):
            return self.getTypedRuleContext(MiniGoParser.Relational_exprContext,0)


        def equality_expr(self):
            return self.getTypedRuleContext(MiniGoParser.Equality_exprContext,0)


        def EQ(self):
            return self.getToken(MiniGoParser.EQ, 0)

        def NEQ(self):
            return self.getToken(MiniGoParser.NEQ, 0)

        def getRuleIndex(self):
            return MiniGoParser.RULE_equality_expr



    def equality_expr(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = MiniGoParser.Equality_exprContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 14
        self.enterRecursionRule(localctx, 14, self.RULE_equality_expr, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 228
            self.relational_expr(0)
            self._ctx.stop = self._input.LT(-1)
            self.state = 235
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,8,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = MiniGoParser.Equality_exprContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_equality_expr)
                    self.state = 230
                    if not self.precpred(self._ctx, 2):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                    self.state = 231
                    _la = self._input.LA(1)
                    if not(_la==41 or _la==42):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 232
                    self.relational_expr(0) 
                self.state = 237
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,8,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class Relational_exprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def additive_expr(self):
            return self.getTypedRuleContext(MiniGoParser.Additive_exprContext,0)


        def relational_expr(self):
            return self.getTypedRuleContext(MiniGoParser.Relational_exprContext,0)


        def LT(self):
            return self.getToken(MiniGoParser.LT, 0)

        def LE(self):
            return self.getToken(MiniGoParser.LE, 0)

        def GT(self):
            return self.getToken(MiniGoParser.GT, 0)

        def GE(self):
            return self.getToken(MiniGoParser.GE, 0)

        def getRuleIndex(self):
            return MiniGoParser.RULE_relational_expr



    def relational_expr(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = MiniGoParser.Relational_exprContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 16
        self.enterRecursionRule(localctx, 16, self.RULE_relational_expr, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 239
            self.additive_expr(0)
            self._ctx.stop = self._input.LT(-1)
            self.state = 246
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,9,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = MiniGoParser.Relational_exprContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_relational_expr)
                    self.state = 241
                    if not self.precpred(self._ctx, 2):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                    self.state = 242
                    _la = self._input.LA(1)
                    if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 131941395333120) != 0)):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 243
                    self.additive_expr(0) 
                self.state = 248
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,9,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class Additive_exprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def multiplicative_expr(self):
            return self.getTypedRuleContext(MiniGoParser.Multiplicative_exprContext,0)


        def additive_expr(self):
            return self.getTypedRuleContext(MiniGoParser.Additive_exprContext,0)


        def ADD(self):
            return self.getToken(MiniGoParser.ADD, 0)

        def SUB(self):
            return self.getToken(MiniGoParser.SUB, 0)

        def getRuleIndex(self):
            return MiniGoParser.RULE_additive_expr



    def additive_expr(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = MiniGoParser.Additive_exprContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 18
        self.enterRecursionRule(localctx, 18, self.RULE_additive_expr, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 250
            self.multiplicative_expr(0)
            self._ctx.stop = self._input.LT(-1)
            self.state = 257
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,10,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = MiniGoParser.Additive_exprContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_additive_expr)
                    self.state = 252
                    if not self.precpred(self._ctx, 2):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                    self.state = 253
                    _la = self._input.LA(1)
                    if not(_la==36 or _la==37):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 254
                    self.multiplicative_expr(0) 
                self.state = 259
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,10,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class Multiplicative_exprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def primary_expr(self):
            return self.getTypedRuleContext(MiniGoParser.Primary_exprContext,0)


        def multiplicative_expr(self):
            return self.getTypedRuleContext(MiniGoParser.Multiplicative_exprContext,0)


        def MUL(self):
            return self.getToken(MiniGoParser.MUL, 0)

        def DIV(self):
            return self.getToken(MiniGoParser.DIV, 0)

        def MOD(self):
            return self.getToken(MiniGoParser.MOD, 0)

        def getRuleIndex(self):
            return MiniGoParser.RULE_multiplicative_expr



    def multiplicative_expr(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = MiniGoParser.Multiplicative_exprContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 20
        self.enterRecursionRule(localctx, 20, self.RULE_multiplicative_expr, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 261
            self.primary_expr()
            self._ctx.stop = self._input.LT(-1)
            self.state = 268
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,11,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = MiniGoParser.Multiplicative_exprContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_multiplicative_expr)
                    self.state = 263
                    if not self.precpred(self._ctx, 2):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                    self.state = 264
                    _la = self._input.LA(1)
                    if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 1924145348608) != 0)):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 265
                    self.primary_expr() 
                self.state = 270
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,11,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class Primary_exprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def signed_tail(self):
            return self.getTypedRuleContext(MiniGoParser.Signed_tailContext,0)


        def field_access(self):
            return self.getTypedRuleContext(MiniGoParser.Field_accessContext,0)


        def atom_arr_access(self):
            return self.getTypedRuleContext(MiniGoParser.Atom_arr_accessContext,0)


        def getRuleIndex(self):
            return MiniGoParser.RULE_primary_expr




    def primary_expr(self):

        localctx = MiniGoParser.Primary_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_primary_expr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 271
            self.signed_tail(0)
            self.state = 274
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,12,self._ctx)
            if la_ == 1:
                self.state = 272
                self.field_access(0)
                pass

            elif la_ == 2:
                self.state = 273
                self.atom_arr_access(0)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Field_accessContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def atom_arr_access(self):
            return self.getTypedRuleContext(MiniGoParser.Atom_arr_accessContext,0)


        def field_access(self):
            return self.getTypedRuleContext(MiniGoParser.Field_accessContext,0)


        def DOT(self):
            return self.getToken(MiniGoParser.DOT, 0)

        def ID(self):
            return self.getToken(MiniGoParser.ID, 0)

        def function_call(self):
            return self.getTypedRuleContext(MiniGoParser.Function_callContext,0)


        def array_access(self):
            return self.getTypedRuleContext(MiniGoParser.Array_accessContext,0)


        def getRuleIndex(self):
            return MiniGoParser.RULE_field_access



    def field_access(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = MiniGoParser.Field_accessContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 24
        self.enterRecursionRule(localctx, 24, self.RULE_field_access, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 277
            self.atom_arr_access(0)
            self._ctx.stop = self._input.LT(-1)
            self.state = 288
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,14,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = MiniGoParser.Field_accessContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_field_access)
                    self.state = 279
                    if not self.precpred(self._ctx, 2):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                    self.state = 280
                    self.match(MiniGoParser.DOT)
                    self.state = 284
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,13,self._ctx)
                    if la_ == 1:
                        self.state = 281
                        self.match(MiniGoParser.ID)
                        pass

                    elif la_ == 2:
                        self.state = 282
                        self.function_call()
                        pass

                    elif la_ == 3:
                        self.state = 283
                        self.array_access()
                        pass

             
                self.state = 290
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,14,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class Atom_arr_accessContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def atom(self):
            return self.getTypedRuleContext(MiniGoParser.AtomContext,0)


        def atom_arr_access(self):
            return self.getTypedRuleContext(MiniGoParser.Atom_arr_accessContext,0)


        def LBRACKET(self):
            return self.getToken(MiniGoParser.LBRACKET, 0)

        def index_expr(self):
            return self.getTypedRuleContext(MiniGoParser.Index_exprContext,0)


        def RBRACKET(self):
            return self.getToken(MiniGoParser.RBRACKET, 0)

        def getRuleIndex(self):
            return MiniGoParser.RULE_atom_arr_access



    def atom_arr_access(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = MiniGoParser.Atom_arr_accessContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 26
        self.enterRecursionRule(localctx, 26, self.RULE_atom_arr_access, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 292
            self.atom()
            self._ctx.stop = self._input.LT(-1)
            self.state = 301
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,15,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = MiniGoParser.Atom_arr_accessContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_atom_arr_access)
                    self.state = 294
                    if not self.precpred(self._ctx, 2):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                    self.state = 295
                    self.match(MiniGoParser.LBRACKET)
                    self.state = 296
                    self.index_expr()
                    self.state = 297
                    self.match(MiniGoParser.RBRACKET) 
                self.state = 303
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,15,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class AtomContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def atom_value(self):
            return self.getTypedRuleContext(MiniGoParser.Atom_valueContext,0)


        def LPAREN(self):
            return self.getToken(MiniGoParser.LPAREN, 0)

        def expr(self):
            return self.getTypedRuleContext(MiniGoParser.ExprContext,0)


        def RPAREN(self):
            return self.getToken(MiniGoParser.RPAREN, 0)

        def ID(self):
            return self.getToken(MiniGoParser.ID, 0)

        def function_call(self):
            return self.getTypedRuleContext(MiniGoParser.Function_callContext,0)


        def SEMICOLON(self):
            return self.getToken(MiniGoParser.SEMICOLON, 0)

        def NEWLINE(self):
            return self.getToken(MiniGoParser.NEWLINE, 0)

        def array_literal(self):
            return self.getTypedRuleContext(MiniGoParser.Array_literalContext,0)


        def struct_literal(self):
            return self.getTypedRuleContext(MiniGoParser.Struct_literalContext,0)


        def assignment_stmt(self):
            return self.getTypedRuleContext(MiniGoParser.Assignment_stmtContext,0)


        def struct_field_access(self):
            return self.getTypedRuleContext(MiniGoParser.Struct_field_accessContext,0)


        def struct_field_access_no_func(self):
            return self.getTypedRuleContext(MiniGoParser.Struct_field_access_no_funcContext,0)


        def array_access(self):
            return self.getTypedRuleContext(MiniGoParser.Array_accessContext,0)


        def getRuleIndex(self):
            return MiniGoParser.RULE_atom




    def atom(self):

        localctx = MiniGoParser.AtomContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_atom)
        self._la = 0 # Token type
        try:
            self.state = 328
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,19,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 304
                self.atom_value()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 305
                self.match(MiniGoParser.LPAREN)
                self.state = 306
                self.expr()
                self.state = 307
                self.match(MiniGoParser.RPAREN)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 309
                self.match(MiniGoParser.ID)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 310
                self.function_call()
                self.state = 312
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,16,self._ctx)
                if la_ == 1:
                    self.state = 311
                    _la = self._input.LA(1)
                    if not(_la==34 or _la==59):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 314
                self.array_literal()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 315
                self.struct_literal()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 316
                self.assignment_stmt()
                self.state = 317
                _la = self._input.LA(1)
                if not(_la==34 or _la==59):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 319
                self.struct_field_access(0)
                self.state = 321
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,17,self._ctx)
                if la_ == 1:
                    self.state = 320
                    _la = self._input.LA(1)
                    if not(_la==34 or _la==59):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 323
                self.struct_field_access_no_func(0)
                self.state = 325
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,18,self._ctx)
                if la_ == 1:
                    self.state = 324
                    _la = self._input.LA(1)
                    if not(_la==34 or _la==59):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 327
                self.array_access()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Atom_valueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def number(self):
            return self.getTypedRuleContext(MiniGoParser.NumberContext,0)


        def TRUE(self):
            return self.getToken(MiniGoParser.TRUE, 0)

        def FALSE(self):
            return self.getToken(MiniGoParser.FALSE, 0)

        def NIL(self):
            return self.getToken(MiniGoParser.NIL, 0)

        def STRING_LIT(self):
            return self.getToken(MiniGoParser.STRING_LIT, 0)

        def getRuleIndex(self):
            return MiniGoParser.RULE_atom_value




    def atom_value(self):

        localctx = MiniGoParser.Atom_valueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_atom_value)
        try:
            self.state = 335
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [67, 68, 69, 70, 71]:
                self.enterOuterAlt(localctx, 1)
                self.state = 330
                self.number()
                pass
            elif token in [19]:
                self.enterOuterAlt(localctx, 2)
                self.state = 331
                self.match(MiniGoParser.TRUE)
                pass
            elif token in [20]:
                self.enterOuterAlt(localctx, 3)
                self.state = 332
                self.match(MiniGoParser.FALSE)
                pass
            elif token in [18]:
                self.enterOuterAlt(localctx, 4)
                self.state = 333
                self.match(MiniGoParser.NIL)
                pass
            elif token in [73]:
                self.enterOuterAlt(localctx, 5)
                self.state = 334
                self.match(MiniGoParser.STRING_LIT)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Atom_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAREN(self):
            return self.getToken(MiniGoParser.LPAREN, 0)

        def expr_list(self):
            return self.getTypedRuleContext(MiniGoParser.Expr_listContext,0)


        def RPAREN(self):
            return self.getToken(MiniGoParser.RPAREN, 0)

        def LBRACE(self):
            return self.getToken(MiniGoParser.LBRACE, 0)

        def RBRACE(self):
            return self.getToken(MiniGoParser.RBRACE, 0)

        def getRuleIndex(self):
            return MiniGoParser.RULE_atom_list




    def atom_list(self):

        localctx = MiniGoParser.Atom_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_atom_list)
        try:
            self.state = 345
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [61]:
                self.enterOuterAlt(localctx, 1)
                self.state = 337
                self.match(MiniGoParser.LPAREN)
                self.state = 338
                self.expr_list()
                self.state = 339
                self.match(MiniGoParser.RPAREN)
                pass
            elif token in [63]:
                self.enterOuterAlt(localctx, 2)
                self.state = 341
                self.match(MiniGoParser.LBRACE)
                self.state = 342
                self.expr_list()
                self.state = 343
                self.match(MiniGoParser.RBRACE)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Expr_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expr(self):
            return self.getTypedRuleContext(MiniGoParser.ExprContext,0)


        def struct_literal(self):
            return self.getTypedRuleContext(MiniGoParser.Struct_literalContext,0)


        def atom_list(self):
            return self.getTypedRuleContext(MiniGoParser.Atom_listContext,0)


        def COMMA(self):
            return self.getToken(MiniGoParser.COMMA, 0)

        def expr_list(self):
            return self.getTypedRuleContext(MiniGoParser.Expr_listContext,0)


        def getRuleIndex(self):
            return MiniGoParser.RULE_expr_list




    def expr_list(self):

        localctx = MiniGoParser.Expr_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_expr_list)
        try:
            self.state = 358
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,23,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 347
                self.expr()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 348
                self.struct_literal()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 349
                self.atom_list()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 353
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,22,self._ctx)
                if la_ == 1:
                    self.state = 350
                    self.expr()
                    pass

                elif la_ == 2:
                    self.state = 351
                    self.struct_literal()
                    pass

                elif la_ == 3:
                    self.state = 352
                    self.atom_list()
                    pass


                self.state = 355
                self.match(MiniGoParser.COMMA)
                self.state = 356
                self.expr_list()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def array_literal(self):
            return self.getTypedRuleContext(MiniGoParser.Array_literalContext,0)


        def struct_literal(self):
            return self.getTypedRuleContext(MiniGoParser.Struct_literalContext,0)


        def getRuleIndex(self):
            return MiniGoParser.RULE_literal




    def literal(self):

        localctx = MiniGoParser.LiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_literal)
        try:
            self.state = 362
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [65]:
                self.enterOuterAlt(localctx, 1)
                self.state = 360
                self.array_literal()
                pass
            elif token in [35]:
                self.enterOuterAlt(localctx, 2)
                self.state = 361
                self.struct_literal()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Int_numberContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INT_LIT(self):
            return self.getToken(MiniGoParser.INT_LIT, 0)

        def HEX_LIT(self):
            return self.getToken(MiniGoParser.HEX_LIT, 0)

        def OCT_LIT(self):
            return self.getToken(MiniGoParser.OCT_LIT, 0)

        def BIN_LIT(self):
            return self.getToken(MiniGoParser.BIN_LIT, 0)

        def getRuleIndex(self):
            return MiniGoParser.RULE_int_number




    def int_number(self):

        localctx = MiniGoParser.Int_numberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_int_number)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 364
            _la = self._input.LA(1)
            if not(((((_la - 67)) & ~0x3f) == 0 and ((1 << (_la - 67)) & 15) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NumberContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def int_number(self):
            return self.getTypedRuleContext(MiniGoParser.Int_numberContext,0)


        def FLOAT_LIT(self):
            return self.getToken(MiniGoParser.FLOAT_LIT, 0)

        def getRuleIndex(self):
            return MiniGoParser.RULE_number




    def number(self):

        localctx = MiniGoParser.NumberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_number)
        try:
            self.state = 368
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [67, 68, 69, 70]:
                self.enterOuterAlt(localctx, 1)
                self.state = 366
                self.int_number()
                pass
            elif token in [71]:
                self.enterOuterAlt(localctx, 2)
                self.state = 367
                self.match(MiniGoParser.FLOAT_LIT)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Array_accessContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def secondary_index_expr(self):
            return self.getTypedRuleContext(MiniGoParser.Secondary_index_exprContext,0)


        def array_access_tail(self):
            return self.getTypedRuleContext(MiniGoParser.Array_access_tailContext,0)


        def getRuleIndex(self):
            return MiniGoParser.RULE_array_access




    def array_access(self):

        localctx = MiniGoParser.Array_accessContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_array_access)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 370
            self.secondary_index_expr()
            self.state = 371
            self.array_access_tail()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Array_access_tailContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LBRACKET(self):
            return self.getToken(MiniGoParser.LBRACKET, 0)

        def index_expr(self):
            return self.getTypedRuleContext(MiniGoParser.Index_exprContext,0)


        def RBRACKET(self):
            return self.getToken(MiniGoParser.RBRACKET, 0)

        def array_access_tail(self):
            return self.getTypedRuleContext(MiniGoParser.Array_access_tailContext,0)


        def getRuleIndex(self):
            return MiniGoParser.RULE_array_access_tail




    def array_access_tail(self):

        localctx = MiniGoParser.Array_access_tailContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_array_access_tail)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 373
            self.match(MiniGoParser.LBRACKET)
            self.state = 374
            self.index_expr()
            self.state = 375
            self.match(MiniGoParser.RBRACKET)
            self.state = 377
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,26,self._ctx)
            if la_ == 1:
                self.state = 376
                self.array_access_tail()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Index_exprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def logical_index_expr(self):
            return self.getTypedRuleContext(MiniGoParser.Logical_index_exprContext,0)


        def getRuleIndex(self):
            return MiniGoParser.RULE_index_expr




    def index_expr(self):

        localctx = MiniGoParser.Index_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_index_expr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 379
            self.logical_index_expr(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Logical_index_exprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def equality_index_expr(self):
            return self.getTypedRuleContext(MiniGoParser.Equality_index_exprContext,0)


        def logical_index_expr(self):
            return self.getTypedRuleContext(MiniGoParser.Logical_index_exprContext,0)


        def AND(self):
            return self.getToken(MiniGoParser.AND, 0)

        def OR(self):
            return self.getToken(MiniGoParser.OR, 0)

        def getRuleIndex(self):
            return MiniGoParser.RULE_logical_index_expr



    def logical_index_expr(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = MiniGoParser.Logical_index_exprContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 48
        self.enterRecursionRule(localctx, 48, self.RULE_logical_index_expr, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 382
            self.equality_index_expr(0)
            self._ctx.stop = self._input.LT(-1)
            self.state = 389
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,27,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = MiniGoParser.Logical_index_exprContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_logical_index_expr)
                    self.state = 384
                    if not self.precpred(self._ctx, 2):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                    self.state = 385
                    _la = self._input.LA(1)
                    if not(_la==47 or _la==48):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 386
                    self.equality_index_expr(0) 
                self.state = 391
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,27,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class Equality_index_exprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def relational_index_expr(self):
            return self.getTypedRuleContext(MiniGoParser.Relational_index_exprContext,0)


        def equality_index_expr(self):
            return self.getTypedRuleContext(MiniGoParser.Equality_index_exprContext,0)


        def EQ(self):
            return self.getToken(MiniGoParser.EQ, 0)

        def NEQ(self):
            return self.getToken(MiniGoParser.NEQ, 0)

        def getRuleIndex(self):
            return MiniGoParser.RULE_equality_index_expr



    def equality_index_expr(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = MiniGoParser.Equality_index_exprContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 50
        self.enterRecursionRule(localctx, 50, self.RULE_equality_index_expr, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 393
            self.relational_index_expr(0)
            self._ctx.stop = self._input.LT(-1)
            self.state = 400
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,28,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = MiniGoParser.Equality_index_exprContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_equality_index_expr)
                    self.state = 395
                    if not self.precpred(self._ctx, 2):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                    self.state = 396
                    _la = self._input.LA(1)
                    if not(_la==41 or _la==42):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 397
                    self.relational_index_expr(0) 
                self.state = 402
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,28,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class Relational_index_exprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def additive_index_expr(self):
            return self.getTypedRuleContext(MiniGoParser.Additive_index_exprContext,0)


        def relational_index_expr(self):
            return self.getTypedRuleContext(MiniGoParser.Relational_index_exprContext,0)


        def LT(self):
            return self.getToken(MiniGoParser.LT, 0)

        def LE(self):
            return self.getToken(MiniGoParser.LE, 0)

        def GT(self):
            return self.getToken(MiniGoParser.GT, 0)

        def GE(self):
            return self.getToken(MiniGoParser.GE, 0)

        def getRuleIndex(self):
            return MiniGoParser.RULE_relational_index_expr



    def relational_index_expr(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = MiniGoParser.Relational_index_exprContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 52
        self.enterRecursionRule(localctx, 52, self.RULE_relational_index_expr, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 404
            self.additive_index_expr(0)
            self._ctx.stop = self._input.LT(-1)
            self.state = 411
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,29,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = MiniGoParser.Relational_index_exprContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_relational_index_expr)
                    self.state = 406
                    if not self.precpred(self._ctx, 2):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                    self.state = 407
                    _la = self._input.LA(1)
                    if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 131941395333120) != 0)):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 408
                    self.additive_index_expr(0) 
                self.state = 413
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,29,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class Additive_index_exprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def multiplicative_index_expr(self):
            return self.getTypedRuleContext(MiniGoParser.Multiplicative_index_exprContext,0)


        def additive_index_expr(self):
            return self.getTypedRuleContext(MiniGoParser.Additive_index_exprContext,0)


        def ADD(self):
            return self.getToken(MiniGoParser.ADD, 0)

        def SUB(self):
            return self.getToken(MiniGoParser.SUB, 0)

        def getRuleIndex(self):
            return MiniGoParser.RULE_additive_index_expr



    def additive_index_expr(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = MiniGoParser.Additive_index_exprContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 54
        self.enterRecursionRule(localctx, 54, self.RULE_additive_index_expr, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 415
            self.multiplicative_index_expr(0)
            self._ctx.stop = self._input.LT(-1)
            self.state = 422
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,30,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = MiniGoParser.Additive_index_exprContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_additive_index_expr)
                    self.state = 417
                    if not self.precpred(self._ctx, 2):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                    self.state = 418
                    _la = self._input.LA(1)
                    if not(_la==36 or _la==37):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 419
                    self.multiplicative_index_expr(0) 
                self.state = 424
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,30,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class Multiplicative_index_exprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def primary_index_expr(self):
            return self.getTypedRuleContext(MiniGoParser.Primary_index_exprContext,0)


        def multiplicative_index_expr(self):
            return self.getTypedRuleContext(MiniGoParser.Multiplicative_index_exprContext,0)


        def MUL(self):
            return self.getToken(MiniGoParser.MUL, 0)

        def DIV(self):
            return self.getToken(MiniGoParser.DIV, 0)

        def MOD(self):
            return self.getToken(MiniGoParser.MOD, 0)

        def getRuleIndex(self):
            return MiniGoParser.RULE_multiplicative_index_expr



    def multiplicative_index_expr(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = MiniGoParser.Multiplicative_index_exprContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 56
        self.enterRecursionRule(localctx, 56, self.RULE_multiplicative_index_expr, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 426
            self.primary_index_expr()
            self._ctx.stop = self._input.LT(-1)
            self.state = 433
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,31,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = MiniGoParser.Multiplicative_index_exprContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_multiplicative_index_expr)
                    self.state = 428
                    if not self.precpred(self._ctx, 2):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                    self.state = 429
                    _la = self._input.LA(1)
                    if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 1924145348608) != 0)):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 430
                    self.primary_index_expr() 
                self.state = 435
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,31,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class Primary_index_exprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def secondary_index_expr(self):
            return self.getTypedRuleContext(MiniGoParser.Secondary_index_exprContext,0)


        def array_access(self):
            return self.getTypedRuleContext(MiniGoParser.Array_accessContext,0)


        def int_number(self):
            return self.getTypedRuleContext(MiniGoParser.Int_numberContext,0)


        def signed_tail(self):
            return self.getTypedRuleContext(MiniGoParser.Signed_tailContext,0)


        def LPAREN(self):
            return self.getToken(MiniGoParser.LPAREN, 0)

        def index_expr(self):
            return self.getTypedRuleContext(MiniGoParser.Index_exprContext,0)


        def RPAREN(self):
            return self.getToken(MiniGoParser.RPAREN, 0)

        def array_literal(self):
            return self.getTypedRuleContext(MiniGoParser.Array_literalContext,0)


        def struct_literal(self):
            return self.getTypedRuleContext(MiniGoParser.Struct_literalContext,0)


        def getRuleIndex(self):
            return MiniGoParser.RULE_primary_index_expr




    def primary_index_expr(self):

        localctx = MiniGoParser.Primary_index_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_primary_index_expr)
        try:
            self.state = 448
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,32,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 436
                self.secondary_index_expr()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 437
                self.array_access()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 438
                self.int_number()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 439
                self.signed_tail(0)
                self.state = 440
                self.int_number()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 442
                self.match(MiniGoParser.LPAREN)
                self.state = 443
                self.index_expr()
                self.state = 444
                self.match(MiniGoParser.RPAREN)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 446
                self.array_literal()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 447
                self.struct_literal()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Secondary_index_exprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ID(self):
            return self.getToken(MiniGoParser.ID, 0)

        def STRING_LIT(self):
            return self.getToken(MiniGoParser.STRING_LIT, 0)

        def function_call(self):
            return self.getTypedRuleContext(MiniGoParser.Function_callContext,0)


        def getRuleIndex(self):
            return MiniGoParser.RULE_secondary_index_expr




    def secondary_index_expr(self):

        localctx = MiniGoParser.Secondary_index_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_secondary_index_expr)
        try:
            self.state = 453
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,33,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 450
                self.match(MiniGoParser.ID)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 451
                self.match(MiniGoParser.STRING_LIT)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 452
                self.function_call()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Signed_tailContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def signed_tail(self):
            return self.getTypedRuleContext(MiniGoParser.Signed_tailContext,0)


        def ADD(self):
            return self.getToken(MiniGoParser.ADD, 0)

        def SUB(self):
            return self.getToken(MiniGoParser.SUB, 0)

        def NOT(self):
            return self.getToken(MiniGoParser.NOT, 0)

        def getRuleIndex(self):
            return MiniGoParser.RULE_signed_tail



    def signed_tail(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = MiniGoParser.Signed_tailContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 62
        self.enterRecursionRule(localctx, 62, self.RULE_signed_tail, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self._ctx.stop = self._input.LT(-1)
            self.state = 464
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,35,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 462
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,34,self._ctx)
                    if la_ == 1:
                        localctx = MiniGoParser.Signed_tailContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_signed_tail)
                        self.state = 456
                        if not self.precpred(self._ctx, 3):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 3)")
                        self.state = 457
                        self.match(MiniGoParser.ADD)
                        pass

                    elif la_ == 2:
                        localctx = MiniGoParser.Signed_tailContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_signed_tail)
                        self.state = 458
                        if not self.precpred(self._ctx, 2):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                        self.state = 459
                        self.match(MiniGoParser.SUB)
                        pass

                    elif la_ == 3:
                        localctx = MiniGoParser.Signed_tailContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_signed_tail)
                        self.state = 460
                        if not self.precpred(self._ctx, 1):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                        self.state = 461
                        self.match(MiniGoParser.NOT)
                        pass

             
                self.state = 466
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,35,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class Array_literalContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def array_literal_tail3(self):
            return self.getTypedRuleContext(MiniGoParser.Array_literal_tail3Context,0)


        def types(self):
            return self.getTypedRuleContext(MiniGoParser.TypesContext,0)


        def LBRACE(self):
            return self.getToken(MiniGoParser.LBRACE, 0)

        def array_literal_tail(self):
            return self.getTypedRuleContext(MiniGoParser.Array_literal_tailContext,0)


        def RBRACE(self):
            return self.getToken(MiniGoParser.RBRACE, 0)

        def getRuleIndex(self):
            return MiniGoParser.RULE_array_literal




    def array_literal(self):

        localctx = MiniGoParser.Array_literalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_array_literal)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 467
            self.array_literal_tail3()
            self.state = 468
            self.types()
            self.state = 469
            self.match(MiniGoParser.LBRACE)
            self.state = 470
            self.array_literal_tail()
            self.state = 471
            self.match(MiniGoParser.RBRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Array_literal_tailContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expr(self):
            return self.getTypedRuleContext(MiniGoParser.ExprContext,0)


        def atom_list(self):
            return self.getTypedRuleContext(MiniGoParser.Atom_listContext,0)


        def COMMA(self):
            return self.getToken(MiniGoParser.COMMA, 0)

        def array_literal_tail(self):
            return self.getTypedRuleContext(MiniGoParser.Array_literal_tailContext,0)


        def getRuleIndex(self):
            return MiniGoParser.RULE_array_literal_tail




    def array_literal_tail(self):

        localctx = MiniGoParser.Array_literal_tailContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_array_literal_tail)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 475
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,36,self._ctx)
            if la_ == 1:
                self.state = 473
                self.expr()
                pass

            elif la_ == 2:
                self.state = 474
                self.atom_list()
                pass


            self.state = 479
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==58:
                self.state = 477
                self.match(MiniGoParser.COMMA)
                self.state = 478
                self.array_literal_tail()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Array_literal_tail3Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LBRACKET(self):
            return self.getToken(MiniGoParser.LBRACKET, 0)

        def index_expr(self):
            return self.getTypedRuleContext(MiniGoParser.Index_exprContext,0)


        def RBRACKET(self):
            return self.getToken(MiniGoParser.RBRACKET, 0)

        def array_literal_tail3(self):
            return self.getTypedRuleContext(MiniGoParser.Array_literal_tail3Context,0)


        def getRuleIndex(self):
            return MiniGoParser.RULE_array_literal_tail3




    def array_literal_tail3(self):

        localctx = MiniGoParser.Array_literal_tail3Context(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_array_literal_tail3)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 481
            self.match(MiniGoParser.LBRACKET)
            self.state = 482
            self.index_expr()
            self.state = 483
            self.match(MiniGoParser.RBRACKET)
            self.state = 485
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,38,self._ctx)
            if la_ == 1:
                self.state = 484
                self.array_literal_tail3()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Struct_literalContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ID(self):
            return self.getToken(MiniGoParser.ID, 0)

        def LBRACE(self):
            return self.getToken(MiniGoParser.LBRACE, 0)

        def struct_literal_tail(self):
            return self.getTypedRuleContext(MiniGoParser.Struct_literal_tailContext,0)


        def RBRACE(self):
            return self.getToken(MiniGoParser.RBRACE, 0)

        def getRuleIndex(self):
            return MiniGoParser.RULE_struct_literal




    def struct_literal(self):

        localctx = MiniGoParser.Struct_literalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_struct_literal)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 487
            self.match(MiniGoParser.ID)
            self.state = 488
            self.match(MiniGoParser.LBRACE)
            self.state = 489
            self.struct_literal_tail()
            self.state = 490
            self.match(MiniGoParser.RBRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Struct_literal_tailContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def field_init(self):
            return self.getTypedRuleContext(MiniGoParser.Field_initContext,0)


        def struct_literal_tail2(self):
            return self.getTypedRuleContext(MiniGoParser.Struct_literal_tail2Context,0)


        def getRuleIndex(self):
            return MiniGoParser.RULE_struct_literal_tail




    def struct_literal_tail(self):

        localctx = MiniGoParser.Struct_literal_tailContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_struct_literal_tail)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 495
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==35:
                self.state = 492
                self.field_init()
                self.state = 493
                self.struct_literal_tail2()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Struct_literal_tail2Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COMMA(self):
            return self.getToken(MiniGoParser.COMMA, 0)

        def field_init(self):
            return self.getTypedRuleContext(MiniGoParser.Field_initContext,0)


        def struct_literal_tail2(self):
            return self.getTypedRuleContext(MiniGoParser.Struct_literal_tail2Context,0)


        def getRuleIndex(self):
            return MiniGoParser.RULE_struct_literal_tail2




    def struct_literal_tail2(self):

        localctx = MiniGoParser.Struct_literal_tail2Context(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_struct_literal_tail2)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 501
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==58:
                self.state = 497
                self.match(MiniGoParser.COMMA)
                self.state = 498
                self.field_init()
                self.state = 499
                self.struct_literal_tail2()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Field_initContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ID(self):
            return self.getToken(MiniGoParser.ID, 0)

        def COLON(self):
            return self.getToken(MiniGoParser.COLON, 0)

        def expr(self):
            return self.getTypedRuleContext(MiniGoParser.ExprContext,0)


        def getRuleIndex(self):
            return MiniGoParser.RULE_field_init




    def field_init(self):

        localctx = MiniGoParser.Field_initContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_field_init)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 503
            self.match(MiniGoParser.ID)
            self.state = 504
            self.match(MiniGoParser.COLON)
            self.state = 505
            self.expr()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Struct_field_accessContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ID(self):
            return self.getToken(MiniGoParser.ID, 0)

        def function_call(self):
            return self.getTypedRuleContext(MiniGoParser.Function_callContext,0)


        def array_access(self):
            return self.getTypedRuleContext(MiniGoParser.Array_accessContext,0)


        def struct_field_access(self):
            return self.getTypedRuleContext(MiniGoParser.Struct_field_accessContext,0)


        def DOT(self):
            return self.getToken(MiniGoParser.DOT, 0)

        def getRuleIndex(self):
            return MiniGoParser.RULE_struct_field_access



    def struct_field_access(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = MiniGoParser.Struct_field_accessContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 78
        self.enterRecursionRule(localctx, 78, self.RULE_struct_field_access, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 511
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,41,self._ctx)
            if la_ == 1:
                self.state = 508
                self.match(MiniGoParser.ID)
                pass

            elif la_ == 2:
                self.state = 509
                self.function_call()
                pass

            elif la_ == 3:
                self.state = 510
                self.array_access()
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 522
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,43,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = MiniGoParser.Struct_field_accessContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_struct_field_access)
                    self.state = 513
                    if not self.precpred(self._ctx, 4):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 4)")
                    self.state = 514
                    self.match(MiniGoParser.DOT)
                    self.state = 518
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,42,self._ctx)
                    if la_ == 1:
                        self.state = 515
                        self.match(MiniGoParser.ID)
                        pass

                    elif la_ == 2:
                        self.state = 516
                        self.function_call()
                        pass

                    elif la_ == 3:
                        self.state = 517
                        self.array_access()
                        pass

             
                self.state = 524
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,43,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class Struct_field_access_no_funcContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ID(self):
            return self.getToken(MiniGoParser.ID, 0)

        def array_access(self):
            return self.getTypedRuleContext(MiniGoParser.Array_accessContext,0)


        def struct_field_access_no_func(self):
            return self.getTypedRuleContext(MiniGoParser.Struct_field_access_no_funcContext,0)


        def DOT(self):
            return self.getToken(MiniGoParser.DOT, 0)

        def getRuleIndex(self):
            return MiniGoParser.RULE_struct_field_access_no_func



    def struct_field_access_no_func(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = MiniGoParser.Struct_field_access_no_funcContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 80
        self.enterRecursionRule(localctx, 80, self.RULE_struct_field_access_no_func, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 528
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,44,self._ctx)
            if la_ == 1:
                self.state = 526
                self.match(MiniGoParser.ID)
                pass

            elif la_ == 2:
                self.state = 527
                self.array_access()
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 538
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,46,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = MiniGoParser.Struct_field_access_no_funcContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_struct_field_access_no_func)
                    self.state = 530
                    if not self.precpred(self._ctx, 3):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 3)")
                    self.state = 531
                    self.match(MiniGoParser.DOT)
                    self.state = 534
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,45,self._ctx)
                    if la_ == 1:
                        self.state = 532
                        self.match(MiniGoParser.ID)
                        pass

                    elif la_ == 2:
                        self.state = 533
                        self.array_access()
                        pass

             
                self.state = 540
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,46,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class Stmt_primaryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def function_call(self):
            return self.getTypedRuleContext(MiniGoParser.Function_callContext,0)


        def SEMICOLON(self):
            return self.getToken(MiniGoParser.SEMICOLON, 0)

        def NEWLINE(self):
            return self.getToken(MiniGoParser.NEWLINE, 0)

        def array_access(self):
            return self.getTypedRuleContext(MiniGoParser.Array_accessContext,0)


        def struct_field_access(self):
            return self.getTypedRuleContext(MiniGoParser.Struct_field_accessContext,0)


        def struct_field_access_no_func(self):
            return self.getTypedRuleContext(MiniGoParser.Struct_field_access_no_funcContext,0)


        def if_stmt(self):
            return self.getTypedRuleContext(MiniGoParser.If_stmtContext,0)


        def for_stmt(self):
            return self.getTypedRuleContext(MiniGoParser.For_stmtContext,0)


        def assignment_stmt(self):
            return self.getTypedRuleContext(MiniGoParser.Assignment_stmtContext,0)


        def getRuleIndex(self):
            return MiniGoParser.RULE_stmt_primary




    def stmt_primary(self):

        localctx = MiniGoParser.Stmt_primaryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_stmt_primary)
        self._la = 0 # Token type
        try:
            self.state = 558
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,47,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 541
                self.function_call()
                self.state = 542
                _la = self._input.LA(1)
                if not(_la==34 or _la==59):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 544
                self.array_access()
                self.state = 545
                _la = self._input.LA(1)
                if not(_la==34 or _la==59):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 547
                self.struct_field_access(0)
                self.state = 548
                _la = self._input.LA(1)
                if not(_la==34 or _la==59):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 550
                self.struct_field_access_no_func(0)
                self.state = 551
                _la = self._input.LA(1)
                if not(_la==34 or _la==59):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 553
                self.if_stmt()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 554
                self.for_stmt()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 555
                self.assignment_stmt()
                self.state = 556
                _la = self._input.LA(1)
                if not(_la==34 or _la==59):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Stmt_in_blockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def decl(self):
            return self.getTypedRuleContext(MiniGoParser.DeclContext,0)


        def stmt_primary(self):
            return self.getTypedRuleContext(MiniGoParser.Stmt_primaryContext,0)


        def break_stmt(self):
            return self.getTypedRuleContext(MiniGoParser.Break_stmtContext,0)


        def SEMICOLON(self):
            return self.getToken(MiniGoParser.SEMICOLON, 0)

        def NEWLINE(self):
            return self.getToken(MiniGoParser.NEWLINE, 0)

        def continue_stmt(self):
            return self.getTypedRuleContext(MiniGoParser.Continue_stmtContext,0)


        def return_stmt(self):
            return self.getTypedRuleContext(MiniGoParser.Return_stmtContext,0)


        def getRuleIndex(self):
            return MiniGoParser.RULE_stmt_in_block




    def stmt_in_block(self):

        localctx = MiniGoParser.Stmt_in_blockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_stmt_in_block)
        self._la = 0 # Token type
        try:
            self.state = 572
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,48,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 560
                self.decl()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 561
                self.stmt_primary()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 562
                self.break_stmt()
                self.state = 563
                _la = self._input.LA(1)
                if not(_la==34 or _la==59):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 565
                self.continue_stmt()
                self.state = 566
                _la = self._input.LA(1)
                if not(_la==34 or _la==59):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 568
                self.return_stmt()
                self.state = 569
                _la = self._input.LA(1)
                if not(_la==34 or _la==59):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 571
                self.match(MiniGoParser.NEWLINE)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Stmt_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def stmt_in_block(self):
            return self.getTypedRuleContext(MiniGoParser.Stmt_in_blockContext,0)


        def stmt_list(self):
            return self.getTypedRuleContext(MiniGoParser.Stmt_listContext,0)


        def getRuleIndex(self):
            return MiniGoParser.RULE_stmt_list



    def stmt_list(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = MiniGoParser.Stmt_listContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 86
        self.enterRecursionRule(localctx, 86, self.RULE_stmt_list, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 575
            self.stmt_in_block()
            self._ctx.stop = self._input.LT(-1)
            self.state = 581
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,49,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = MiniGoParser.Stmt_listContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_stmt_list)
                    self.state = 577
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 578
                    self.stmt_in_block() 
                self.state = 583
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,49,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class Assignment_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def lhs(self):
            return self.getTypedRuleContext(MiniGoParser.LhsContext,0)


        def assignment_operator(self):
            return self.getTypedRuleContext(MiniGoParser.Assignment_operatorContext,0)


        def expr(self):
            return self.getTypedRuleContext(MiniGoParser.ExprContext,0)


        def getRuleIndex(self):
            return MiniGoParser.RULE_assignment_stmt




    def assignment_stmt(self):

        localctx = MiniGoParser.Assignment_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_assignment_stmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 584
            self.lhs()
            self.state = 585
            self.assignment_operator()
            self.state = 586
            self.expr()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Assignment_operatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ASSIGN(self):
            return self.getToken(MiniGoParser.ASSIGN, 0)

        def ADD_ASSIGN(self):
            return self.getToken(MiniGoParser.ADD_ASSIGN, 0)

        def SUB_ASSIGN(self):
            return self.getToken(MiniGoParser.SUB_ASSIGN, 0)

        def MUL_ASSIGN(self):
            return self.getToken(MiniGoParser.MUL_ASSIGN, 0)

        def DIV_ASSIGN(self):
            return self.getToken(MiniGoParser.DIV_ASSIGN, 0)

        def MOD_ASSIGN(self):
            return self.getToken(MiniGoParser.MOD_ASSIGN, 0)

        def getRuleIndex(self):
            return MiniGoParser.RULE_assignment_operator




    def assignment_operator(self):

        localctx = MiniGoParser.Assignment_operatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_assignment_operator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 588
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 140737488355328000) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Assignment_exprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def lhs(self):
            return self.getTypedRuleContext(MiniGoParser.LhsContext,0)


        def ASSIGN(self):
            return self.getToken(MiniGoParser.ASSIGN, 0)

        def SHORT_ASSIGN(self):
            return self.getToken(MiniGoParser.SHORT_ASSIGN, 0)

        def expr(self):
            return self.getTypedRuleContext(MiniGoParser.ExprContext,0)


        def struct_literal(self):
            return self.getTypedRuleContext(MiniGoParser.Struct_literalContext,0)


        def getRuleIndex(self):
            return MiniGoParser.RULE_assignment_expr




    def assignment_expr(self):

        localctx = MiniGoParser.Assignment_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_assignment_expr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 590
            self.lhs()
            self.state = 591
            _la = self._input.LA(1)
            if not(_la==50 or _la==51):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 594
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,50,self._ctx)
            if la_ == 1:
                self.state = 592
                self.expr()
                pass

            elif la_ == 2:
                self.state = 593
                self.struct_literal()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LhsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ID(self):
            return self.getToken(MiniGoParser.ID, 0)

        def array_access(self):
            return self.getTypedRuleContext(MiniGoParser.Array_accessContext,0)


        def struct_field_access_no_func(self):
            return self.getTypedRuleContext(MiniGoParser.Struct_field_access_no_funcContext,0)


        def getRuleIndex(self):
            return MiniGoParser.RULE_lhs




    def lhs(self):

        localctx = MiniGoParser.LhsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_lhs)
        try:
            self.state = 599
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,51,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 596
                self.match(MiniGoParser.ID)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 597
                self.array_access()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 598
                self.struct_field_access_no_func(0)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class If_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IF(self):
            return self.getToken(MiniGoParser.IF, 0)

        def LPAREN(self):
            return self.getToken(MiniGoParser.LPAREN, 0)

        def expr(self):
            return self.getTypedRuleContext(MiniGoParser.ExprContext,0)


        def RPAREN(self):
            return self.getToken(MiniGoParser.RPAREN, 0)

        def block(self):
            return self.getTypedRuleContext(MiniGoParser.BlockContext,0)


        def if_stmt_tail(self):
            return self.getTypedRuleContext(MiniGoParser.If_stmt_tailContext,0)


        def newlines(self):
            return self.getTypedRuleContext(MiniGoParser.NewlinesContext,0)


        def getRuleIndex(self):
            return MiniGoParser.RULE_if_stmt




    def if_stmt(self):

        localctx = MiniGoParser.If_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_if_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 601
            self.match(MiniGoParser.IF)
            self.state = 602
            self.match(MiniGoParser.LPAREN)
            self.state = 603
            self.expr()
            self.state = 604
            self.match(MiniGoParser.RPAREN)
            self.state = 606
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==34:
                self.state = 605
                self.newlines(0)


            self.state = 608
            self.block()
            self.state = 609
            self.if_stmt_tail()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class If_stmt_tailContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ELSE(self):
            return self.getToken(MiniGoParser.ELSE, 0)

        def IF(self):
            return self.getToken(MiniGoParser.IF, 0)

        def LPAREN(self):
            return self.getToken(MiniGoParser.LPAREN, 0)

        def expr(self):
            return self.getTypedRuleContext(MiniGoParser.ExprContext,0)


        def RPAREN(self):
            return self.getToken(MiniGoParser.RPAREN, 0)

        def block(self):
            return self.getTypedRuleContext(MiniGoParser.BlockContext,0)


        def if_stmt_tail(self):
            return self.getTypedRuleContext(MiniGoParser.If_stmt_tailContext,0)


        def newlines(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MiniGoParser.NewlinesContext)
            else:
                return self.getTypedRuleContext(MiniGoParser.NewlinesContext,i)


        def getRuleIndex(self):
            return MiniGoParser.RULE_if_stmt_tail




    def if_stmt_tail(self):

        localctx = MiniGoParser.If_stmt_tailContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_if_stmt_tail)
        self._la = 0 # Token type
        try:
            self.state = 637
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,59,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 625
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,55,self._ctx)
                if la_ == 1:
                    self.state = 612
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==34:
                        self.state = 611
                        self.newlines(0)


                    self.state = 614
                    self.match(MiniGoParser.ELSE)
                    self.state = 615
                    self.match(MiniGoParser.IF)
                    self.state = 616
                    self.match(MiniGoParser.LPAREN)
                    self.state = 617
                    self.expr()
                    self.state = 618
                    self.match(MiniGoParser.RPAREN)
                    self.state = 620
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==34:
                        self.state = 619
                        self.newlines(0)


                    self.state = 622
                    self.block()
                    self.state = 623
                    self.if_stmt_tail()


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 635
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,58,self._ctx)
                if la_ == 1:
                    self.state = 628
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==34:
                        self.state = 627
                        self.newlines(0)


                    self.state = 630
                    self.match(MiniGoParser.ELSE)
                    self.state = 632
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==34:
                        self.state = 631
                        self.newlines(0)


                    self.state = 634
                    self.block()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class For_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FOR(self):
            return self.getToken(MiniGoParser.FOR, 0)

        def for_init(self):
            return self.getTypedRuleContext(MiniGoParser.For_initContext,0)


        def SEMICOLON(self, i:int=None):
            if i is None:
                return self.getTokens(MiniGoParser.SEMICOLON)
            else:
                return self.getToken(MiniGoParser.SEMICOLON, i)

        def expr(self):
            return self.getTypedRuleContext(MiniGoParser.ExprContext,0)


        def for_update(self):
            return self.getTypedRuleContext(MiniGoParser.For_updateContext,0)


        def block(self):
            return self.getTypedRuleContext(MiniGoParser.BlockContext,0)


        def newlines(self):
            return self.getTypedRuleContext(MiniGoParser.NewlinesContext,0)


        def ID(self, i:int=None):
            if i is None:
                return self.getTokens(MiniGoParser.ID)
            else:
                return self.getToken(MiniGoParser.ID, i)

        def COMMA(self):
            return self.getToken(MiniGoParser.COMMA, 0)

        def SHORT_ASSIGN(self):
            return self.getToken(MiniGoParser.SHORT_ASSIGN, 0)

        def RANGE(self):
            return self.getToken(MiniGoParser.RANGE, 0)

        def atom(self):
            return self.getTypedRuleContext(MiniGoParser.AtomContext,0)


        def getRuleIndex(self):
            return MiniGoParser.RULE_for_stmt




    def for_stmt(self):

        localctx = MiniGoParser.For_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_for_stmt)
        self._la = 0 # Token type
        try:
            self.state = 669
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,63,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 639
                self.match(MiniGoParser.FOR)
                self.state = 640
                self.for_init()
                self.state = 641
                self.match(MiniGoParser.SEMICOLON)
                self.state = 642
                self.expr()
                self.state = 643
                self.match(MiniGoParser.SEMICOLON)
                self.state = 644
                self.for_update()
                self.state = 646
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==34:
                    self.state = 645
                    self.newlines(0)


                self.state = 648
                self.block()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 650
                self.match(MiniGoParser.FOR)
                self.state = 651
                self.match(MiniGoParser.ID)
                self.state = 652
                self.match(MiniGoParser.COMMA)
                self.state = 653
                self.match(MiniGoParser.ID)
                self.state = 654
                self.match(MiniGoParser.SHORT_ASSIGN)
                self.state = 655
                self.match(MiniGoParser.RANGE)
                self.state = 656
                self.atom()
                self.state = 658
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==34:
                    self.state = 657
                    self.newlines(0)


                self.state = 660
                self.block()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 662
                self.match(MiniGoParser.FOR)
                self.state = 663
                self.expr()
                self.state = 665
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==34:
                    self.state = 664
                    self.newlines(0)


                self.state = 667
                self.block()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class For_initContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def short_decl(self):
            return self.getTypedRuleContext(MiniGoParser.Short_declContext,0)


        def var_decl(self):
            return self.getTypedRuleContext(MiniGoParser.Var_declContext,0)


        def array_decl(self):
            return self.getTypedRuleContext(MiniGoParser.Array_declContext,0)


        def func_decl(self):
            return self.getTypedRuleContext(MiniGoParser.Func_declContext,0)


        def getRuleIndex(self):
            return MiniGoParser.RULE_for_init




    def for_init(self):

        localctx = MiniGoParser.For_initContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_for_init)
        try:
            self.state = 675
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,64,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 671
                self.short_decl()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 672
                self.var_decl()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 673
                self.array_decl()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 674
                self.func_decl()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class For_updateContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def assignment_stmt(self):
            return self.getTypedRuleContext(MiniGoParser.Assignment_stmtContext,0)


        def short_decl(self):
            return self.getTypedRuleContext(MiniGoParser.Short_declContext,0)


        def getRuleIndex(self):
            return MiniGoParser.RULE_for_update




    def for_update(self):

        localctx = MiniGoParser.For_updateContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_for_update)
        try:
            self.state = 679
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,65,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 677
                self.assignment_stmt()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 678
                self.short_decl()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class For_conditionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expr(self):
            return self.getTypedRuleContext(MiniGoParser.ExprContext,0)


        def getRuleIndex(self):
            return MiniGoParser.RULE_for_condition




    def for_condition(self):

        localctx = MiniGoParser.For_conditionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_for_condition)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 681
            self.expr()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Return_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RETURN(self):
            return self.getToken(MiniGoParser.RETURN, 0)

        def expr(self):
            return self.getTypedRuleContext(MiniGoParser.ExprContext,0)


        def getRuleIndex(self):
            return MiniGoParser.RULE_return_stmt




    def return_stmt(self):

        localctx = MiniGoParser.Return_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_return_stmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 683
            self.match(MiniGoParser.RETURN)
            self.state = 685
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,66,self._ctx)
            if la_ == 1:
                self.state = 684
                self.expr()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Continue_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CONTINUE(self):
            return self.getToken(MiniGoParser.CONTINUE, 0)

        def getRuleIndex(self):
            return MiniGoParser.RULE_continue_stmt




    def continue_stmt(self):

        localctx = MiniGoParser.Continue_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_continue_stmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 687
            self.match(MiniGoParser.CONTINUE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Break_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BREAK(self):
            return self.getToken(MiniGoParser.BREAK, 0)

        def getRuleIndex(self):
            return MiniGoParser.RULE_break_stmt




    def break_stmt(self):

        localctx = MiniGoParser.Break_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_break_stmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 689
            self.match(MiniGoParser.BREAK)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Var_declContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def VAR(self):
            return self.getToken(MiniGoParser.VAR, 0)

        def ID(self):
            return self.getToken(MiniGoParser.ID, 0)

        def ASSIGN(self):
            return self.getToken(MiniGoParser.ASSIGN, 0)

        def expr(self):
            return self.getTypedRuleContext(MiniGoParser.ExprContext,0)


        def types(self):
            return self.getTypedRuleContext(MiniGoParser.TypesContext,0)


        def getRuleIndex(self):
            return MiniGoParser.RULE_var_decl




    def var_decl(self):

        localctx = MiniGoParser.Var_declContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_var_decl)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 691
            self.match(MiniGoParser.VAR)
            self.state = 692
            self.match(MiniGoParser.ID)
            self.state = 694
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 7)) & ~0x3f) == 0 and ((1 << (_la - 7)) & 288230376420147263) != 0):
                self.state = 693
                self.types()


            self.state = 696
            self.match(MiniGoParser.ASSIGN)
            self.state = 697
            self.expr()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Var_decl_no_initContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def VAR(self):
            return self.getToken(MiniGoParser.VAR, 0)

        def ID(self):
            return self.getToken(MiniGoParser.ID, 0)

        def types(self):
            return self.getTypedRuleContext(MiniGoParser.TypesContext,0)


        def getRuleIndex(self):
            return MiniGoParser.RULE_var_decl_no_init




    def var_decl_no_init(self):

        localctx = MiniGoParser.Var_decl_no_initContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_var_decl_no_init)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 699
            self.match(MiniGoParser.VAR)
            self.state = 700
            self.match(MiniGoParser.ID)
            self.state = 701
            self.types()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Short_declContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SHORT_ASSIGN(self):
            return self.getToken(MiniGoParser.SHORT_ASSIGN, 0)

        def expr(self):
            return self.getTypedRuleContext(MiniGoParser.ExprContext,0)


        def lhs(self):
            return self.getTypedRuleContext(MiniGoParser.LhsContext,0)


        def ID(self):
            return self.getToken(MiniGoParser.ID, 0)

        def dimensions(self):
            return self.getTypedRuleContext(MiniGoParser.DimensionsContext,0)


        def types(self):
            return self.getTypedRuleContext(MiniGoParser.TypesContext,0)


        def getRuleIndex(self):
            return MiniGoParser.RULE_short_decl




    def short_decl(self):

        localctx = MiniGoParser.Short_declContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_short_decl)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 708
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,68,self._ctx)
            if la_ == 1:
                self.state = 703
                self.lhs()
                pass

            elif la_ == 2:
                self.state = 704
                self.match(MiniGoParser.ID)
                self.state = 705
                self.dimensions()
                self.state = 706
                self.types()
                pass


            self.state = 710
            self.match(MiniGoParser.SHORT_ASSIGN)
            self.state = 711
            self.expr()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Const_declContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CONST(self):
            return self.getToken(MiniGoParser.CONST, 0)

        def ID(self):
            return self.getToken(MiniGoParser.ID, 0)

        def ASSIGN(self):
            return self.getToken(MiniGoParser.ASSIGN, 0)

        def expr(self):
            return self.getTypedRuleContext(MiniGoParser.ExprContext,0)


        def getRuleIndex(self):
            return MiniGoParser.RULE_const_decl




    def const_decl(self):

        localctx = MiniGoParser.Const_declContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_const_decl)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 713
            self.match(MiniGoParser.CONST)
            self.state = 714
            self.match(MiniGoParser.ID)
            self.state = 715
            self.match(MiniGoParser.ASSIGN)
            self.state = 716
            self.expr()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def primitiveType(self):
            return self.getTypedRuleContext(MiniGoParser.PrimitiveTypeContext,0)


        def compositeType(self):
            return self.getTypedRuleContext(MiniGoParser.CompositeTypeContext,0)


        def userDefineType(self):
            return self.getTypedRuleContext(MiniGoParser.UserDefineTypeContext,0)


        def arrayType(self):
            return self.getTypedRuleContext(MiniGoParser.ArrayTypeContext,0)


        def getRuleIndex(self):
            return MiniGoParser.RULE_types




    def types(self):

        localctx = MiniGoParser.TypesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_types)
        try:
            self.state = 722
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [9, 10, 11, 12]:
                self.enterOuterAlt(localctx, 1)
                self.state = 718
                self.primitiveType()
                pass
            elif token in [7, 8]:
                self.enterOuterAlt(localctx, 2)
                self.state = 719
                self.compositeType()
                pass
            elif token in [35]:
                self.enterOuterAlt(localctx, 3)
                self.state = 720
                self.userDefineType()
                pass
            elif token in [65]:
                self.enterOuterAlt(localctx, 4)
                self.state = 721
                self.arrayType()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PrimitiveTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INT(self):
            return self.getToken(MiniGoParser.INT, 0)

        def FLOAT(self):
            return self.getToken(MiniGoParser.FLOAT, 0)

        def STRING(self):
            return self.getToken(MiniGoParser.STRING, 0)

        def BOOLEAN(self):
            return self.getToken(MiniGoParser.BOOLEAN, 0)

        def getRuleIndex(self):
            return MiniGoParser.RULE_primitiveType




    def primitiveType(self):

        localctx = MiniGoParser.PrimitiveTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 124, self.RULE_primitiveType)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 724
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 7680) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CompositeTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STRUCT(self):
            return self.getToken(MiniGoParser.STRUCT, 0)

        def INTERFACE(self):
            return self.getToken(MiniGoParser.INTERFACE, 0)

        def getRuleIndex(self):
            return MiniGoParser.RULE_compositeType




    def compositeType(self):

        localctx = MiniGoParser.CompositeTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 126, self.RULE_compositeType)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 726
            _la = self._input.LA(1)
            if not(_la==7 or _la==8):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArrayTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def array_access_tail(self):
            return self.getTypedRuleContext(MiniGoParser.Array_access_tailContext,0)


        def types(self):
            return self.getTypedRuleContext(MiniGoParser.TypesContext,0)


        def getRuleIndex(self):
            return MiniGoParser.RULE_arrayType




    def arrayType(self):

        localctx = MiniGoParser.ArrayTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 128, self.RULE_arrayType)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 728
            self.array_access_tail()
            self.state = 729
            self.types()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UserDefineTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ID(self):
            return self.getToken(MiniGoParser.ID, 0)

        def getRuleIndex(self):
            return MiniGoParser.RULE_userDefineType




    def userDefineType(self):

        localctx = MiniGoParser.UserDefineTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 130, self.RULE_userDefineType)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 731
            self.match(MiniGoParser.ID)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Array_declContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def VAR(self):
            return self.getToken(MiniGoParser.VAR, 0)

        def ID(self):
            return self.getToken(MiniGoParser.ID, 0)

        def dimensions(self):
            return self.getTypedRuleContext(MiniGoParser.DimensionsContext,0)


        def types(self):
            return self.getTypedRuleContext(MiniGoParser.TypesContext,0)


        def ASSIGN(self):
            return self.getToken(MiniGoParser.ASSIGN, 0)

        def array_init(self):
            return self.getTypedRuleContext(MiniGoParser.Array_initContext,0)


        def getRuleIndex(self):
            return MiniGoParser.RULE_array_decl




    def array_decl(self):

        localctx = MiniGoParser.Array_declContext(self, self._ctx, self.state)
        self.enterRule(localctx, 132, self.RULE_array_decl)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 733
            self.match(MiniGoParser.VAR)
            self.state = 734
            self.match(MiniGoParser.ID)
            self.state = 735
            self.dimensions()
            self.state = 736
            self.types()
            self.state = 739
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==50:
                self.state = 737
                self.match(MiniGoParser.ASSIGN)
                self.state = 738
                self.array_init()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DimensionsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LBRACKET(self):
            return self.getToken(MiniGoParser.LBRACKET, 0)

        def INT_LIT(self):
            return self.getToken(MiniGoParser.INT_LIT, 0)

        def RBRACKET(self):
            return self.getToken(MiniGoParser.RBRACKET, 0)

        def dimensions(self):
            return self.getTypedRuleContext(MiniGoParser.DimensionsContext,0)


        def getRuleIndex(self):
            return MiniGoParser.RULE_dimensions




    def dimensions(self):

        localctx = MiniGoParser.DimensionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 134, self.RULE_dimensions)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 741
            self.match(MiniGoParser.LBRACKET)
            self.state = 742
            self.match(MiniGoParser.INT_LIT)
            self.state = 743
            self.match(MiniGoParser.RBRACKET)
            self.state = 745
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,71,self._ctx)
            if la_ == 1:
                self.state = 744
                self.dimensions()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Array_initContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LBRACE(self):
            return self.getToken(MiniGoParser.LBRACE, 0)

        def array_init_tail(self):
            return self.getTypedRuleContext(MiniGoParser.Array_init_tailContext,0)


        def RBRACE(self):
            return self.getToken(MiniGoParser.RBRACE, 0)

        def expr(self):
            return self.getTypedRuleContext(MiniGoParser.ExprContext,0)


        def getRuleIndex(self):
            return MiniGoParser.RULE_array_init




    def array_init(self):

        localctx = MiniGoParser.Array_initContext(self, self._ctx, self.state)
        self.enterRule(localctx, 136, self.RULE_array_init)
        try:
            self.state = 752
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,72,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 747
                self.match(MiniGoParser.LBRACE)
                self.state = 748
                self.array_init_tail()
                self.state = 749
                self.match(MiniGoParser.RBRACE)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 751
                self.expr()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Array_init_tailContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expr(self):
            return self.getTypedRuleContext(MiniGoParser.ExprContext,0)


        def atom_list(self):
            return self.getTypedRuleContext(MiniGoParser.Atom_listContext,0)


        def COMMA(self):
            return self.getToken(MiniGoParser.COMMA, 0)

        def array_init_tail(self):
            return self.getTypedRuleContext(MiniGoParser.Array_init_tailContext,0)


        def getRuleIndex(self):
            return MiniGoParser.RULE_array_init_tail




    def array_init_tail(self):

        localctx = MiniGoParser.Array_init_tailContext(self, self._ctx, self.state)
        self.enterRule(localctx, 138, self.RULE_array_init_tail)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 762
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,75,self._ctx)
            if la_ == 1:
                self.state = 756
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,73,self._ctx)
                if la_ == 1:
                    self.state = 754
                    self.expr()
                    pass

                elif la_ == 2:
                    self.state = 755
                    self.atom_list()
                    pass


                self.state = 760
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==58:
                    self.state = 758
                    self.match(MiniGoParser.COMMA)
                    self.state = 759
                    self.array_init_tail()




        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Struct_declContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TYPE(self):
            return self.getToken(MiniGoParser.TYPE, 0)

        def ID(self):
            return self.getToken(MiniGoParser.ID, 0)

        def STRUCT(self):
            return self.getToken(MiniGoParser.STRUCT, 0)

        def LBRACE(self):
            return self.getToken(MiniGoParser.LBRACE, 0)

        def field_decl_list(self):
            return self.getTypedRuleContext(MiniGoParser.Field_decl_listContext,0)


        def RBRACE(self):
            return self.getToken(MiniGoParser.RBRACE, 0)

        def newlines(self):
            return self.getTypedRuleContext(MiniGoParser.NewlinesContext,0)


        def getRuleIndex(self):
            return MiniGoParser.RULE_struct_decl




    def struct_decl(self):

        localctx = MiniGoParser.Struct_declContext(self, self._ctx, self.state)
        self.enterRule(localctx, 140, self.RULE_struct_decl)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 764
            self.match(MiniGoParser.TYPE)
            self.state = 765
            self.match(MiniGoParser.ID)
            self.state = 766
            self.match(MiniGoParser.STRUCT)
            self.state = 767
            self.match(MiniGoParser.LBRACE)
            self.state = 769
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,76,self._ctx)
            if la_ == 1:
                self.state = 768
                self.newlines(0)


            self.state = 771
            self.field_decl_list()
            self.state = 772
            self.match(MiniGoParser.RBRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Field_decl_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def field_decl(self):
            return self.getTypedRuleContext(MiniGoParser.Field_declContext,0)


        def struct_decl(self):
            return self.getTypedRuleContext(MiniGoParser.Struct_declContext,0)


        def interface_decl(self):
            return self.getTypedRuleContext(MiniGoParser.Interface_declContext,0)


        def method_decl(self):
            return self.getTypedRuleContext(MiniGoParser.Method_declContext,0)


        def NEWLINE(self):
            return self.getToken(MiniGoParser.NEWLINE, 0)

        def field_decl_list(self):
            return self.getTypedRuleContext(MiniGoParser.Field_decl_listContext,0)


        def getRuleIndex(self):
            return MiniGoParser.RULE_field_decl_list




    def field_decl_list(self):

        localctx = MiniGoParser.Field_decl_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 142, self.RULE_field_decl_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 779
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,77,self._ctx)
            if la_ == 1:
                self.state = 774
                self.field_decl()
                pass

            elif la_ == 2:
                self.state = 775
                self.struct_decl()
                pass

            elif la_ == 3:
                self.state = 776
                self.interface_decl()
                pass

            elif la_ == 4:
                self.state = 777
                self.method_decl()
                pass

            elif la_ == 5:
                self.state = 778
                self.match(MiniGoParser.NEWLINE)
                pass


            self.state = 782
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 51539607648) != 0):
                self.state = 781
                self.field_decl_list()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Field_declContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ID(self):
            return self.getToken(MiniGoParser.ID, 0)

        def types(self):
            return self.getTypedRuleContext(MiniGoParser.TypesContext,0)


        def SEMICOLON(self):
            return self.getToken(MiniGoParser.SEMICOLON, 0)

        def NEWLINE(self, i:int=None):
            if i is None:
                return self.getTokens(MiniGoParser.NEWLINE)
            else:
                return self.getToken(MiniGoParser.NEWLINE, i)

        def getRuleIndex(self):
            return MiniGoParser.RULE_field_decl




    def field_decl(self):

        localctx = MiniGoParser.Field_declContext(self, self._ctx, self.state)
        self.enterRule(localctx, 144, self.RULE_field_decl)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 784
            self.match(MiniGoParser.ID)
            self.state = 785
            self.types()
            self.state = 786
            _la = self._input.LA(1)
            if not(_la==34 or _la==59):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 788
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,79,self._ctx)
            if la_ == 1:
                self.state = 787
                self.match(MiniGoParser.NEWLINE)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Interface_declContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TYPE(self):
            return self.getToken(MiniGoParser.TYPE, 0)

        def ID(self):
            return self.getToken(MiniGoParser.ID, 0)

        def INTERFACE(self):
            return self.getToken(MiniGoParser.INTERFACE, 0)

        def LBRACE(self):
            return self.getToken(MiniGoParser.LBRACE, 0)

        def method_in_decl(self):
            return self.getTypedRuleContext(MiniGoParser.Method_in_declContext,0)


        def RBRACE(self):
            return self.getToken(MiniGoParser.RBRACE, 0)

        def newlines(self):
            return self.getTypedRuleContext(MiniGoParser.NewlinesContext,0)


        def getRuleIndex(self):
            return MiniGoParser.RULE_interface_decl




    def interface_decl(self):

        localctx = MiniGoParser.Interface_declContext(self, self._ctx, self.state)
        self.enterRule(localctx, 146, self.RULE_interface_decl)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 790
            self.match(MiniGoParser.TYPE)
            self.state = 791
            self.match(MiniGoParser.ID)
            self.state = 792
            self.match(MiniGoParser.INTERFACE)
            self.state = 793
            self.match(MiniGoParser.LBRACE)
            self.state = 795
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,80,self._ctx)
            if la_ == 1:
                self.state = 794
                self.newlines(0)


            self.state = 797
            self.method_in_decl()
            self.state = 798
            self.match(MiniGoParser.RBRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Method_in_declContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NEWLINE(self):
            return self.getToken(MiniGoParser.NEWLINE, 0)

        def method_in_decl(self):
            return self.getTypedRuleContext(MiniGoParser.Method_in_declContext,0)


        def ID(self):
            return self.getToken(MiniGoParser.ID, 0)

        def LPAREN(self):
            return self.getToken(MiniGoParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(MiniGoParser.RPAREN, 0)

        def SEMICOLON(self):
            return self.getToken(MiniGoParser.SEMICOLON, 0)

        def param_decl(self):
            return self.getTypedRuleContext(MiniGoParser.Param_declContext,0)


        def types(self):
            return self.getTypedRuleContext(MiniGoParser.TypesContext,0)


        def getRuleIndex(self):
            return MiniGoParser.RULE_method_in_decl




    def method_in_decl(self):

        localctx = MiniGoParser.Method_in_declContext(self, self._ctx, self.state)
        self.enterRule(localctx, 148, self.RULE_method_in_decl)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 811
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [35]:
                self.state = 800
                self.match(MiniGoParser.ID)
                self.state = 801
                self.match(MiniGoParser.LPAREN)
                self.state = 803
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==35:
                    self.state = 802
                    self.param_decl()


                self.state = 805
                self.match(MiniGoParser.RPAREN)
                self.state = 807
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 7)) & ~0x3f) == 0 and ((1 << (_la - 7)) & 288230376420147263) != 0):
                    self.state = 806
                    self.types()


                self.state = 809
                _la = self._input.LA(1)
                if not(_la==34 or _la==59):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            elif token in [34]:
                self.state = 810
                self.match(MiniGoParser.NEWLINE)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 814
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==34 or _la==35:
                self.state = 813
                self.method_in_decl()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Param_declContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ID(self):
            return self.getToken(MiniGoParser.ID, 0)

        def param_decl_tail(self):
            return self.getTypedRuleContext(MiniGoParser.Param_decl_tailContext,0)


        def types(self):
            return self.getTypedRuleContext(MiniGoParser.TypesContext,0)


        def COMMA(self):
            return self.getToken(MiniGoParser.COMMA, 0)

        def param_decl(self):
            return self.getTypedRuleContext(MiniGoParser.Param_declContext,0)


        def getRuleIndex(self):
            return MiniGoParser.RULE_param_decl




    def param_decl(self):

        localctx = MiniGoParser.Param_declContext(self, self._ctx, self.state)
        self.enterRule(localctx, 150, self.RULE_param_decl)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 816
            self.match(MiniGoParser.ID)
            self.state = 817
            self.param_decl_tail()
            self.state = 818
            self.types()
            self.state = 822
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==58:
                self.state = 820
                self.match(MiniGoParser.COMMA)
                self.state = 821
                self.param_decl()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Param_decl_tailContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COMMA(self):
            return self.getToken(MiniGoParser.COMMA, 0)

        def ID(self):
            return self.getToken(MiniGoParser.ID, 0)

        def param_decl_tail(self):
            return self.getTypedRuleContext(MiniGoParser.Param_decl_tailContext,0)


        def getRuleIndex(self):
            return MiniGoParser.RULE_param_decl_tail




    def param_decl_tail(self):

        localctx = MiniGoParser.Param_decl_tailContext(self, self._ctx, self.state)
        self.enterRule(localctx, 152, self.RULE_param_decl_tail)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 827
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==58:
                self.state = 824
                self.match(MiniGoParser.COMMA)
                self.state = 825
                self.match(MiniGoParser.ID)
                self.state = 826
                self.param_decl_tail()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Function_callContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ID(self):
            return self.getToken(MiniGoParser.ID, 0)

        def LPAREN(self):
            return self.getToken(MiniGoParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(MiniGoParser.RPAREN, 0)

        def expr_list(self):
            return self.getTypedRuleContext(MiniGoParser.Expr_listContext,0)


        def built_in_function_call(self):
            return self.getTypedRuleContext(MiniGoParser.Built_in_function_callContext,0)


        def getRuleIndex(self):
            return MiniGoParser.RULE_function_call




    def function_call(self):

        localctx = MiniGoParser.Function_callContext(self, self._ctx, self.state)
        self.enterRule(localctx, 154, self.RULE_function_call)
        try:
            self.state = 836
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [35]:
                self.enterOuterAlt(localctx, 1)
                self.state = 829
                self.match(MiniGoParser.ID)
                self.state = 830
                self.match(MiniGoParser.LPAREN)
                self.state = 832
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,87,self._ctx)
                if la_ == 1:
                    self.state = 831
                    self.expr_list()


                self.state = 834
                self.match(MiniGoParser.RPAREN)
                pass
            elif token in [21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33]:
                self.enterOuterAlt(localctx, 2)
                self.state = 835
                self.built_in_function_call()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Func_declContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FUNC(self):
            return self.getToken(MiniGoParser.FUNC, 0)

        def ID(self):
            return self.getToken(MiniGoParser.ID, 0)

        def LPAREN(self):
            return self.getToken(MiniGoParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(MiniGoParser.RPAREN, 0)

        def block(self):
            return self.getTypedRuleContext(MiniGoParser.BlockContext,0)


        def param_decl(self):
            return self.getTypedRuleContext(MiniGoParser.Param_declContext,0)


        def types(self):
            return self.getTypedRuleContext(MiniGoParser.TypesContext,0)


        def getRuleIndex(self):
            return MiniGoParser.RULE_func_decl




    def func_decl(self):

        localctx = MiniGoParser.Func_declContext(self, self._ctx, self.state)
        self.enterRule(localctx, 156, self.RULE_func_decl)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 838
            self.match(MiniGoParser.FUNC)
            self.state = 839
            self.match(MiniGoParser.ID)
            self.state = 840
            self.match(MiniGoParser.LPAREN)
            self.state = 842
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==35:
                self.state = 841
                self.param_decl()


            self.state = 844
            self.match(MiniGoParser.RPAREN)
            self.state = 846
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 7)) & ~0x3f) == 0 and ((1 << (_la - 7)) & 288230376420147263) != 0):
                self.state = 845
                self.types()


            self.state = 848
            self.block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Method_declContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FUNC(self):
            return self.getToken(MiniGoParser.FUNC, 0)

        def LPAREN(self, i:int=None):
            if i is None:
                return self.getTokens(MiniGoParser.LPAREN)
            else:
                return self.getToken(MiniGoParser.LPAREN, i)

        def ID(self, i:int=None):
            if i is None:
                return self.getTokens(MiniGoParser.ID)
            else:
                return self.getToken(MiniGoParser.ID, i)

        def userDefineType(self):
            return self.getTypedRuleContext(MiniGoParser.UserDefineTypeContext,0)


        def RPAREN(self, i:int=None):
            if i is None:
                return self.getTokens(MiniGoParser.RPAREN)
            else:
                return self.getToken(MiniGoParser.RPAREN, i)

        def block(self):
            return self.getTypedRuleContext(MiniGoParser.BlockContext,0)


        def param_decl(self):
            return self.getTypedRuleContext(MiniGoParser.Param_declContext,0)


        def types(self):
            return self.getTypedRuleContext(MiniGoParser.TypesContext,0)


        def getRuleIndex(self):
            return MiniGoParser.RULE_method_decl




    def method_decl(self):

        localctx = MiniGoParser.Method_declContext(self, self._ctx, self.state)
        self.enterRule(localctx, 158, self.RULE_method_decl)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 850
            self.match(MiniGoParser.FUNC)
            self.state = 851
            self.match(MiniGoParser.LPAREN)
            self.state = 852
            self.match(MiniGoParser.ID)
            self.state = 853
            self.userDefineType()
            self.state = 854
            self.match(MiniGoParser.RPAREN)
            self.state = 855
            self.match(MiniGoParser.ID)
            self.state = 856
            self.match(MiniGoParser.LPAREN)
            self.state = 858
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==35:
                self.state = 857
                self.param_decl()


            self.state = 860
            self.match(MiniGoParser.RPAREN)
            self.state = 862
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 7)) & ~0x3f) == 0 and ((1 << (_la - 7)) & 288230376420147263) != 0):
                self.state = 861
                self.types()


            self.state = 864
            self.block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BlockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LBRACE(self):
            return self.getToken(MiniGoParser.LBRACE, 0)

        def stmt_list(self):
            return self.getTypedRuleContext(MiniGoParser.Stmt_listContext,0)


        def RBRACE(self):
            return self.getToken(MiniGoParser.RBRACE, 0)

        def NEWLINE(self):
            return self.getToken(MiniGoParser.NEWLINE, 0)

        def getRuleIndex(self):
            return MiniGoParser.RULE_block




    def block(self):

        localctx = MiniGoParser.BlockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 160, self.RULE_block)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 866
            self.match(MiniGoParser.LBRACE)
            self.state = 868
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,93,self._ctx)
            if la_ == 1:
                self.state = 867
                self.match(MiniGoParser.NEWLINE)


            self.state = 870
            self.stmt_list(0)
            self.state = 871
            self.match(MiniGoParser.RBRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Built_in_function_callContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return MiniGoParser.RULE_built_in_function_call

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class PutIntLnCallContext(Built_in_function_callContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MiniGoParser.Built_in_function_callContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def PUT_INT_LN(self):
            return self.getToken(MiniGoParser.PUT_INT_LN, 0)
        def LPAREN(self):
            return self.getToken(MiniGoParser.LPAREN, 0)
        def expr(self):
            return self.getTypedRuleContext(MiniGoParser.ExprContext,0)

        def RPAREN(self):
            return self.getToken(MiniGoParser.RPAREN, 0)


    class PutFloatCallContext(Built_in_function_callContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MiniGoParser.Built_in_function_callContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def PUT_FLOAT(self):
            return self.getToken(MiniGoParser.PUT_FLOAT, 0)
        def LPAREN(self):
            return self.getToken(MiniGoParser.LPAREN, 0)
        def expr(self):
            return self.getTypedRuleContext(MiniGoParser.ExprContext,0)

        def RPAREN(self):
            return self.getToken(MiniGoParser.RPAREN, 0)


    class PutFloatLnCallContext(Built_in_function_callContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MiniGoParser.Built_in_function_callContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def PUT_FLOAT_LN(self):
            return self.getToken(MiniGoParser.PUT_FLOAT_LN, 0)
        def LPAREN(self):
            return self.getToken(MiniGoParser.LPAREN, 0)
        def expr(self):
            return self.getTypedRuleContext(MiniGoParser.ExprContext,0)

        def RPAREN(self):
            return self.getToken(MiniGoParser.RPAREN, 0)


    class PutStringLnCallContext(Built_in_function_callContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MiniGoParser.Built_in_function_callContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def PUT_STRING_LN(self):
            return self.getToken(MiniGoParser.PUT_STRING_LN, 0)
        def LPAREN(self):
            return self.getToken(MiniGoParser.LPAREN, 0)
        def expr(self):
            return self.getTypedRuleContext(MiniGoParser.ExprContext,0)

        def RPAREN(self):
            return self.getToken(MiniGoParser.RPAREN, 0)


    class PutBoolCallContext(Built_in_function_callContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MiniGoParser.Built_in_function_callContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def PUT_BOOL(self):
            return self.getToken(MiniGoParser.PUT_BOOL, 0)
        def LPAREN(self):
            return self.getToken(MiniGoParser.LPAREN, 0)
        def expr(self):
            return self.getTypedRuleContext(MiniGoParser.ExprContext,0)

        def RPAREN(self):
            return self.getToken(MiniGoParser.RPAREN, 0)


    class GetStringCallContext(Built_in_function_callContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MiniGoParser.Built_in_function_callContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def GET_STRING(self):
            return self.getToken(MiniGoParser.GET_STRING, 0)
        def LPAREN(self):
            return self.getToken(MiniGoParser.LPAREN, 0)
        def RPAREN(self):
            return self.getToken(MiniGoParser.RPAREN, 0)


    class GetIntCallContext(Built_in_function_callContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MiniGoParser.Built_in_function_callContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def GET_INT(self):
            return self.getToken(MiniGoParser.GET_INT, 0)
        def LPAREN(self):
            return self.getToken(MiniGoParser.LPAREN, 0)
        def RPAREN(self):
            return self.getToken(MiniGoParser.RPAREN, 0)


    class PutLnCallContext(Built_in_function_callContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MiniGoParser.Built_in_function_callContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def PUT_LN(self):
            return self.getToken(MiniGoParser.PUT_LN, 0)
        def LPAREN(self):
            return self.getToken(MiniGoParser.LPAREN, 0)
        def RPAREN(self):
            return self.getToken(MiniGoParser.RPAREN, 0)


    class PutStringCallContext(Built_in_function_callContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MiniGoParser.Built_in_function_callContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def PUT_STRING(self):
            return self.getToken(MiniGoParser.PUT_STRING, 0)
        def LPAREN(self):
            return self.getToken(MiniGoParser.LPAREN, 0)
        def expr(self):
            return self.getTypedRuleContext(MiniGoParser.ExprContext,0)

        def RPAREN(self):
            return self.getToken(MiniGoParser.RPAREN, 0)


    class GetBoolCallContext(Built_in_function_callContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MiniGoParser.Built_in_function_callContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def GET_BOOL(self):
            return self.getToken(MiniGoParser.GET_BOOL, 0)
        def LPAREN(self):
            return self.getToken(MiniGoParser.LPAREN, 0)
        def RPAREN(self):
            return self.getToken(MiniGoParser.RPAREN, 0)


    class PutBoolLnCallContext(Built_in_function_callContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MiniGoParser.Built_in_function_callContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def PUT_BOOL_LN(self):
            return self.getToken(MiniGoParser.PUT_BOOL_LN, 0)
        def LPAREN(self):
            return self.getToken(MiniGoParser.LPAREN, 0)
        def expr(self):
            return self.getTypedRuleContext(MiniGoParser.ExprContext,0)

        def RPAREN(self):
            return self.getToken(MiniGoParser.RPAREN, 0)


    class GetFloatCallContext(Built_in_function_callContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MiniGoParser.Built_in_function_callContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def GET_FLOAT(self):
            return self.getToken(MiniGoParser.GET_FLOAT, 0)
        def LPAREN(self):
            return self.getToken(MiniGoParser.LPAREN, 0)
        def RPAREN(self):
            return self.getToken(MiniGoParser.RPAREN, 0)


    class PutIntCallContext(Built_in_function_callContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MiniGoParser.Built_in_function_callContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def PUT_INT(self):
            return self.getToken(MiniGoParser.PUT_INT, 0)
        def LPAREN(self):
            return self.getToken(MiniGoParser.LPAREN, 0)
        def expr(self):
            return self.getTypedRuleContext(MiniGoParser.ExprContext,0)

        def RPAREN(self):
            return self.getToken(MiniGoParser.RPAREN, 0)



    def built_in_function_call(self):

        localctx = MiniGoParser.Built_in_function_callContext(self, self._ctx, self.state)
        self.enterRule(localctx, 162, self.RULE_built_in_function_call)
        try:
            self.state = 928
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [21]:
                localctx = MiniGoParser.GetIntCallContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 873
                self.match(MiniGoParser.GET_INT)
                self.state = 874
                self.match(MiniGoParser.LPAREN)
                self.state = 875
                self.match(MiniGoParser.RPAREN)
                pass
            elif token in [22]:
                localctx = MiniGoParser.PutIntCallContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 876
                self.match(MiniGoParser.PUT_INT)
                self.state = 877
                self.match(MiniGoParser.LPAREN)
                self.state = 878
                self.expr()
                self.state = 879
                self.match(MiniGoParser.RPAREN)
                pass
            elif token in [23]:
                localctx = MiniGoParser.PutIntLnCallContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 881
                self.match(MiniGoParser.PUT_INT_LN)
                self.state = 882
                self.match(MiniGoParser.LPAREN)
                self.state = 883
                self.expr()
                self.state = 884
                self.match(MiniGoParser.RPAREN)
                pass
            elif token in [24]:
                localctx = MiniGoParser.GetFloatCallContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 886
                self.match(MiniGoParser.GET_FLOAT)
                self.state = 887
                self.match(MiniGoParser.LPAREN)
                self.state = 888
                self.match(MiniGoParser.RPAREN)
                pass
            elif token in [25]:
                localctx = MiniGoParser.PutFloatCallContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 889
                self.match(MiniGoParser.PUT_FLOAT)
                self.state = 890
                self.match(MiniGoParser.LPAREN)
                self.state = 891
                self.expr()
                self.state = 892
                self.match(MiniGoParser.RPAREN)
                pass
            elif token in [26]:
                localctx = MiniGoParser.PutFloatLnCallContext(self, localctx)
                self.enterOuterAlt(localctx, 6)
                self.state = 894
                self.match(MiniGoParser.PUT_FLOAT_LN)
                self.state = 895
                self.match(MiniGoParser.LPAREN)
                self.state = 896
                self.expr()
                self.state = 897
                self.match(MiniGoParser.RPAREN)
                pass
            elif token in [27]:
                localctx = MiniGoParser.GetBoolCallContext(self, localctx)
                self.enterOuterAlt(localctx, 7)
                self.state = 899
                self.match(MiniGoParser.GET_BOOL)
                self.state = 900
                self.match(MiniGoParser.LPAREN)
                self.state = 901
                self.match(MiniGoParser.RPAREN)
                pass
            elif token in [28]:
                localctx = MiniGoParser.PutBoolCallContext(self, localctx)
                self.enterOuterAlt(localctx, 8)
                self.state = 902
                self.match(MiniGoParser.PUT_BOOL)
                self.state = 903
                self.match(MiniGoParser.LPAREN)
                self.state = 904
                self.expr()
                self.state = 905
                self.match(MiniGoParser.RPAREN)
                pass
            elif token in [29]:
                localctx = MiniGoParser.PutBoolLnCallContext(self, localctx)
                self.enterOuterAlt(localctx, 9)
                self.state = 907
                self.match(MiniGoParser.PUT_BOOL_LN)
                self.state = 908
                self.match(MiniGoParser.LPAREN)
                self.state = 909
                self.expr()
                self.state = 910
                self.match(MiniGoParser.RPAREN)
                pass
            elif token in [30]:
                localctx = MiniGoParser.GetStringCallContext(self, localctx)
                self.enterOuterAlt(localctx, 10)
                self.state = 912
                self.match(MiniGoParser.GET_STRING)
                self.state = 913
                self.match(MiniGoParser.LPAREN)
                self.state = 914
                self.match(MiniGoParser.RPAREN)
                pass
            elif token in [31]:
                localctx = MiniGoParser.PutStringCallContext(self, localctx)
                self.enterOuterAlt(localctx, 11)
                self.state = 915
                self.match(MiniGoParser.PUT_STRING)
                self.state = 916
                self.match(MiniGoParser.LPAREN)
                self.state = 917
                self.expr()
                self.state = 918
                self.match(MiniGoParser.RPAREN)
                pass
            elif token in [32]:
                localctx = MiniGoParser.PutStringLnCallContext(self, localctx)
                self.enterOuterAlt(localctx, 12)
                self.state = 920
                self.match(MiniGoParser.PUT_STRING_LN)
                self.state = 921
                self.match(MiniGoParser.LPAREN)
                self.state = 922
                self.expr()
                self.state = 923
                self.match(MiniGoParser.RPAREN)
                pass
            elif token in [33]:
                localctx = MiniGoParser.PutLnCallContext(self, localctx)
                self.enterOuterAlt(localctx, 13)
                self.state = 925
                self.match(MiniGoParser.PUT_LN)
                self.state = 926
                self.match(MiniGoParser.LPAREN)
                self.state = 927
                self.match(MiniGoParser.RPAREN)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx



    def sempred(self, localctx:RuleContext, ruleIndex:int, predIndex:int):
        if self._predicates == None:
            self._predicates = dict()
        self._predicates[2] = self.decl_or_stmt_sempred
        self._predicates[4] = self.newlines_sempred
        self._predicates[6] = self.logical_expr_sempred
        self._predicates[7] = self.equality_expr_sempred
        self._predicates[8] = self.relational_expr_sempred
        self._predicates[9] = self.additive_expr_sempred
        self._predicates[10] = self.multiplicative_expr_sempred
        self._predicates[12] = self.field_access_sempred
        self._predicates[13] = self.atom_arr_access_sempred
        self._predicates[24] = self.logical_index_expr_sempred
        self._predicates[25] = self.equality_index_expr_sempred
        self._predicates[26] = self.relational_index_expr_sempred
        self._predicates[27] = self.additive_index_expr_sempred
        self._predicates[28] = self.multiplicative_index_expr_sempred
        self._predicates[31] = self.signed_tail_sempred
        self._predicates[39] = self.struct_field_access_sempred
        self._predicates[40] = self.struct_field_access_no_func_sempred
        self._predicates[43] = self.stmt_list_sempred
        pred = self._predicates.get(ruleIndex, None)
        if pred is None:
            raise Exception("No predicate with index:" + str(ruleIndex))
        else:
            return pred(localctx, predIndex)

    def decl_or_stmt_sempred(self, localctx:Decl_or_stmtContext, predIndex:int):
            if predIndex == 0:
                return self.precpred(self._ctx, 4)
         

            if predIndex == 1:
                return self.precpred(self._ctx, 3)
         

            if predIndex == 2:
                return self.precpred(self._ctx, 2)
         

    def newlines_sempred(self, localctx:NewlinesContext, predIndex:int):
            if predIndex == 3:
                return self.precpred(self._ctx, 1)
         

    def logical_expr_sempred(self, localctx:Logical_exprContext, predIndex:int):
            if predIndex == 4:
                return self.precpred(self._ctx, 2)
         

    def equality_expr_sempred(self, localctx:Equality_exprContext, predIndex:int):
            if predIndex == 5:
                return self.precpred(self._ctx, 2)
         

    def relational_expr_sempred(self, localctx:Relational_exprContext, predIndex:int):
            if predIndex == 6:
                return self.precpred(self._ctx, 2)
         

    def additive_expr_sempred(self, localctx:Additive_exprContext, predIndex:int):
            if predIndex == 7:
                return self.precpred(self._ctx, 2)
         

    def multiplicative_expr_sempred(self, localctx:Multiplicative_exprContext, predIndex:int):
            if predIndex == 8:
                return self.precpred(self._ctx, 2)
         

    def field_access_sempred(self, localctx:Field_accessContext, predIndex:int):
            if predIndex == 9:
                return self.precpred(self._ctx, 2)
         

    def atom_arr_access_sempred(self, localctx:Atom_arr_accessContext, predIndex:int):
            if predIndex == 10:
                return self.precpred(self._ctx, 2)
         

    def logical_index_expr_sempred(self, localctx:Logical_index_exprContext, predIndex:int):
            if predIndex == 11:
                return self.precpred(self._ctx, 2)
         

    def equality_index_expr_sempred(self, localctx:Equality_index_exprContext, predIndex:int):
            if predIndex == 12:
                return self.precpred(self._ctx, 2)
         

    def relational_index_expr_sempred(self, localctx:Relational_index_exprContext, predIndex:int):
            if predIndex == 13:
                return self.precpred(self._ctx, 2)
         

    def additive_index_expr_sempred(self, localctx:Additive_index_exprContext, predIndex:int):
            if predIndex == 14:
                return self.precpred(self._ctx, 2)
         

    def multiplicative_index_expr_sempred(self, localctx:Multiplicative_index_exprContext, predIndex:int):
            if predIndex == 15:
                return self.precpred(self._ctx, 2)
         

    def signed_tail_sempred(self, localctx:Signed_tailContext, predIndex:int):
            if predIndex == 16:
                return self.precpred(self._ctx, 3)
         

            if predIndex == 17:
                return self.precpred(self._ctx, 2)
         

            if predIndex == 18:
                return self.precpred(self._ctx, 1)
         

    def struct_field_access_sempred(self, localctx:Struct_field_accessContext, predIndex:int):
            if predIndex == 19:
                return self.precpred(self._ctx, 4)
         

    def struct_field_access_no_func_sempred(self, localctx:Struct_field_access_no_funcContext, predIndex:int):
            if predIndex == 20:
                return self.precpred(self._ctx, 3)
         

    def stmt_list_sempred(self, localctx:Stmt_listContext, predIndex:int):
            if predIndex == 21:
                return self.precpred(self._ctx, 1)
         




